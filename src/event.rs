// This file is auto-generated by generate_event_structs.ps1
// Do not edit manually

pub mod format;
pub mod cargo;

use chrono::{DateTime, Utc};
use serde::Deserialize;
#[derive(Clone, Debug, Deserialize)]
pub struct Item {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Component {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Consumable {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Data {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct AfmuRepairs {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Module_Localised")]
    pub module_localised: Option<String>,

    #[serde(rename = "FullyRepaired")]
    pub fully_repaired: bool,

    #[serde(rename = "Health")]
    pub health: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct AppliedToSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ApproachBody {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ApproachSettlement {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "StationFaction")]
    pub station_faction: Option<ApproachSettlementStationFaction>,

    #[serde(rename = "StationGovernment")]
    pub station_government: Option<String>,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Vec<ApproachSettlementStationEconomies>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ApproachSettlementStationEconomies {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ApproachSettlementStationFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct AsteroidCracked {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Backpack {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Items")]
    pub items: Option<Vec<Item>>,

    #[serde(rename = "Components")]
    pub components: Option<Vec<Component>>,

    #[serde(rename = "Consumables")]
    pub consumables: Option<Vec<Consumable>>,

    #[serde(rename = "Data")]
    pub data: Option<Vec<Data>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BackpackChange {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Added")]
    pub added: Option<Vec<BackpackChangechangeEntry>>,

    #[serde(rename = "Removed")]
    pub removed: Option<Vec<BackpackChangechangeEntry>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct BackpackChangechangeEntry {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BookDropship {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Retreat")]
    pub retreat: Option<bool>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: String,

    #[serde(rename = "DestinationLocation")]
    pub destination_location: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BookTaxi {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: String,

    #[serde(rename = "DestinationLocation")]
    pub destination_location: String,

    #[serde(rename = "Retreat")]
    pub retreat: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Bounty {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Rewards")]
    pub rewards: Vec<BountyRewards>,

    #[serde(rename = "PilotName")]
    pub pilot_name: Option<String>,

    #[serde(rename = "PilotName_Localised")]
    pub pilot_name_localised: Option<String>,

    #[serde(rename = "Target")]
    pub target: String,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    #[serde(rename = "TotalReward")]
    pub total_reward: Option<i64>,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

    #[serde(rename = "VictimFaction_Localised")]
    pub victim_faction_localised: Option<String>,

    #[serde(rename = "SharedWithOthers")]
    pub shared_with_others: Option<i64>,

    #[serde(rename = "Reward")]
    pub reward: Option<i64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct BountyRewards {

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Reward")]
    pub reward: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyAmmo {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyDrones {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "TotalCost")]
    pub total_cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyExplorationData {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "Cost")]
    pub cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: Option<String>,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: Option<String>,

    #[serde(rename = "Count")]
    pub count: Option<i64>,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "TotalCount")]
    pub total_count: Option<i64>,

    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<BuyMicroResourcesMicroResources>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct BuyMicroResourcesMicroResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuySuit {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyTradeData {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "Cost")]
    pub cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct BuyWeapon {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CancelDropship {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Refund")]
    pub refund: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CancelTaxi {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Refund")]
    pub refund: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CapShipBond {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Reward")]
    pub reward: i64,

    #[serde(rename = "AwardingFaction")]
    pub awarding_faction: String,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Cargo {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Vessel")]
    pub vessel: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Inventory")]
    pub inventory: Vec<CargoInventory>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CargoInventory {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Stolen")]
    pub stolen: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CargoDepot {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "UpdateType")]
    pub update_type: String,

    #[serde(rename = "CargoType")]
    pub cargo_type: Option<String>,

    #[serde(rename = "Count")]
    pub count: Option<i64>,

    #[serde(rename = "StartMarketID")]
    pub start_market_id: i64,

    #[serde(rename = "EndMarketID")]
    pub end_market_id: i64,

    #[serde(rename = "ItemsCollected")]
    pub items_collected: i64,

    #[serde(rename = "ItemsDelivered")]
    pub items_delivered: i64,

    #[serde(rename = "TotalItemsToDeliver")]
    pub total_items_to_deliver: i64,

    #[serde(rename = "Progress")]
    pub progress: f64,

    #[serde(rename = "CargoType_Localised")]
    pub cargo_type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CargoTransfer {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Transfers")]
    pub transfers: Vec<CargoTransferTransfers>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CargoTransferTransfers {

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Direction")]
    pub direction: String,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierBankTransfer {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Deposit")]
    pub deposit: Option<i64>,

    #[serde(rename = "Withdraw")]
    pub withdraw: Option<i64>,

    #[serde(rename = "PlayerBalance")]
    pub player_balance: i64,

    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierBuy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "BoughtAtMarket")]
    pub bought_at_market: i64,

    #[serde(rename = "Location")]
    pub location: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "Variant")]
    pub variant: String,

    #[serde(rename = "Callsign")]
    pub callsign: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierCancelDecommission {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierCrewServices {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "CrewRole")]
    pub crew_role: String,

    #[serde(rename = "Operation")]
    pub operation: String,

    #[serde(rename = "CrewName")]
    pub crew_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDecommission {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "ScrapRefund")]
    pub scrap_refund: i64,

    #[serde(rename = "ScrapTime")]
    pub scrap_time: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDepositFuel {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Amount")]
    pub amount: i64,

    #[serde(rename = "Total")]
    pub total: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDockingPermission {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "DockingAccess")]
    pub docking_access: String,

    #[serde(rename = "AllowNotorious")]
    pub allow_notorious: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierFinance {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: i64,

    #[serde(rename = "ReserveBalance")]
    pub reserve_balance: i64,

    #[serde(rename = "AvailableBalance")]
    pub available_balance: i64,

    #[serde(rename = "ReservePercent")]
    pub reserve_percent: i64,

    #[serde(rename = "TaxRate_pioneersupplies")]
    pub tax_rate_pioneersupplies: Option<i64>,

    #[serde(rename = "TaxRate_shipyard")]
    pub tax_rate_shipyard: Option<i64>,

    #[serde(rename = "TaxRate_rearm")]
    pub tax_rate_rearm: Option<i64>,

    #[serde(rename = "TaxRate_outfitting")]
    pub tax_rate_outfitting: Option<i64>,

    #[serde(rename = "TaxRate_refuel")]
    pub tax_rate_refuel: Option<i64>,

    #[serde(rename = "TaxRate_repair")]
    pub tax_rate_repair: Option<i64>,

    #[serde(rename = "TaxRate")]
    pub tax_rate: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJump {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Docked")]
    pub docked: bool,

    #[serde(rename = "OnFoot")]
    pub on_foot: Option<bool>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationFaction")]
    pub station_faction: Option<CarrierJumpStationFaction>,

    #[serde(rename = "StationGovernment")]
    pub station_government: String,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: String,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Vec<CarrierJumpStationEconomies>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    #[serde(rename = "Population")]
    pub population: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "Factions")]
    pub factions: Vec<CarrierJumpFactions>,

    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<CarrierJumpSystemFaction>,

    #[serde(rename = "Conflicts")]
    pub conflicts: Vec<CarrierJumpConflicts>,

    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<CarrierJumpThargoidWar>,

    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<i64>,

    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<i64>,

    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Vec<CarrierJumpPowerplayConflictProgress>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpStationEconomies {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpStationFaction {

    #[serde(rename = "Name")]
    pub name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpThargoidWar {

    #[serde(rename = "CurrentState")]
    pub current_state: String,

    #[serde(rename = "NextStateSuccess")]
    pub next_state_success: Option<String>,

    #[serde(rename = "NextStateFailure")]
    pub next_state_failure: Option<String>,

    #[serde(rename = "SuccessStateReached")]
    pub success_state_reached: bool,

    #[serde(rename = "WarProgress")]
    pub war_progress: Option<f64>,

    #[serde(rename = "RemainingPorts")]
    pub remaining_ports: Option<i64>,

    #[serde(rename = "EstimatedRemainingTime")]
    pub estimated_remaining_time: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpConflicts {

    #[serde(rename = "WarType")]
    pub war_type: String,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "Faction1")]
    pub faction1: CarrierJumpConflictsFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: CarrierJumpConflictsFaction2,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpConflictsFaction2 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpConflictsFaction1 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "Stake_Localised")]
    pub stake_localised: Option<String>,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpPowerplayConflictProgress {

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "ConflictProgress")]
    pub conflict_progress: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpSystemFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpFactions {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "PendingStates")]
    pub pending_states: Vec<CarrierJumpFactionsPendingStates>,

    #[serde(rename = "ActiveStates")]
    pub active_states: Vec<CarrierJumpFactionsActiveStates>,

    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Vec<CarrierJumpFactionsRecoveringStates>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpFactionsActiveStates {

    #[serde(rename = "State")]
    pub state: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpFactionsPendingStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpFactionsRecoveringStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpCancelled {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpRequest {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "DepartureTime", with = "crate::event::format::optional_date")]
    pub departure_time: Option<DateTime<Utc>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierLocation {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierModulePack {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Operation")]
    pub operation: String,

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: i64,

    #[serde(rename = "Refund")]
    pub refund: Option<i64>,

    #[serde(rename = "Cost")]
    pub cost: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierNameChange {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Callsign")]
    pub callsign: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierShipPack {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Operation")]
    pub operation: String,

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: i64,

    #[serde(rename = "Refund")]
    pub refund: Option<i64>,

    #[serde(rename = "Cost")]
    pub cost: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStats {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "Callsign")]
    pub callsign: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "DockingAccess")]
    pub docking_access: String,

    #[serde(rename = "AllowNotorious")]
    pub allow_notorious: bool,

    #[serde(rename = "FuelLevel")]
    pub fuel_level: i64,

    #[serde(rename = "JumpRangeCurr")]
    pub jump_range_curr: f64,

    #[serde(rename = "JumpRangeMax")]
    pub jump_range_max: f64,

    #[serde(rename = "PendingDecommission")]
    pub pending_decommission: bool,

    #[serde(rename = "SpaceUsage")]
    pub space_usage: CarrierStatsSpaceUsage,

    #[serde(rename = "Finance")]
    pub finance: CarrierStatsFinance,

    #[serde(rename = "Crew")]
    pub crew: Vec<CarrierStatsCrew>,

    #[serde(rename = "ShipPacks")]
    pub ship_packs: Vec<CarrierStatsShipPacks>,

    #[serde(rename = "ModulePacks")]
    pub module_packs: Vec<CarrierStatsModulePacks>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsShipPacks {

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsFinance {

    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: i64,

    #[serde(rename = "ReserveBalance")]
    pub reserve_balance: i64,

    #[serde(rename = "AvailableBalance")]
    pub available_balance: i64,

    #[serde(rename = "ReservePercent")]
    pub reserve_percent: Option<i64>,

    #[serde(rename = "TaxRate_shipyard")]
    pub tax_rate_shipyard: Option<i64>,

    #[serde(rename = "TaxRate_rearm")]
    pub tax_rate_rearm: Option<i64>,

    #[serde(rename = "TaxRate_outfitting")]
    pub tax_rate_outfitting: Option<i64>,

    #[serde(rename = "TaxRate_refuel")]
    pub tax_rate_refuel: Option<i64>,

    #[serde(rename = "TaxRate_repair")]
    pub tax_rate_repair: Option<i64>,

    #[serde(rename = "TaxRate_pioneersupplies")]
    pub tax_rate_pioneersupplies: Option<i64>,

    #[serde(rename = "TaxRate")]
    pub tax_rate: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsModulePacks {

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsSpaceUsage {

    #[serde(rename = "TotalCapacity")]
    pub total_capacity: i64,

    #[serde(rename = "Crew")]
    pub crew: i64,

    #[serde(rename = "Cargo")]
    pub cargo: i64,

    #[serde(rename = "CargoSpaceReserved")]
    pub cargo_space_reserved: i64,

    #[serde(rename = "ShipPacks")]
    pub ship_packs: i64,

    #[serde(rename = "ModulePacks")]
    pub module_packs: i64,

    #[serde(rename = "FreeSpace")]
    pub free_space: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsCrew {

    #[serde(rename = "CrewRole")]
    pub crew_role: String,

    #[serde(rename = "Activated")]
    pub activated: bool,

    #[serde(rename = "Enabled")]
    pub enabled: Option<bool>,

    #[serde(rename = "CrewName")]
    pub crew_name: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CarrierTradeOrder {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: i64,

    #[serde(rename = "BlackMarket")]
    pub black_market: bool,

    #[serde(rename = "Commodity")]
    pub commodity: String,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "PurchaseOrder")]
    pub purchase_order: Option<i64>,

    #[serde(rename = "SaleOrder")]
    pub sale_order: Option<i64>,

    #[serde(rename = "CancelTrade")]
    pub cancel_trade: Option<bool>,

    #[serde(rename = "Price")]
    pub price: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ChangeCrewRole {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Role")]
    pub role: String,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ClearImpound {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "System")]
    pub system: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ClearSavedGame {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FID")]
    pub fid: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CockpitBreached {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CodexEntry {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "EntryID")]
    pub entry_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "SubCategory")]
    pub sub_category: String,

    #[serde(rename = "SubCategory_Localised")]
    pub sub_category_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "Region")]
    pub region: String,

    #[serde(rename = "Region_Localised")]
    pub region_localised: Option<String>,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: Option<i64>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "VoucherAmount")]
    pub voucher_amount: Option<i64>,

    #[serde(rename = "NearestDestination")]
    pub nearest_destination: Option<String>,

    #[serde(rename = "NearestDestination_Localised")]
    pub nearest_destination_localised: Option<String>,

    #[serde(rename = "IsNewEntry")]
    pub is_new_entry: Option<bool>,

    #[serde(rename = "NewTraitsDiscovered")]
    pub new_traits_discovered: Option<bool>,

    #[serde(rename = "Traits")]
    pub traits: Option<Vec<String>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CollectCargo {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Stolen")]
    pub stolen: bool,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CollectItems {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Stolen")]
    pub stolen: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationBeaconDeployed {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationConstructionDepot {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "ConstructionProgress")]
    pub construction_progress: f64,

    #[serde(rename = "ConstructionComplete")]
    pub construction_complete: bool,

    #[serde(rename = "ConstructionFailed")]
    pub construction_failed: bool,

    #[serde(rename = "ResourcesRequired")]
    pub resources_required: Vec<ColonisationConstructionDepotResourcesRequired>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationConstructionDepotResourcesRequired {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: String,

    #[serde(rename = "RequiredAmount")]
    pub required_amount: i64,

    #[serde(rename = "ProvidedAmount")]
    pub provided_amount: i64,

    #[serde(rename = "Payment")]
    pub payment: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationContribution {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Contributions")]
    pub contributions: Vec<ColonisationContributionContributions>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationContributionContributions {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: String,

    #[serde(rename = "Amount")]
    pub amount: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationSystemClaim {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationSystemClaimRelease {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Commander {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FID")]
    pub fid: String,

    #[serde(rename = "Name")]
    pub name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommitCrime {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CrimeType")]
    pub crime_type: String,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Victim")]
    pub victim: Option<String>,

    #[serde(rename = "Bounty")]
    pub bounty: Option<i64>,

    #[serde(rename = "Fine")]
    pub fine: Option<i64>,

    #[serde(rename = "Victim_Localised")]
    pub victim_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoal {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CurrentGoals")]
    pub current_goals: Vec<CommunityGoalCurrentGoals>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalCurrentGoals {

    #[serde(rename = "CGID")]
    pub cgid: i64,

    #[serde(rename = "Title")]
    pub title: String,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    #[serde(rename = "MarketName")]
    pub market_name: String,

    #[serde(rename = "Expiry", with = "crate::event::format::date")]
    pub expiry: DateTime<Utc>,

    #[serde(rename = "IsComplete")]
    pub is_complete: bool,

    #[serde(rename = "CurrentTotal")]
    pub current_total: i64,

    #[serde(rename = "PlayerContribution")]
    pub player_contribution: i64,

    #[serde(rename = "NumContributors")]
    pub num_contributors: i64,

    #[serde(rename = "TopTier")]
    pub top_tier: CommunityGoalCurrentGoalsTopTier,

    #[serde(rename = "TopRankSize")]
    pub top_rank_size: Option<i64>,

    #[serde(rename = "PlayerInTopRank")]
    pub player_in_top_rank: Option<bool>,

    #[serde(rename = "TierReached")]
    pub tier_reached: Option<String>,

    #[serde(rename = "PlayerPercentileBand")]
    pub player_percentile_band: i64,

    #[serde(rename = "Bonus")]
    pub bonus: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalCurrentGoalsTopTier {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Bonus")]
    pub bonus: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalDiscard {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CGID")]
    pub cgid: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "System")]
    pub system: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalJoin {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CGID")]
    pub cgid: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "System")]
    pub system: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalReward {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CGID")]
    pub cgid: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "Reward")]
    pub reward: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Continued {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Part")]
    pub part: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CreateSuitLoadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<CreateSuitLoadoutModules>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CreateSuitLoadoutModules {

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewAssign {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "CrewID")]
    pub crew_id: i64,

    #[serde(rename = "Role")]
    pub role: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewFire {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "CrewID")]
    pub crew_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewHire {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "CrewID")]
    pub crew_id: i64,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "CombatRank")]
    pub combat_rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewLaunchFighter {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Telepresence")]
    pub telepresence: bool,

    #[serde(rename = "Crew")]
    pub crew: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewMemberJoins {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

    #[serde(rename = "Crew")]
    pub crew: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewMemberQuits {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

    #[serde(rename = "Crew")]
    pub crew: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrewMemberRoleChange {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

    #[serde(rename = "Crew")]
    pub crew: String,

    #[serde(rename = "Role")]
    pub role: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct CrimeVictim {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Offender")]
    pub offender: String,

    #[serde(rename = "CrimeType")]
    pub crime_type: String,

    #[serde(rename = "Fine")]
    pub fine: Option<i64>,

    #[serde(rename = "Bounty")]
    pub bounty: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DatalinkScan {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Message")]
    pub message: String,

    #[serde(rename = "Message_Localised")]
    pub message_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DatalinkVoucher {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Reward")]
    pub reward: i64,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

    #[serde(rename = "PayeeFaction")]
    pub payee_faction: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DataScanned {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DeleteSuitLoadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DeliverPowerMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "TotalCount")]
    pub total_count: i64,

    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<DeliverPowerMicroResourcesMicroResources>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct DeliverPowerMicroResourcesMicroResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Died {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "KillerName")]
    pub killer_name: Option<String>,

    #[serde(rename = "KillerShip")]
    pub killer_ship: Option<String>,

    #[serde(rename = "KillerRank")]
    pub killer_rank: Option<String>,

    #[serde(rename = "KillerName_Localised")]
    pub killer_name_localised: Option<String>,

    #[serde(rename = "Killers")]
    pub killers: Option<Vec<serde_json::Value>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DisbandedSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DiscoveryScan {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Bodies")]
    pub bodies: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Disembark {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SRV")]
    pub srv: bool,

    #[serde(rename = "Taxi")]
    pub taxi: bool,

    #[serde(rename = "Multicrew")]
    pub multicrew: bool,

    #[serde(rename = "ID")]
    pub id: Option<i64>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Docked {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationFaction")]
    pub station_faction: DockedStationFaction,

    #[serde(rename = "StationGovernment")]
    pub station_government: String,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationServices")]
    pub station_services: Vec<String>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Vec<DockedStationEconomies>,

    #[serde(rename = "DistFromStarLS")]
    pub dist_from_star_ls: f64,

    #[serde(rename = "LandingPads")]
    pub landing_pads: Option<DockedLandingPads>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

    #[serde(rename = "ActiveFine")]
    pub active_fine: Option<bool>,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

    #[serde(rename = "CockpitBreach")]
    pub cockpit_breach: Option<bool>,

    #[serde(rename = "StationState")]
    pub station_state: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct DockedStationFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockedLandingPads {

    #[serde(rename = "Small")]
    pub small: i64,

    #[serde(rename = "Medium")]
    pub medium: i64,

    #[serde(rename = "Large")]
    pub large: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockedStationEconomies {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockFighter {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockingCancelled {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockingDenied {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Reason")]
    pub reason: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockingGranted {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LandingPad")]
    pub landing_pad: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockingRequested {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "LandingPads")]
    pub landing_pads: Option<DockingRequestedLandingPads>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct DockingRequestedLandingPads {

    #[serde(rename = "Small")]
    pub small: i64,

    #[serde(rename = "Medium")]
    pub medium: i64,

    #[serde(rename = "Large")]
    pub large: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockingTimeout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DockSRV {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SRVType")]
    pub srv_type: Option<String>,

    #[serde(rename = "SRVType_Localised")]
    pub srv_type_localised: Option<String>,

    #[serde(rename = "ID")]
    pub id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DropItems {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct DropshipDeploy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EjectCargo {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Abandoned")]
    pub abandoned: bool,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

    #[serde(rename = "PowerplayOrigin")]
    pub powerplay_origin: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Embark {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SRV")]
    pub srv: bool,

    #[serde(rename = "Taxi")]
    pub taxi: bool,

    #[serde(rename = "Multicrew")]
    pub multicrew: bool,

    #[serde(rename = "ID")]
    pub id: Option<i64>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "Crew")]
    pub crew: Vec<EmbarkCrew>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EmbarkCrew {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Role")]
    pub role: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EndCrewSession {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "OnCrime")]
    pub on_crime: bool,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EngineerContribution {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "Quantity")]
    pub quantity: i64,

    #[serde(rename = "TotalQuantity")]
    pub total_quantity: i64,

    #[serde(rename = "Material")]
    pub material: Option<String>,

    #[serde(rename = "Material_Localised")]
    pub material_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EngineerCraft {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Ingredients")]
    pub ingredients: Vec<EngineerCraftIngredients>,

    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: i64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Level")]
    pub level: i64,

    #[serde(rename = "Quality")]
    pub quality: f64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<EngineerCraftModifiers>,

    #[serde(rename = "ApplyExperimentalEffect")]
    pub apply_experimental_effect: Option<String>,

    #[serde(rename = "ExperimentalEffect")]
    pub experimental_effect: Option<String>,

    #[serde(rename = "ExperimentalEffect_Localised")]
    pub experimental_effect_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerCraftModifiers {

    #[serde(rename = "Label")]
    pub label: String,

    #[serde(rename = "Value")]
    pub value: Option<f64>,

    #[serde(rename = "ValueStr")]
    pub value_str: Option<String>,

    #[serde(rename = "ValueStr_Localised")]
    pub value_str_localised: Option<String>,

    #[serde(rename = "OriginalValue")]
    pub original_value: Option<f64>,

    #[serde(rename = "LessIsGood")]
    pub less_is_good: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EngineerCraftIngredients {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EngineerLegacyConvert {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "IsPreview")]
    pub is_preview: bool,

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: i64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Level")]
    pub level: i64,

    #[serde(rename = "Quality")]
    pub quality: f64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<EngineerLegacyConvertModifiers>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerLegacyConvertModifiers {

    #[serde(rename = "Label")]
    pub label: String,

    #[serde(rename = "Value")]
    pub value: f64,

    #[serde(rename = "OriginalValue")]
    pub original_value: f64,

    #[serde(rename = "LessIsGood")]
    pub less_is_good: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EngineerProgress {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Engineers")]
    pub engineers: Vec<EngineerProgressEngineers>,

    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    #[serde(rename = "EngineerID")]
    pub engineer_id: Option<i64>,

    #[serde(rename = "Progress")]
    pub progress: Option<String>,

    #[serde(rename = "Rank")]
    pub rank: Option<i64>,

    #[serde(rename = "RankProgress")]
    pub rank_progress: Option<i64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerProgressEngineers {

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,

    #[serde(rename = "Progress")]
    pub progress: String,

    #[serde(rename = "RankProgress")]
    pub rank_progress: Option<i64>,

    #[serde(rename = "Rank")]
    pub rank: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct EscapeInterdiction {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Interdictor")]
    pub interdictor: String,

    #[serde(rename = "Interdictor_Localised")]
    pub interdictor_localised: Option<String>,

    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    #[serde(rename = "IsThargoid")]
    pub is_thargoid: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FactionKillBond {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Reward")]
    pub reward: i64,

    #[serde(rename = "AwardingFaction")]
    pub awarding_faction: String,

    #[serde(rename = "AwardingFaction_Localised")]
    pub awarding_faction_localised: Option<String>,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

    #[serde(rename = "VictimFaction_Localised")]
    pub victim_faction_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FCMaterials {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "CarrierName")]
    pub carrier_name: String,

    #[serde(rename = "CarrierID")]
    pub carrier_id: String,

    #[serde(rename = "Items")]
    pub items: Vec<FCMaterialsItems>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FCMaterialsItems {

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "Stock")]
    pub stock: i64,

    #[serde(rename = "Demand")]
    pub demand: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FetchRemoteModule {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: i64,

    #[serde(rename = "StoredItem")]
    pub stored_item: String,

    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

    #[serde(rename = "ServerId")]
    pub server_id: i64,

    #[serde(rename = "TransferCost")]
    pub transfer_cost: i64,

    #[serde(rename = "TransferTime")]
    pub transfer_time: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FighterDestroyed {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FighterRebuilt {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "ID")]
    pub id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Fileheader {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "part")]
    pub part: i64,

    #[serde(rename = "language")]
    pub language: String,

    #[serde(rename = "Odyssey")]
    pub odyssey: bool,

    #[serde(rename = "gameversion")]
    pub gameversion: String,

    #[serde(rename = "build")]
    pub build: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Friends {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "Name")]
    pub name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJump {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    #[serde(rename = "Population")]
    pub population: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "JumpDist")]
    pub jump_dist: f64,

    #[serde(rename = "FuelUsed")]
    pub fuel_used: f64,

    #[serde(rename = "FuelLevel")]
    pub fuel_level: f64,

    #[serde(rename = "Factions")]
    pub factions: Vec<FSDJumpFactions>,

    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<FSDJumpSystemFaction>,

    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<i64>,

    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<i64>,

    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Vec<FSDJumpPowerplayConflictProgress>,

    #[serde(rename = "Conflicts")]
    pub conflicts: Vec<FSDJumpConflicts>,

    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<FSDJumpThargoidWar>,

    #[serde(rename = "BoostUsed")]
    pub boost_used: Option<i64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpSystemFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpConflicts {

    #[serde(rename = "WarType")]
    pub war_type: String,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "Faction1")]
    pub faction1: FSDJumpConflictsFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: FSDJumpConflictsFaction2,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpConflictsFaction1 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "Stake_Localised")]
    pub stake_localised: Option<String>,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpConflictsFaction2 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "Stake_Localised")]
    pub stake_localised: Option<String>,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpPowerplayConflictProgress {

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "ConflictProgress")]
    pub conflict_progress: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpThargoidWar {

    #[serde(rename = "CurrentState")]
    pub current_state: String,

    #[serde(rename = "NextStateSuccess")]
    pub next_state_success: Option<String>,

    #[serde(rename = "NextStateFailure")]
    pub next_state_failure: Option<String>,

    #[serde(rename = "SuccessStateReached")]
    pub success_state_reached: bool,

    #[serde(rename = "WarProgress")]
    pub war_progress: Option<f64>,

    #[serde(rename = "RemainingPorts")]
    pub remaining_ports: Option<i64>,

    #[serde(rename = "EstimatedRemainingTime")]
    pub estimated_remaining_time: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpFactions {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "ActiveStates")]
    pub active_states: Vec<FSDJumpFactionsActiveStates>,

    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Vec<FSDJumpFactionsRecoveringStates>,

    #[serde(rename = "PendingStates")]
    pub pending_states: Vec<FSDJumpFactionsPendingStates>,

    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpFactionsRecoveringStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpFactionsActiveStates {

    #[serde(rename = "State")]
    pub state: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpFactionsPendingStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSDTarget {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "StarClass")]
    pub star_class: String,

    #[serde(rename = "RemainingJumpsInRoute")]
    pub remaining_jumps_in_route: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSSAllBodiesFound {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSSBodySignals {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Signals")]
    pub signals: Vec<FSSBodySignalsSignals>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FSSBodySignalsSignals {

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSSDiscoveryScan {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Progress")]
    pub progress: f64,

    #[serde(rename = "BodyCount")]
    pub body_count: i64,

    #[serde(rename = "NonBodyCount")]
    pub non_body_count: i64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FSSSignalDiscovered {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "SignalName")]
    pub signal_name: String,

    #[serde(rename = "SignalType")]
    pub signal_type: Option<String>,

    #[serde(rename = "SignalName_Localised")]
    pub signal_name_localised: Option<String>,

    #[serde(rename = "IsStation")]
    pub is_station: Option<bool>,

    #[serde(rename = "USSType")]
    pub uss_type: Option<String>,

    #[serde(rename = "USSType_Localised")]
    pub uss_type_localised: Option<String>,

    #[serde(rename = "SpawningState")]
    pub spawning_state: Option<String>,

    #[serde(rename = "SpawningState_Localised")]
    pub spawning_state_localised: Option<String>,

    #[serde(rename = "SpawningFaction")]
    pub spawning_faction: Option<String>,

    #[serde(rename = "SpawningFaction_Localised")]
    pub spawning_faction_localised: Option<String>,

    #[serde(rename = "SpawningPower")]
    pub spawning_power: Option<String>,

    #[serde(rename = "OpposingPower")]
    pub opposing_power: Option<String>,

    #[serde(rename = "ThreatLevel")]
    pub threat_level: Option<i64>,

    #[serde(rename = "TimeRemaining")]
    pub time_remaining: Option<f64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct FuelScoop {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Scooped")]
    pub scooped: f64,

    #[serde(rename = "Total")]
    pub total: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct HeatDamage {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct HeatWarning {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct HoloscreenHacked {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "PowerBefore")]
    pub power_before: String,

    #[serde(rename = "PowerAfter")]
    pub power_after: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct HullDamage {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Health")]
    pub health: f64,

    #[serde(rename = "PlayerPilot")]
    pub player_pilot: bool,

    #[serde(rename = "Fighter")]
    pub fighter: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Interdicted {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Submitted")]
    pub submitted: bool,

    #[serde(rename = "Interdictor")]
    pub interdictor: Option<String>,

    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    #[serde(rename = "IsThargoid")]
    pub is_thargoid: Option<bool>,

    #[serde(rename = "CombatRank")]
    pub combat_rank: Option<i64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Power")]
    pub power: Option<String>,

    #[serde(rename = "Interdictor_Localised")]
    pub interdictor_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Interdiction {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Success")]
    pub success: bool,

    #[serde(rename = "Submitted")]
    pub submitted: Option<bool>,

    #[serde(rename = "Interdicted")]
    pub interdicted: String,

    #[serde(rename = "Interdicted_Localised")]
    pub interdicted_localised: Option<String>,

    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    #[serde(rename = "CombatRank")]
    pub combat_rank: Option<i64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Power")]
    pub power: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct InvitedToSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct JetConeBoost {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BoostValue")]
    pub boost_value: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct JetConeDamage {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Module_Localised")]
    pub module_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct JoinACrew {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Captain")]
    pub captain: String,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct JoinedSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct KickCrewMember {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Crew")]
    pub crew: String,

    #[serde(rename = "OnCrime")]
    pub on_crime: bool,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct KickedFromSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LaunchDrone {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LaunchFighter {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LaunchSRV {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SRVType")]
    pub srv_type: Option<String>,

    #[serde(rename = "SRVType_Localised")]
    pub srv_type_localised: Option<String>,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LeaveBody {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LeftSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Liftoff {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: Option<i64>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "BodyID")]
    pub body_id: Option<i64>,

    #[serde(rename = "OnStation")]
    pub on_station: Option<bool>,

    #[serde(rename = "OnPlanet")]
    pub on_planet: Option<bool>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "NearestDestination")]
    pub nearest_destination: Option<String>,

    #[serde(rename = "NearestDestination_Localised")]
    pub nearest_destination_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadGame {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FID")]
    pub fid: String,

    #[serde(rename = "Commander")]
    pub commander: String,

    #[serde(rename = "Horizons")]
    pub horizons: bool,

    #[serde(rename = "Odyssey")]
    pub odyssey: Option<bool>,

    #[serde(rename = "Ship")]
    pub ship: Option<String>,

    #[serde(rename = "Ship_Localised")]
    pub ship_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: Option<i64>,

    #[serde(rename = "ShipName")]
    pub ship_name: Option<String>,

    #[serde(rename = "ShipIdent")]
    pub ship_ident: Option<String>,

    #[serde(rename = "FuelLevel")]
    pub fuel_level: Option<f64>,

    #[serde(rename = "FuelCapacity")]
    pub fuel_capacity: Option<f64>,

    #[serde(rename = "GameMode")]
    pub game_mode: Option<String>,

    #[serde(rename = "Credits")]
    pub credits: i64,

    #[serde(rename = "Loan")]
    pub loan: i64,

    #[serde(rename = "language")]
    pub language: Option<String>,

    #[serde(rename = "gameversion")]
    pub gameversion: Option<String>,

    #[serde(rename = "build")]
    pub build: Option<String>,

    #[serde(rename = "Group")]
    pub group: Option<String>,

    #[serde(rename = "StartLanded")]
    pub start_landed: Option<bool>,

    #[serde(rename = "StartDead")]
    pub start_dead: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Loadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "ShipName")]
    pub ship_name: String,

    #[serde(rename = "ShipIdent")]
    pub ship_ident: String,

    #[serde(rename = "HullValue")]
    pub hull_value: Option<i64>,

    #[serde(rename = "ModulesValue")]
    pub modules_value: Option<i64>,

    #[serde(rename = "HullHealth")]
    pub hull_health: f64,

    #[serde(rename = "UnladenMass")]
    pub unladen_mass: f64,

    #[serde(rename = "CargoCapacity")]
    pub cargo_capacity: i64,

    #[serde(rename = "MaxJumpRange")]
    pub max_jump_range: f64,

    #[serde(rename = "FuelCapacity")]
    pub fuel_capacity: LoadoutFuelCapacity,

    #[serde(rename = "Rebuy")]
    pub rebuy: i64,

    #[serde(rename = "Modules")]
    pub modules: Vec<LoadoutModules>,

    #[serde(rename = "Hot")]
    pub hot: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutFuelCapacity {

    #[serde(rename = "Main")]
    pub main: f64,

    #[serde(rename = "Reserve")]
    pub reserve: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModules {

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Item")]
    pub item: String,

    #[serde(rename = "On")]
    pub on: bool,

    #[serde(rename = "Priority")]
    pub priority: i64,

    #[serde(rename = "AmmoInClip")]
    pub ammo_in_clip: Option<i64>,

    #[serde(rename = "AmmoInHopper")]
    pub ammo_in_hopper: Option<i64>,

    #[serde(rename = "Health")]
    pub health: f64,

    #[serde(rename = "Value")]
    pub value: Option<i64>,

    #[serde(rename = "Engineering")]
    pub engineering: Option<LoadoutModulesEngineering>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModulesEngineering {

    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: i64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Level")]
    pub level: i64,

    #[serde(rename = "Quality")]
    pub quality: f64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<LoadoutModulesEngineeringModifiers>,

    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    #[serde(rename = "ExperimentalEffect")]
    pub experimental_effect: Option<String>,

    #[serde(rename = "ExperimentalEffect_Localised")]
    pub experimental_effect_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModulesEngineeringModifiers {

    #[serde(rename = "Label")]
    pub label: String,

    #[serde(rename = "Value")]
    pub value: Option<f64>,

    #[serde(rename = "OriginalValue")]
    pub original_value: Option<f64>,

    #[serde(rename = "LessIsGood")]
    pub less_is_good: Option<i64>,

    #[serde(rename = "ValueStr")]
    pub value_str: Option<String>,

    #[serde(rename = "ValueStr_Localised")]
    pub value_str_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutEquipModule {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutRemoveModule {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Location {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "DistFromStarLS")]
    pub dist_from_star_ls: Option<f64>,

    #[serde(rename = "Docked")]
    pub docked: bool,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    #[serde(rename = "Population")]
    pub population: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "Factions")]
    pub factions: Vec<LocationFactions>,

    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<LocationSystemFaction>,

    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<i64>,

    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<i64>,

    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Vec<LocationPowerplayConflictProgress>,

    #[serde(rename = "Conflicts")]
    pub conflicts: Vec<LocationConflicts>,

    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<LocationThargoidWar>,

    #[serde(rename = "OnFoot")]
    pub on_foot: Option<bool>,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "StationFaction")]
    pub station_faction: Option<LocationStationFaction>,

    #[serde(rename = "StationGovernment")]
    pub station_government: Option<String>,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Vec<LocationStationEconomies>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "InSRV")]
    pub in_srv: Option<bool>,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LocationStationFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationConflicts {

    #[serde(rename = "WarType")]
    pub war_type: String,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "Faction1")]
    pub faction1: LocationConflictsFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: LocationConflictsFaction2,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationConflictsFaction1 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "Stake_Localised")]
    pub stake_localised: Option<String>,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationConflictsFaction2 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "WonDays")]
    pub won_days: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationThargoidWar {

    #[serde(rename = "CurrentState")]
    pub current_state: String,

    #[serde(rename = "NextStateSuccess")]
    pub next_state_success: Option<String>,

    #[serde(rename = "NextStateFailure")]
    pub next_state_failure: Option<String>,

    #[serde(rename = "SuccessStateReached")]
    pub success_state_reached: bool,

    #[serde(rename = "WarProgress")]
    pub war_progress: Option<f64>,

    #[serde(rename = "RemainingPorts")]
    pub remaining_ports: Option<i64>,

    #[serde(rename = "EstimatedRemainingTime")]
    pub estimated_remaining_time: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationPowerplayConflictProgress {

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "ConflictProgress")]
    pub conflict_progress: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationFactions {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "ActiveStates")]
    pub active_states: Vec<LocationFactionsActiveStates>,

    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Vec<LocationFactionsRecoveringStates>,

    #[serde(rename = "PendingStates")]
    pub pending_states: Vec<LocationFactionsPendingStates>,

    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationFactionsPendingStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationFactionsActiveStates {

    #[serde(rename = "State")]
    pub state: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationFactionsRecoveringStates {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationStationEconomies {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct LocationSystemFaction {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Market {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "CarrierDockingAccess")]
    pub carrier_docking_access: Option<String>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "Items")]
    pub items: Vec<MarketItems>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MarketItems {

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "SellPrice")]
    pub sell_price: i64,

    #[serde(rename = "MeanPrice")]
    pub mean_price: i64,

    #[serde(rename = "StockBracket")]
    pub stock_bracket: i64,

    #[serde(rename = "DemandBracket")]
    pub demand_bracket: i64,

    #[serde(rename = "Stock")]
    pub stock: i64,

    #[serde(rename = "Demand")]
    pub demand: i64,

    #[serde(rename = "Consumer")]
    pub consumer: bool,

    #[serde(rename = "Producer")]
    pub producer: bool,

    #[serde(rename = "Rare")]
    pub rare: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MarketBuy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "TotalCost")]
    pub total_cost: i64,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MarketSell {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "SellPrice")]
    pub sell_price: i64,

    #[serde(rename = "TotalSale")]
    pub total_sale: i64,

    #[serde(rename = "AvgPricePaid")]
    pub avg_price_paid: i64,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "StolenGoods")]
    pub stolen_goods: Option<bool>,

    #[serde(rename = "IllegalGoods")]
    pub illegal_goods: Option<bool>,

    #[serde(rename = "BlackMarket")]
    pub black_market: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MassModuleStore {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "Items")]
    pub items: Vec<MassModuleStoreItems>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MassModuleStoreItems {

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Level")]
    pub level: Option<i64>,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialCollected {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialDiscarded {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialDiscovered {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "DiscoveryNumber")]
    pub discovery_number: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Materials {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Raw")]
    pub raw: Vec<MaterialsRaw>,

    #[serde(rename = "Manufactured")]
    pub manufactured: Vec<MaterialsManufactured>,

    #[serde(rename = "Encoded")]
    pub encoded: Vec<MaterialsEncoded>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MaterialsManufactured {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialsRaw {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialsEncoded {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialTrade {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "TraderType")]
    pub trader_type: String,

    #[serde(rename = "Paid")]
    pub paid: MaterialTradePaid,

    #[serde(rename = "Received")]
    pub received: MaterialTradeReceived,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MaterialTradeReceived {

    #[serde(rename = "Material")]
    pub material: String,

    #[serde(rename = "Material_Localised")]
    pub material_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Quantity")]
    pub quantity: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MaterialTradePaid {

    #[serde(rename = "Material")]
    pub material: String,

    #[serde(rename = "Material_Localised")]
    pub material_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Quantity")]
    pub quantity: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MiningRefined {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionAbandoned {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Fine")]
    pub fine: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionAccepted {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "LocalisedName")]
    pub localised_name: String,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: Option<i64>,

    #[serde(rename = "Expiry", with = "crate::event::format::optional_date")]
    pub expiry: Option<DateTime<Utc>>,

    #[serde(rename = "Wing")]
    pub wing: bool,

    #[serde(rename = "Influence")]
    pub influence: String,

    #[serde(rename = "Reputation")]
    pub reputation: String,

    #[serde(rename = "Reward")]
    pub reward: Option<i64>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "TargetType")]
    pub target_type: Option<String>,

    #[serde(rename = "TargetType_Localised")]
    pub target_type_localised: Option<String>,

    #[serde(rename = "TargetFaction")]
    pub target_faction: Option<String>,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: Option<String>,

    #[serde(rename = "DestinationStation")]
    pub destination_station: Option<String>,

    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: Option<String>,

    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: Option<String>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

    #[serde(rename = "Donation")]
    pub donation: Option<String>,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    #[serde(rename = "DestinationSettlement")]
    pub destination_settlement: Option<String>,

    #[serde(rename = "KillCount")]
    pub kill_count: Option<i64>,

    #[serde(rename = "PassengerCount")]
    pub passenger_count: Option<i64>,

    #[serde(rename = "PassengerVIPs")]
    pub passenger_vi_ps: Option<bool>,

    #[serde(rename = "PassengerWanted")]
    pub passenger_wanted: Option<bool>,

    #[serde(rename = "PassengerType")]
    pub passenger_type: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompleted {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: Option<i64>,

    #[serde(rename = "Reward")]
    pub reward: Option<i64>,

    #[serde(rename = "PermitsAwarded")]
    pub permits_awarded: Option<Vec<String>>,

    #[serde(rename = "CommodityReward")]
    pub commodity_reward: Vec<MissionCompletedCommodityReward>,

    #[serde(rename = "MaterialsReward")]
    pub materials_reward: Vec<MissionCompletedMaterialsReward>,

    #[serde(rename = "FactionEffects")]
    pub faction_effects: Vec<MissionCompletedFactionEffects>,

    #[serde(rename = "Donation")]
    pub donation: Option<String>,

    #[serde(rename = "Donated")]
    pub donated: Option<i64>,

    #[serde(rename = "TargetFaction")]
    pub target_faction: Option<String>,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: Option<String>,

    #[serde(rename = "DestinationStation")]
    pub destination_station: Option<String>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    #[serde(rename = "DestinationSettlement")]
    pub destination_settlement: Option<String>,

    #[serde(rename = "TargetType")]
    pub target_type: Option<String>,

    #[serde(rename = "TargetType_Localised")]
    pub target_type_localised: Option<String>,

    #[serde(rename = "KillCount")]
    pub kill_count: Option<i64>,

    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: Option<String>,

    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedMaterialsReward {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedCommodityReward {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffects {

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Effects")]
    pub effects: Vec<MissionCompletedFactionEffectsEffects>,

    #[serde(rename = "Influence")]
    pub influence: Vec<MissionCompletedFactionEffectsInfluence>,

    #[serde(rename = "ReputationTrend")]
    pub reputation_trend: String,

    #[serde(rename = "Reputation")]
    pub reputation: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffectsEffects {

    #[serde(rename = "Effect")]
    pub effect: String,

    #[serde(rename = "Effect_Localised")]
    pub effect_localised: Option<String>,

    #[serde(rename = "Trend")]
    pub trend: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffectsInfluence {

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Trend")]
    pub trend: String,

    #[serde(rename = "Influence")]
    pub influence: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionFailed {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Fine")]
    pub fine: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionRedirected {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "LocalisedName_Localised")]
    pub localised_name_localised: Option<String>,

    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: String,

    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: String,

    #[serde(rename = "OldDestinationStation")]
    pub old_destination_station: String,

    #[serde(rename = "OldDestinationSystem")]
    pub old_destination_system: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Missions {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Active")]
    pub active: Vec<MissionsActive>,

    #[serde(rename = "Failed")]
    pub failed: Vec<MissionsFailed>,

    #[serde(rename = "Complete")]
    pub complete: Vec<MissionsComplete>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionsComplete {

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "PassengerMission")]
    pub passenger_mission: bool,

    #[serde(rename = "Expires")]
    pub expires: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionsActive {

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "PassengerMission")]
    pub passenger_mission: bool,

    #[serde(rename = "Expires")]
    pub expires: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MissionsFailed {

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "PassengerMission")]
    pub passenger_mission: bool,

    #[serde(rename = "Expires")]
    pub expires: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleBuy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "BuyItem")]
    pub buy_item: String,

    #[serde(rename = "BuyItem_Localised")]
    pub buy_item_localised: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "StoredItem")]
    pub stored_item: Option<String>,

    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

    #[serde(rename = "SellItem")]
    pub sell_item: Option<String>,

    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    #[serde(rename = "SellPrice")]
    pub sell_price: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleBuyAndStore {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BuyItem")]
    pub buy_item: String,

    #[serde(rename = "BuyItem_Localised")]
    pub buy_item_localised: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleInfo {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Modules")]
    pub modules: Vec<ModuleInfoModules>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ModuleInfoModules {

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Item")]
    pub item: String,

    #[serde(rename = "Power")]
    pub power: f64,

    #[serde(rename = "Priority")]
    pub priority: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleRetrieve {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "RetrievedItem")]
    pub retrieved_item: String,

    #[serde(rename = "RetrievedItem_Localised")]
    pub retrieved_item_localised: Option<String>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Level")]
    pub level: Option<i64>,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "SwapOutItem")]
    pub swap_out_item: Option<String>,

    #[serde(rename = "SwapOutItem_Localised")]
    pub swap_out_item_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSell {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "SellItem")]
    pub sell_item: String,

    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    #[serde(rename = "SellPrice")]
    pub sell_price: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSellRemote {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: i64,

    #[serde(rename = "SellItem")]
    pub sell_item: String,

    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    #[serde(rename = "ServerId")]
    pub server_id: i64,

    #[serde(rename = "SellPrice")]
    pub sell_price: i64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleStore {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "StoredItem")]
    pub stored_item: String,

    #[serde(rename = "ReplacementItem")]
    pub replacement_item: Option<String>,

    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "Hot")]
    pub hot: Option<bool>,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Level")]
    pub level: Option<i64>,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "Cost")]
    pub cost: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSwap {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "FromSlot")]
    pub from_slot: String,

    #[serde(rename = "ToSlot")]
    pub to_slot: String,

    #[serde(rename = "FromItem")]
    pub from_item: String,

    #[serde(rename = "FromItem_Localised")]
    pub from_item_localised: Option<String>,

    #[serde(rename = "ToItem")]
    pub to_item: String,

    #[serde(rename = "ToItem_Localised")]
    pub to_item_localised: Option<String>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct MultiSellExplorationData {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Discovered")]
    pub discovered: Vec<MultiSellExplorationDataDiscovered>,

    #[serde(rename = "BaseValue")]
    pub base_value: i64,

    #[serde(rename = "Bonus")]
    pub bonus: i64,

    #[serde(rename = "TotalEarnings")]
    pub total_earnings: i64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MultiSellExplorationDataDiscovered {

    #[serde(rename = "SystemName")]
    pub system_name: String,

    #[serde(rename = "SystemName_Localised")]
    pub system_name_localised: Option<String>,

    #[serde(rename = "NumBodies")]
    pub num_bodies: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Music {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MusicTrack")]
    pub music_track: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct NavBeaconScan {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "NumBodies")]
    pub num_bodies: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct NavRoute {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Route")]
    pub route: Vec<NavRouteRoute>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteRoute {

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    #[serde(rename = "StarClass")]
    pub star_class: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteClear {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Route")]
    pub route: Option<Vec<NavRouteClearRoute>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteClearRoute {

}

#[derive(Clone, Debug, Deserialize)]
pub struct NewCommander {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "FID")]
    pub fid: String,

    #[serde(rename = "Package")]
    pub package: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct NpcCrewPaidWage {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NpcCrewName")]
    pub npc_crew_name: String,

    #[serde(rename = "NpcCrewId")]
    pub npc_crew_id: i64,

    #[serde(rename = "Amount")]
    pub amount: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct NpcCrewRank {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NpcCrewName")]
    pub npc_crew_name: String,

    #[serde(rename = "NpcCrewId")]
    pub npc_crew_id: i64,

    #[serde(rename = "RankCombat")]
    pub rank_combat: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Outfitting {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "Horizons")]
    pub horizons: Option<bool>,

    #[serde(rename = "Items")]
    pub items: Vec<OutfittingItems>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct OutfittingItems {

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Passengers {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Manifest")]
    pub manifest: Vec<PassengersManifest>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct PassengersManifest {

    #[serde(rename = "MissionID")]
    pub mission_id: i64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "VIP")]
    pub vip: bool,

    #[serde(rename = "Wanted")]
    pub wanted: bool,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PayBounties {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Amount")]
    pub amount: i64,

    #[serde(rename = "AllFines")]
    pub all_fines: Option<bool>,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "BrokerPercentage")]
    pub broker_percentage: Option<f64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Faction_Localised")]
    pub faction_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PayFines {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Amount")]
    pub amount: i64,

    #[serde(rename = "AllFines")]
    pub all_fines: Option<bool>,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "BrokerPercentage")]
    pub broker_percentage: Option<f64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Faction_Localised")]
    pub faction_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Powerplay {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Rank")]
    pub rank: i64,

    #[serde(rename = "Merits")]
    pub merits: i64,

    #[serde(rename = "Votes")]
    pub votes: Option<i64>,

    #[serde(rename = "TimePledged")]
    pub time_pledged: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayCollect {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayDefect {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FromPower")]
    pub from_power: String,

    #[serde(rename = "ToPower")]
    pub to_power: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayDeliver {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayFastTrack {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Cost")]
    pub cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayJoin {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayLeave {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayMerits {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "MeritsGained")]
    pub merits_gained: i64,

    #[serde(rename = "TotalMerits")]
    pub total_merits: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayRank {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Rank")]
    pub rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplaySalary {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Amount")]
    pub amount: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayVote {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Votes")]
    pub votes: i64,

    #[serde(rename = "VoteToConsolidate")]
    pub vote_to_consolidate: i64,

    #[serde(rename = "System")]
    pub system: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayVoucher {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Systems")]
    pub systems: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Progress {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Combat")]
    pub combat: i64,

    #[serde(rename = "Trade")]
    pub trade: i64,

    #[serde(rename = "Explore")]
    pub explore: i64,

    #[serde(rename = "Soldier")]
    pub soldier: Option<i64>,

    #[serde(rename = "Exobiologist")]
    pub exobiologist: Option<i64>,

    #[serde(rename = "Empire")]
    pub empire: i64,

    #[serde(rename = "Federation")]
    pub federation: i64,

    #[serde(rename = "CQC")]
    pub cqc: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Promotion {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Explore")]
    pub explore: Option<i64>,

    #[serde(rename = "Combat")]
    pub combat: Option<i64>,

    #[serde(rename = "Soldier")]
    pub soldier: Option<i64>,

    #[serde(rename = "Federation")]
    pub federation: Option<i64>,

    #[serde(rename = "Exobiologist")]
    pub exobiologist: Option<i64>,

    #[serde(rename = "Empire")]
    pub empire: Option<i64>,

    #[serde(rename = "Trade")]
    pub trade: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ProspectedAsteroid {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Materials")]
    pub materials: Vec<ProspectedAsteroidMaterials>,

    #[serde(rename = "Content")]
    pub content: String,

    #[serde(rename = "Content_Localised")]
    pub content_localised: Option<String>,

    #[serde(rename = "Remaining")]
    pub remaining: f64,

    #[serde(rename = "MotherlodeMaterial")]
    pub motherlode_material: Option<String>,

    #[serde(rename = "MotherlodeMaterial_Localised")]
    pub motherlode_material_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ProspectedAsteroidMaterials {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct PVPKill {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Victim")]
    pub victim: String,

    #[serde(rename = "CombatRank")]
    pub combat_rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct QuitACrew {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Captain")]
    pub captain: String,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Rank {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Combat")]
    pub combat: i64,

    #[serde(rename = "Trade")]
    pub trade: i64,

    #[serde(rename = "Explore")]
    pub explore: i64,

    #[serde(rename = "Soldier")]
    pub soldier: Option<i64>,

    #[serde(rename = "Exobiologist")]
    pub exobiologist: Option<i64>,

    #[serde(rename = "Empire")]
    pub empire: i64,

    #[serde(rename = "Federation")]
    pub federation: i64,

    #[serde(rename = "CQC")]
    pub cqc: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RebootRepair {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Modules")]
    pub modules: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ReceiveText {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "From")]
    pub from: String,

    #[serde(rename = "Message")]
    pub message: String,

    #[serde(rename = "Message_Localised")]
    pub message_localised: Option<String>,

    #[serde(rename = "Channel")]
    pub channel: String,

    #[serde(rename = "From_Localised")]
    pub from_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RedeemVoucher {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Amount")]
    pub amount: i64,

    #[serde(rename = "Factions")]
    pub factions: Vec<RedeemVoucherFactions>,

    #[serde(rename = "BrokerPercentage")]
    pub broker_percentage: Option<f64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct RedeemVoucherFactions {

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Amount")]
    pub amount: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RefuelAll {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Amount")]
    pub amount: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RefuelPartial {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Amount")]
    pub amount: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RenameSuitLoadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Repair {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Item")]
    pub item: Option<String>,

    #[serde(rename = "Items")]
    pub items: Option<Vec<String>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RepairAll {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RepairDrone {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "HullRepaired")]
    pub hull_repaired: Option<f64>,

    #[serde(rename = "CockpitRepaired")]
    pub cockpit_repaired: Option<f64>,

    #[serde(rename = "CorrosionRepaired")]
    pub corrosion_repaired: Option<f64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Reputation {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Empire")]
    pub empire: Option<f64>,

    #[serde(rename = "Federation")]
    pub federation: Option<f64>,

    #[serde(rename = "Alliance")]
    pub alliance: Option<f64>,

    #[serde(rename = "Independent")]
    pub independent: Option<f64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RequestPowerMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "TotalCount")]
    pub total_count: i64,

    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<RequestPowerMicroResourcesMicroResources>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct RequestPowerMicroResourcesMicroResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ReservoirReplenished {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FuelMain")]
    pub fuel_main: f64,

    #[serde(rename = "FuelReservoir")]
    pub fuel_reservoir: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct RestockVehicle {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "ID")]
    pub id: Option<i64>,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Resupply {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Resurrect {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Option")]
    pub option: String,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Bankrupt")]
    pub bankrupt: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SAAScanComplete {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "ProbesUsed")]
    pub probes_used: i64,

    #[serde(rename = "EfficiencyTarget")]
    pub efficiency_target: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SAASignalsFound {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "Signals")]
    pub signals: Vec<SAASignalsFoundSignals>,

    #[serde(rename = "Genuses")]
    pub genuses: Vec<SAASignalsFoundGenuses>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SAASignalsFoundGenuses {

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SAASignalsFoundSignals {

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Scan {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ScanType")]
    pub scan_type: String,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "Parents")]
    pub parents: Vec<ScanParents>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "DistanceFromArrivalLS")]
    pub distance_from_arrival_ls: f64,

    #[serde(rename = "TidalLock")]
    pub tidal_lock: Option<bool>,

    #[serde(rename = "TerraformState")]
    pub terraform_state: Option<String>,

    #[serde(rename = "PlanetClass")]
    pub planet_class: Option<String>,

    #[serde(rename = "Atmosphere")]
    pub atmosphere: Option<String>,

    #[serde(rename = "AtmosphereType")]
    pub atmosphere_type: Option<String>,

    #[serde(rename = "AtmosphereComposition")]
    pub atmosphere_composition: Vec<ScanAtmosphereComposition>,

    #[serde(rename = "Volcanism")]
    pub volcanism: Option<String>,

    #[serde(rename = "MassEM")]
    pub mass_em: Option<f64>,

    #[serde(rename = "Radius")]
    pub radius: Option<f64>,

    #[serde(rename = "SurfaceGravity")]
    pub surface_gravity: Option<f64>,

    #[serde(rename = "SurfaceTemperature")]
    pub surface_temperature: Option<f64>,

    #[serde(rename = "SurfacePressure")]
    pub surface_pressure: Option<f64>,

    #[serde(rename = "Landable")]
    pub landable: Option<bool>,

    #[serde(rename = "Composition")]
    pub composition: Option<ScanComposition>,

    #[serde(rename = "SemiMajorAxis")]
    pub semi_major_axis: Option<f64>,

    #[serde(rename = "Eccentricity")]
    pub eccentricity: Option<f64>,

    #[serde(rename = "OrbitalInclination")]
    pub orbital_inclination: Option<f64>,

    #[serde(rename = "Periapsis")]
    pub periapsis: Option<f64>,

    #[serde(rename = "OrbitalPeriod")]
    pub orbital_period: Option<f64>,

    #[serde(rename = "AscendingNode")]
    pub ascending_node: Option<f64>,

    #[serde(rename = "MeanAnomaly")]
    pub mean_anomaly: Option<f64>,

    #[serde(rename = "RotationPeriod")]
    pub rotation_period: Option<f64>,

    #[serde(rename = "AxialTilt")]
    pub axial_tilt: Option<f64>,

    #[serde(rename = "WasDiscovered")]
    pub was_discovered: bool,

    #[serde(rename = "WasMapped")]
    pub was_mapped: bool,

    #[serde(rename = "StarType")]
    pub star_type: Option<String>,

    #[serde(rename = "Subclass")]
    pub subclass: Option<i64>,

    #[serde(rename = "StellarMass")]
    pub stellar_mass: Option<f64>,

    #[serde(rename = "AbsoluteMagnitude")]
    pub absolute_magnitude: Option<f64>,

    #[serde(rename = "Age_MY")]
    pub age_my: Option<i64>,

    #[serde(rename = "Luminosity")]
    pub luminosity: Option<String>,

    #[serde(rename = "Rings")]
    pub rings: Vec<ScanRings>,

    #[serde(rename = "Materials")]
    pub materials: Vec<ScanMaterials>,

    #[serde(rename = "ReserveLevel")]
    pub reserve_level: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ScanAtmosphereComposition {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Percent")]
    pub percent: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanMaterials {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Percent")]
    pub percent: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanComposition {

    #[serde(rename = "Ice")]
    pub ice: f64,

    #[serde(rename = "Rock")]
    pub rock: f64,

    #[serde(rename = "Metal")]
    pub metal: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanParents {

    #[serde(rename = "Star")]
    pub star: Option<i64>,

    #[serde(rename = "Null")]
    pub null: Option<i64>,

    #[serde(rename = "Ring")]
    pub ring: Option<i64>,

    #[serde(rename = "Planet")]
    pub planet: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanRings {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "RingClass")]
    pub ring_class: String,

    #[serde(rename = "MassMT")]
    pub mass_mt: f64,

    #[serde(rename = "InnerRad")]
    pub inner_rad: f64,

    #[serde(rename = "OuterRad")]
    pub outer_rad: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanBaryCentre {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "SemiMajorAxis")]
    pub semi_major_axis: f64,

    #[serde(rename = "Eccentricity")]
    pub eccentricity: f64,

    #[serde(rename = "OrbitalInclination")]
    pub orbital_inclination: f64,

    #[serde(rename = "Periapsis")]
    pub periapsis: f64,

    #[serde(rename = "OrbitalPeriod")]
    pub orbital_period: f64,

    #[serde(rename = "AscendingNode")]
    pub ascending_node: f64,

    #[serde(rename = "MeanAnomaly")]
    pub mean_anomaly: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Scanned {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ScanType")]
    pub scan_type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScanOrganic {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ScanType")]
    pub scan_type: String,

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

    #[serde(rename = "Species")]
    pub species: String,

    #[serde(rename = "Species_Localised")]
    pub species_localised: Option<String>,

    #[serde(rename = "Variant")]
    pub variant: Option<String>,

    #[serde(rename = "Variant_Localised")]
    pub variant_localised: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ScientificResearch {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Screenshot {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Filename")]
    pub filename: String,

    #[serde(rename = "Width")]
    pub width: i64,

    #[serde(rename = "Height")]
    pub height: i64,

    #[serde(rename = "System")]
    pub system: Option<String>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Altitude")]
    pub altitude: Option<f64>,

    #[serde(rename = "Heading")]
    pub heading: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SearchAndRescue {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Reward")]
    pub reward: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SelfDestruct {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellDrones {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "SellPrice")]
    pub sell_price: i64,

    #[serde(rename = "TotalSale")]
    pub total_sale: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellExplorationData {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Systems")]
    pub systems: Vec<String>,

    #[serde(rename = "Discovered")]
    pub discovered: Vec<String>,

    #[serde(rename = "BaseValue")]
    pub base_value: i64,

    #[serde(rename = "Bonus")]
    pub bonus: i64,

    #[serde(rename = "TotalEarnings")]
    pub total_earnings: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "TotalCount")]
    pub total_count: i64,

    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<SellMicroResourcesMicroResources>,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SellMicroResourcesMicroResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellOrganicData {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "BioData")]
    pub bio_data: Vec<SellOrganicDataBioData>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SellOrganicDataBioData {

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

    #[serde(rename = "Species")]
    pub species: String,

    #[serde(rename = "Species_Localised")]
    pub species_localised: Option<String>,

    #[serde(rename = "Variant")]
    pub variant: Option<String>,

    #[serde(rename = "Variant_Localised")]
    pub variant_localised: Option<String>,

    #[serde(rename = "Value")]
    pub value: i64,

    #[serde(rename = "Bonus")]
    pub bonus: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellShipOnRebuy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "SellShipId")]
    pub sell_ship_id: i64,

    #[serde(rename = "ShipPrice")]
    pub ship_price: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellSuit {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SellWeapon {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

    #[serde(rename = "Price")]
    pub price: i64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SendText {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "To")]
    pub to: String,

    #[serde(rename = "Message")]
    pub message: String,

    #[serde(rename = "Sent")]
    pub sent: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SetUserShipName {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "UserShipName")]
    pub user_ship_name: String,

    #[serde(rename = "UserShipId")]
    pub user_ship_id: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SharedBookmarkToSquadron {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShieldState {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShieldsUp")]
    pub shields_up: bool,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipLocker {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Items")]
    pub items: Option<Vec<Item>>,

    #[serde(rename = "Components")]
    pub components: Option<Vec<Component>>,

    #[serde(rename = "Consumables")]
    pub consumables: Option<Vec<Consumable>>,

    #[serde(rename = "Data")]
    pub data: Option<Vec<Data>>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterials {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Items")]
    pub items: Vec<ShipLockerMaterialsItems>,

    #[serde(rename = "Components")]
    pub components: Vec<ShipLockerMaterialsComponents>,

    #[serde(rename = "Consumables")]
    pub consumables: Vec<ShipLockerMaterialsConsumables>,

    #[serde(rename = "Data")]
    pub data: Vec<ShipLockerMaterialsData>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterialsItems {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterialsData {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterialsConsumables {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterialsComponents {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: i64,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipRedeemed {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "NewShipID")]
    pub new_ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipTargeted {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "TargetLocked")]
    pub target_locked: bool,

    #[serde(rename = "Ship")]
    pub ship: Option<String>,

    #[serde(rename = "ScanStage")]
    pub scan_stage: Option<i64>,

    #[serde(rename = "PilotName")]
    pub pilot_name: Option<String>,

    #[serde(rename = "PilotName_Localised")]
    pub pilot_name_localised: Option<String>,

    #[serde(rename = "PilotRank")]
    pub pilot_rank: Option<String>,

    #[serde(rename = "ShieldHealth")]
    pub shield_health: Option<f64>,

    #[serde(rename = "HullHealth")]
    pub hull_health: Option<f64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "LegalStatus")]
    pub legal_status: Option<String>,

    #[serde(rename = "Ship_Localised")]
    pub ship_localised: Option<String>,

    #[serde(rename = "SquadronID")]
    pub squadron_id: Option<String>,

    #[serde(rename = "Power")]
    pub power: Option<String>,

    #[serde(rename = "Bounty")]
    pub bounty: Option<i64>,

    #[serde(rename = "Subsystem")]
    pub subsystem: Option<String>,

    #[serde(rename = "Subsystem_Localised")]
    pub subsystem_localised: Option<String>,

    #[serde(rename = "SubsystemHealth")]
    pub subsystem_health: Option<f64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Shipyard {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "Horizons")]
    pub horizons: Option<bool>,

    #[serde(rename = "AllowCobraMkIV")]
    pub allow_cobra_mk_iv: Option<bool>,

    #[serde(rename = "PriceList")]
    pub price_list: Vec<ShipyardPriceList>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardPriceList {

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipPrice")]
    pub ship_price: i64,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardBuy {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "ShipPrice")]
    pub ship_price: i64,

    #[serde(rename = "StoreOldShip")]
    pub store_old_ship: Option<String>,

    #[serde(rename = "StoreShipID")]
    pub store_ship_id: Option<i64>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "SellOldShip")]
    pub sell_old_ship: Option<String>,

    #[serde(rename = "SellShipID")]
    pub sell_ship_id: Option<i64>,

    #[serde(rename = "SellPrice")]
    pub sell_price: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardNew {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "NewShipID")]
    pub new_ship_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardRedeem {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "BundleID")]
    pub bundle_id: Option<i64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardSell {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "SellShipID")]
    pub sell_ship_id: i64,

    #[serde(rename = "ShipPrice")]
    pub ship_price: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "System")]
    pub system: Option<String>,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardSwap {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "StoreOldShip")]
    pub store_old_ship: String,

    #[serde(rename = "StoreShipID")]
    pub store_ship_id: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardTransfer {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: i64,

    #[serde(rename = "Distance")]
    pub distance: f64,

    #[serde(rename = "TransferPrice")]
    pub transfer_price: i64,

    #[serde(rename = "TransferTime")]
    pub transfer_time: i64,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Shutdown {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SquadronCreated {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SquadronDemotion {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

    #[serde(rename = "OldRank")]
    pub old_rank: i64,

    #[serde(rename = "NewRank")]
    pub new_rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SquadronPromotion {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

    #[serde(rename = "OldRank")]
    pub old_rank: i64,

    #[serde(rename = "NewRank")]
    pub new_rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SquadronStartup {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

    #[serde(rename = "CurrentRank")]
    pub current_rank: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SRVDestroyed {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "SRVType")]
    pub srv_type: Option<String>,

    #[serde(rename = "SRVType_Localised")]
    pub srv_type_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StartJump {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "JumpType")]
    pub jump_type: String,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: Option<i64>,

    #[serde(rename = "StarClass")]
    pub star_class: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Statistics {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Bank_Account")]
    pub bank_account: StatisticsBankAccount,

    #[serde(rename = "Combat")]
    pub combat: StatisticsCombat,

    #[serde(rename = "Crime")]
    pub crime: StatisticsCrime,

    #[serde(rename = "Smuggling")]
    pub smuggling: StatisticsSmuggling,

    #[serde(rename = "Trading")]
    pub trading: StatisticsTrading,

    #[serde(rename = "Mining")]
    pub mining: StatisticsMining,

    #[serde(rename = "Exploration")]
    pub exploration: StatisticsExploration,

    #[serde(rename = "Passengers")]
    pub passengers: StatisticsPassengers,

    #[serde(rename = "Search_And_Rescue")]
    pub search_and_rescue: StatisticsSearchAndRescue,

    #[serde(rename = "Crafting")]
    pub crafting: Option<StatisticsCrafting>,

    #[serde(rename = "Crew")]
    pub crew: Option<StatisticsCrew>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<StatisticsMulticrew>,

    #[serde(rename = "Material_Trader_Stats")]
    pub material_trader_stats: Option<StatisticsMaterialTraderStats>,

    #[serde(rename = "FLEETCARRIER")]
    pub fleetcarrier: Option<StatisticsFleetcarrier>,

    #[serde(rename = "Exobiology")]
    pub exobiology: Option<StatisticsExobiology>,

    #[serde(rename = "TG_ENCOUNTERS")]
    pub tg_encounters: Option<StatisticsTgEncounters>,

    #[serde(rename = "CQC")]
    pub cqc: Option<StatisticsCqc>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsFleetcarrier {

    #[serde(rename = "FLEETCARRIER_EXPORT_TOTAL")]
    pub fleetcarrier_export_total: i64,

    #[serde(rename = "FLEETCARRIER_IMPORT_TOTAL")]
    pub fleetcarrier_import_total: i64,

    #[serde(rename = "FLEETCARRIER_TRADEPROFIT_TOTAL")]
    pub fleetcarrier_tradeprofit_total: i64,

    #[serde(rename = "FLEETCARRIER_TRADESPEND_TOTAL")]
    pub fleetcarrier_tradespend_total: i64,

    #[serde(rename = "FLEETCARRIER_STOLENPROFIT_TOTAL")]
    pub fleetcarrier_stolenprofit_total: i64,

    #[serde(rename = "FLEETCARRIER_STOLENSPEND_TOTAL")]
    pub fleetcarrier_stolenspend_total: i64,

    #[serde(rename = "FLEETCARRIER_DISTANCE_TRAVELLED")]
    pub fleetcarrier_distance_travelled: serde_json::Value,

    #[serde(rename = "FLEETCARRIER_TOTAL_JUMPS")]
    pub fleetcarrier_total_jumps: i64,

    #[serde(rename = "FLEETCARRIER_SHIPYARD_SOLD")]
    pub fleetcarrier_shipyard_sold: i64,

    #[serde(rename = "FLEETCARRIER_SHIPYARD_PROFIT")]
    pub fleetcarrier_shipyard_profit: i64,

    #[serde(rename = "FLEETCARRIER_OUTFITTING_SOLD")]
    pub fleetcarrier_outfitting_sold: i64,

    #[serde(rename = "FLEETCARRIER_OUTFITTING_PROFIT")]
    pub fleetcarrier_outfitting_profit: i64,

    #[serde(rename = "FLEETCARRIER_REARM_TOTAL")]
    pub fleetcarrier_rearm_total: i64,

    #[serde(rename = "FLEETCARRIER_REFUEL_TOTAL")]
    pub fleetcarrier_refuel_total: i64,

    #[serde(rename = "FLEETCARRIER_REFUEL_PROFIT")]
    pub fleetcarrier_refuel_profit: i64,

    #[serde(rename = "FLEETCARRIER_REPAIRS_TOTAL")]
    pub fleetcarrier_repairs_total: i64,

    #[serde(rename = "FLEETCARRIER_VOUCHERS_REDEEMED")]
    pub fleetcarrier_vouchers_redeemed: i64,

    #[serde(rename = "FLEETCARRIER_VOUCHERS_PROFIT")]
    pub fleetcarrier_vouchers_profit: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMulticrew {

    #[serde(rename = "Multicrew_Time_Total")]
    pub multicrew_time_total: i64,

    #[serde(rename = "Multicrew_Gunner_Time_Total")]
    pub multicrew_gunner_time_total: i64,

    #[serde(rename = "Multicrew_Fighter_Time_Total")]
    pub multicrew_fighter_time_total: i64,

    #[serde(rename = "Multicrew_Credits_Total")]
    pub multicrew_credits_total: i64,

    #[serde(rename = "Multicrew_Fines_Total")]
    pub multicrew_fines_total: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsTrading {

    #[serde(rename = "Markets_Traded_With")]
    pub markets_traded_with: i64,

    #[serde(rename = "Market_Profits")]
    pub market_profits: i64,

    #[serde(rename = "Resources_Traded")]
    pub resources_traded: i64,

    #[serde(rename = "Average_Profit")]
    pub average_profit: f64,

    #[serde(rename = "Highest_Single_Transaction")]
    pub highest_single_transaction: i64,

    #[serde(rename = "Data_Sold")]
    pub data_sold: Option<i64>,

    #[serde(rename = "Goods_Sold")]
    pub goods_sold: Option<i64>,

    #[serde(rename = "Assets_Sold")]
    pub assets_sold: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsSmuggling {

    #[serde(rename = "Black_Markets_Traded_With")]
    pub black_markets_traded_with: i64,

    #[serde(rename = "Black_Markets_Profits")]
    pub black_markets_profits: i64,

    #[serde(rename = "Resources_Smuggled")]
    pub resources_smuggled: i64,

    #[serde(rename = "Average_Profit")]
    pub average_profit: f64,

    #[serde(rename = "Highest_Single_Transaction")]
    pub highest_single_transaction: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrafting {

    #[serde(rename = "Count_Of_Used_Engineers")]
    pub count_of_used_engineers: i64,

    #[serde(rename = "Recipes_Generated")]
    pub recipes_generated: i64,

    #[serde(rename = "Recipes_Generated_Rank_1")]
    pub recipes_generated_rank_1: i64,

    #[serde(rename = "Recipes_Generated_Rank_2")]
    pub recipes_generated_rank_2: i64,

    #[serde(rename = "Recipes_Generated_Rank_3")]
    pub recipes_generated_rank_3: i64,

    #[serde(rename = "Recipes_Generated_Rank_4")]
    pub recipes_generated_rank_4: i64,

    #[serde(rename = "Recipes_Generated_Rank_5")]
    pub recipes_generated_rank_5: i64,

    #[serde(rename = "Suit_Mods_Applied")]
    pub suit_mods_applied: Option<i64>,

    #[serde(rename = "Weapon_Mods_Applied")]
    pub weapon_mods_applied: Option<i64>,

    #[serde(rename = "Suits_Upgraded")]
    pub suits_upgraded: Option<i64>,

    #[serde(rename = "Weapons_Upgraded")]
    pub weapons_upgraded: Option<i64>,

    #[serde(rename = "Suits_Upgraded_Full")]
    pub suits_upgraded_full: Option<i64>,

    #[serde(rename = "Weapons_Upgraded_Full")]
    pub weapons_upgraded_full: Option<i64>,

    #[serde(rename = "Suit_Mods_Applied_Full")]
    pub suit_mods_applied_full: Option<i64>,

    #[serde(rename = "Weapon_Mods_Applied_Full")]
    pub weapon_mods_applied_full: Option<i64>,

    #[serde(rename = "Spent_On_Crafting")]
    pub spent_on_crafting: Option<i64>,

    #[serde(rename = "Recipes_Applied")]
    pub recipes_applied: Option<i64>,

    #[serde(rename = "Recipes_Applied_Rank_1")]
    pub recipes_applied_rank_1: Option<i64>,

    #[serde(rename = "Recipes_Applied_Rank_2")]
    pub recipes_applied_rank_2: Option<i64>,

    #[serde(rename = "Recipes_Applied_Rank_3")]
    pub recipes_applied_rank_3: Option<i64>,

    #[serde(rename = "Recipes_Applied_Rank_4")]
    pub recipes_applied_rank_4: Option<i64>,

    #[serde(rename = "Recipes_Applied_Rank_5")]
    pub recipes_applied_rank_5: Option<i64>,

    #[serde(rename = "Recipes_Applied_On_Previously_Modified_Modules")]
    pub recipes_applied_on_previously_modified_modules: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsBankAccount {

    #[serde(rename = "Current_Wealth")]
    pub current_wealth: i64,

    #[serde(rename = "Spent_On_Ships")]
    pub spent_on_ships: i64,

    #[serde(rename = "Spent_On_Outfitting")]
    pub spent_on_outfitting: i64,

    #[serde(rename = "Spent_On_Repairs")]
    pub spent_on_repairs: i64,

    #[serde(rename = "Spent_On_Fuel")]
    pub spent_on_fuel: i64,

    #[serde(rename = "Spent_On_Ammo_Consumables")]
    pub spent_on_ammo_consumables: i64,

    #[serde(rename = "Insurance_Claims")]
    pub insurance_claims: i64,

    #[serde(rename = "Spent_On_Insurance")]
    pub spent_on_insurance: i64,

    #[serde(rename = "Owned_Ship_Count")]
    pub owned_ship_count: Option<i64>,

    #[serde(rename = "Spent_On_Suits")]
    pub spent_on_suits: Option<i64>,

    #[serde(rename = "Spent_On_Weapons")]
    pub spent_on_weapons: Option<i64>,

    #[serde(rename = "Spent_On_Suit_Consumables")]
    pub spent_on_suit_consumables: Option<i64>,

    #[serde(rename = "Suits_Owned")]
    pub suits_owned: Option<i64>,

    #[serde(rename = "Weapons_Owned")]
    pub weapons_owned: Option<i64>,

    #[serde(rename = "Spent_On_Premium_Stock")]
    pub spent_on_premium_stock: Option<i64>,

    #[serde(rename = "Premium_Stock_Bought")]
    pub premium_stock_bought: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMining {

    #[serde(rename = "Mining_Profits")]
    pub mining_profits: i64,

    #[serde(rename = "Quantity_Mined")]
    pub quantity_mined: i64,

    #[serde(rename = "Materials_Collected")]
    pub materials_collected: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsPassengers {

    #[serde(rename = "Passengers_Missions_Accepted")]
    pub passengers_missions_accepted: Option<i64>,

    #[serde(rename = "Passengers_Missions_Disgruntled")]
    pub passengers_missions_disgruntled: Option<i64>,

    #[serde(rename = "Passengers_Missions_Bulk")]
    pub passengers_missions_bulk: i64,

    #[serde(rename = "Passengers_Missions_VIP")]
    pub passengers_missions_vip: i64,

    #[serde(rename = "Passengers_Missions_Delivered")]
    pub passengers_missions_delivered: i64,

    #[serde(rename = "Passengers_Missions_Ejected")]
    pub passengers_missions_ejected: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsExobiology {

    #[serde(rename = "Organic_Genus_Encountered")]
    pub organic_genus_encountered: i64,

    #[serde(rename = "Organic_Species_Encountered")]
    pub organic_species_encountered: i64,

    #[serde(rename = "Organic_Variant_Encountered")]
    pub organic_variant_encountered: i64,

    #[serde(rename = "Organic_Data_Profits")]
    pub organic_data_profits: i64,

    #[serde(rename = "Organic_Data")]
    pub organic_data: i64,

    #[serde(rename = "First_Logged_Profits")]
    pub first_logged_profits: i64,

    #[serde(rename = "First_Logged")]
    pub first_logged: i64,

    #[serde(rename = "Organic_Systems")]
    pub organic_systems: i64,

    #[serde(rename = "Organic_Planets")]
    pub organic_planets: i64,

    #[serde(rename = "Organic_Genus")]
    pub organic_genus: i64,

    #[serde(rename = "Organic_Species")]
    pub organic_species: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCombat {

    #[serde(rename = "Bounties_Claimed")]
    pub bounties_claimed: i64,

    #[serde(rename = "Bounty_Hunting_Profit")]
    pub bounty_hunting_profit: f64,

    #[serde(rename = "Combat_Bonds")]
    pub combat_bonds: i64,

    #[serde(rename = "Combat_Bond_Profits")]
    pub combat_bond_profits: i64,

    #[serde(rename = "Assassinations")]
    pub assassinations: i64,

    #[serde(rename = "Assassination_Profits")]
    pub assassination_profits: i64,

    #[serde(rename = "Highest_Single_Reward")]
    pub highest_single_reward: i64,

    #[serde(rename = "Skimmers_Killed")]
    pub skimmers_killed: Option<i64>,

    #[serde(rename = "OnFoot_Combat_Bonds")]
    pub on_foot_combat_bonds: Option<i64>,

    #[serde(rename = "OnFoot_Combat_Bonds_Profits")]
    pub on_foot_combat_bonds_profits: Option<i64>,

    #[serde(rename = "OnFoot_Vehicles_Destroyed")]
    pub on_foot_vehicles_destroyed: Option<i64>,

    #[serde(rename = "OnFoot_Ships_Destroyed")]
    pub on_foot_ships_destroyed: Option<i64>,

    #[serde(rename = "Dropships_Taken")]
    pub dropships_taken: Option<i64>,

    #[serde(rename = "Dropships_Booked")]
    pub dropships_booked: Option<i64>,

    #[serde(rename = "Dropships_Cancelled")]
    pub dropships_cancelled: Option<i64>,

    #[serde(rename = "ConflictZone_High")]
    pub conflict_zone_high: Option<i64>,

    #[serde(rename = "ConflictZone_Medium")]
    pub conflict_zone_medium: Option<i64>,

    #[serde(rename = "ConflictZone_Low")]
    pub conflict_zone_low: Option<i64>,

    #[serde(rename = "ConflictZone_Total")]
    pub conflict_zone_total: Option<i64>,

    #[serde(rename = "ConflictZone_High_Wins")]
    pub conflict_zone_high_wins: Option<i64>,

    #[serde(rename = "ConflictZone_Medium_Wins")]
    pub conflict_zone_medium_wins: Option<i64>,

    #[serde(rename = "ConflictZone_Low_Wins")]
    pub conflict_zone_low_wins: Option<i64>,

    #[serde(rename = "ConflictZone_Total_Wins")]
    pub conflict_zone_total_wins: Option<i64>,

    #[serde(rename = "Settlement_Defended")]
    pub settlement_defended: Option<i64>,

    #[serde(rename = "Settlement_Conquered")]
    pub settlement_conquered: Option<i64>,

    #[serde(rename = "OnFoot_Skimmers_Killed")]
    pub on_foot_skimmers_killed: Option<i64>,

    #[serde(rename = "OnFoot_Scavs_Killed")]
    pub on_foot_scavs_killed: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCqc {

    #[serde(rename = "CQC_Credits_Earned")]
    pub cqc_credits_earned: Option<i64>,

    #[serde(rename = "CQC_Time_Played")]
    pub cqc_time_played: i64,

    #[serde(rename = "CQC_KD")]
    pub cqc_kd: f64,

    #[serde(rename = "CQC_Kills")]
    pub cqc_kills: i64,

    #[serde(rename = "CQC_WL")]
    pub cqc_wl: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsSearchAndRescue {

    #[serde(rename = "SearchRescue_Traded")]
    pub search_rescue_traded: i64,

    #[serde(rename = "SearchRescue_Profit")]
    pub search_rescue_profit: i64,

    #[serde(rename = "SearchRescue_Count")]
    pub search_rescue_count: i64,

    #[serde(rename = "Salvage_Legal_POI")]
    pub salvage_legal_poi: Option<i64>,

    #[serde(rename = "Salvage_Legal_Settlements")]
    pub salvage_legal_settlements: Option<i64>,

    #[serde(rename = "Salvage_Illegal_POI")]
    pub salvage_illegal_poi: Option<i64>,

    #[serde(rename = "Salvage_Illegal_Settlements")]
    pub salvage_illegal_settlements: Option<i64>,

    #[serde(rename = "Maglocks_Opened")]
    pub maglocks_opened: Option<i64>,

    #[serde(rename = "Panels_Opened")]
    pub panels_opened: Option<i64>,

    #[serde(rename = "Settlements_State_FireOut")]
    pub settlements_state_fire_out: Option<i64>,

    #[serde(rename = "Settlements_State_Reboot")]
    pub settlements_state_reboot: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsTgEncounters {

    #[serde(rename = "TG_ENCOUNTER_IMPRINT")]
    pub tg_encounter_imprint: Option<i64>,

    #[serde(rename = "TG_ENCOUNTER_WAKES")]
    pub tg_encounter_wakes: Option<i64>,

    #[serde(rename = "TG_ENCOUNTER_KILLED")]
    pub tg_encounter_killed: Option<i64>,

    #[serde(rename = "TG_ENCOUNTER_TOTAL")]
    pub tg_encounter_total: i64,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_SYSTEM")]
    pub tg_encounter_total_last_system: String,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_TIMESTAMP")]
    pub tg_encounter_total_last_timestamp: String,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_SHIP")]
    pub tg_encounter_total_last_ship: String,

    #[serde(rename = "TG_SCOUT_COUNT")]
    pub tg_scout_count: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrew {

    #[serde(rename = "NpcCrew_TotalWages")]
    pub npc_crew_total_wages: Option<i64>,

    #[serde(rename = "NpcCrew_Hired")]
    pub npc_crew_hired: Option<i64>,

    #[serde(rename = "NpcCrew_Fired")]
    pub npc_crew_fired: Option<i64>,

    #[serde(rename = "NpcCrew_Died")]
    pub npc_crew_died: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMaterialTraderStats {

    #[serde(rename = "Trades_Completed")]
    pub trades_completed: i64,

    #[serde(rename = "Materials_Traded")]
    pub materials_traded: i64,

    #[serde(rename = "Encoded_Materials_Traded")]
    pub encoded_materials_traded: Option<i64>,

    #[serde(rename = "Raw_Materials_Traded")]
    pub raw_materials_traded: Option<i64>,

    #[serde(rename = "Grade_1_Materials_Traded")]
    pub grade_1_materials_traded: Option<i64>,

    #[serde(rename = "Grade_2_Materials_Traded")]
    pub grade_2_materials_traded: Option<i64>,

    #[serde(rename = "Grade_3_Materials_Traded")]
    pub grade_3_materials_traded: Option<i64>,

    #[serde(rename = "Grade_4_Materials_Traded")]
    pub grade_4_materials_traded: Option<i64>,

    #[serde(rename = "Grade_5_Materials_Traded")]
    pub grade_5_materials_traded: Option<i64>,

    #[serde(rename = "Assets_Traded_In")]
    pub assets_traded_in: Option<i64>,

    #[serde(rename = "Assets_Traded_Out")]
    pub assets_traded_out: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsExploration {

    #[serde(rename = "Systems_Visited")]
    pub systems_visited: i64,

    #[serde(rename = "Exploration_Profits")]
    pub exploration_profits: i64,

    #[serde(rename = "Planets_Scanned_To_Level_2")]
    pub planets_scanned_to_level_2: i64,

    #[serde(rename = "Planets_Scanned_To_Level_3")]
    pub planets_scanned_to_level_3: i64,

    #[serde(rename = "Efficient_Scans")]
    pub efficient_scans: Option<i64>,

    #[serde(rename = "Highest_Payout")]
    pub highest_payout: i64,

    #[serde(rename = "Total_Hyperspace_Distance")]
    pub total_hyperspace_distance: i64,

    #[serde(rename = "Total_Hyperspace_Jumps")]
    pub total_hyperspace_jumps: i64,

    #[serde(rename = "Greatest_Distance_From_Start")]
    pub greatest_distance_from_start: f64,

    #[serde(rename = "Time_Played")]
    pub time_played: i64,

    #[serde(rename = "OnFoot_Distance_Travelled")]
    pub on_foot_distance_travelled: Option<i64>,

    #[serde(rename = "Shuttle_Journeys")]
    pub shuttle_journeys: Option<i64>,

    #[serde(rename = "Shuttle_Distance_Travelled")]
    pub shuttle_distance_travelled: Option<f64>,

    #[serde(rename = "Spent_On_Shuttles")]
    pub spent_on_shuttles: Option<i64>,

    #[serde(rename = "First_Footfalls")]
    pub first_footfalls: Option<i64>,

    #[serde(rename = "Planet_Footfalls")]
    pub planet_footfalls: Option<i64>,

    #[serde(rename = "Settlements_Visited")]
    pub settlements_visited: Option<i64>,

    #[serde(rename = "Fuel_Scooped")]
    pub fuel_scooped: Option<i64>,

    #[serde(rename = "Fuel_Purchased")]
    pub fuel_purchased: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrime {

    #[serde(rename = "Notoriety")]
    pub notoriety: Option<i64>,

    #[serde(rename = "Fines")]
    pub fines: i64,

    #[serde(rename = "Total_Fines")]
    pub total_fines: i64,

    #[serde(rename = "Bounties_Received")]
    pub bounties_received: i64,

    #[serde(rename = "Total_Bounties")]
    pub total_bounties: i64,

    #[serde(rename = "Highest_Bounty")]
    pub highest_bounty: i64,

    #[serde(rename = "Malware_Uploaded")]
    pub malware_uploaded: Option<i64>,

    #[serde(rename = "Settlements_State_Shutdown")]
    pub settlements_state_shutdown: Option<i64>,

    #[serde(rename = "Production_Sabotage")]
    pub production_sabotage: Option<i64>,

    #[serde(rename = "Production_Theft")]
    pub production_theft: Option<i64>,

    #[serde(rename = "Total_Murders")]
    pub total_murders: Option<i64>,

    #[serde(rename = "Citizens_Murdered")]
    pub citizens_murdered: Option<i64>,

    #[serde(rename = "Omnipol_Murdered")]
    pub omnipol_murdered: Option<i64>,

    #[serde(rename = "Guards_Murdered")]
    pub guards_murdered: Option<i64>,

    #[serde(rename = "Data_Stolen")]
    pub data_stolen: Option<i64>,

    #[serde(rename = "Goods_Stolen")]
    pub goods_stolen: Option<i64>,

    #[serde(rename = "Sample_Stolen")]
    pub sample_stolen: Option<i64>,

    #[serde(rename = "Total_Stolen")]
    pub total_stolen: Option<i64>,

    #[serde(rename = "Turrets_Destroyed")]
    pub turrets_destroyed: Option<i64>,

    #[serde(rename = "Turrets_Overloaded")]
    pub turrets_overloaded: Option<i64>,

    #[serde(rename = "Turrets_Total")]
    pub turrets_total: Option<i64>,

    #[serde(rename = "Value_Stolen_StateChange")]
    pub value_stolen_state_change: Option<i64>,

    #[serde(rename = "Profiles_Cloned")]
    pub profiles_cloned: Option<i64>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Status {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Flags")]
    pub flags: i64,

    #[serde(rename = "Pips")]
    pub pips: Option<Vec<i64>>,

    #[serde(rename = "FireGroup")]
    pub fire_group: Option<i64>,

    #[serde(rename = "Fuel")]
    pub fuel: Option<StatusFuel>,

    #[serde(rename = "GuiFocus")]
    pub gui_focus: Option<i64>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Heading")]
    pub heading: Option<i64>,

    #[serde(rename = "Altitude")]
    pub altitude: Option<i64>,

    #[serde(rename = "Flags2")]
    pub flags2: Option<i64>,

    #[serde(rename = "Cargo")]
    pub cargo: Option<f64>,

    #[serde(rename = "LegalState")]
    pub legal_state: Option<String>,

    #[serde(rename = "Balance")]
    pub balance: Option<i64>,

    #[serde(rename = "Oxygen")]
    pub oxygen: Option<f64>,

    #[serde(rename = "Health")]
    pub health: Option<f64>,

    #[serde(rename = "Temperature")]
    pub temperature: Option<f64>,

    #[serde(rename = "SelectedWeapon")]
    pub selected_weapon: Option<String>,

    #[serde(rename = "BodyName")]
    pub body_name: Option<String>,

    #[serde(rename = "Destination")]
    pub destination: Option<StatusDestination>,

    #[serde(rename = "PlanetRadius")]
    pub planet_radius: Option<f64>,

    #[serde(rename = "SelectedWeapon_Localised")]
    pub selected_weapon_localised: Option<String>,

    #[serde(rename = "Gravity")]
    pub gravity: Option<f64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatusDestination {

    #[serde(rename = "System")]
    pub system: i64,

    #[serde(rename = "Body")]
    pub body: i64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StatusFuel {

    #[serde(rename = "FuelMain")]
    pub fuel_main: f64,

    #[serde(rename = "FuelReservoir")]
    pub fuel_reservoir: f64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StoredModules {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "Items")]
    pub items: Vec<StoredModulesItems>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StoredModulesItems {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: i64,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "TransferCost")]
    pub transfer_cost: Option<i64>,

    #[serde(rename = "TransferTime")]
    pub transfer_time: Option<i64>,

    #[serde(rename = "BuyPrice")]
    pub buy_price: i64,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Level")]
    pub level: Option<i64>,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "InTransit")]
    pub in_transit: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StoredShips {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "ShipsHere")]
    pub ships_here: Vec<StoredShipsShipsHere>,

    #[serde(rename = "ShipsRemote")]
    pub ships_remote: Vec<StoredShipsShipsRemote>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StoredShipsShipsHere {

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "Value")]
    pub value: i64,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "Name")]
    pub name: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct StoredShipsShipsRemote {

    #[serde(rename = "ShipID")]
    pub ship_id: i64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "Name")]
    pub name: Option<String>,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: Option<i64>,

    #[serde(rename = "TransferPrice")]
    pub transfer_price: Option<i64>,

    #[serde(rename = "TransferTime")]
    pub transfer_time: Option<i64>,

    #[serde(rename = "Value")]
    pub value: i64,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "InTransit")]
    pub in_transit: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SuitLoadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<SuitLoadoutModules>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SuitLoadoutModules {

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseDestinationDrop {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<i64>,

    #[serde(rename = "Threat")]
    pub threat: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseEntry {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseExit {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: i64,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: i64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SwitchSuitLoadout {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: i64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<SwitchSuitLoadoutModules>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SwitchSuitLoadoutModules {

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Synthesis {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Materials")]
    pub materials: Vec<SynthesisMaterials>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SynthesisMaterials {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct SystemsShutdown {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBroker {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BrokerType")]
    pub broker_type: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "ItemsUnlocked")]
    pub items_unlocked: Vec<TechnologyBrokerItemsUnlocked>,

    #[serde(rename = "Commodities")]
    pub commodities: Vec<TechnologyBrokerCommodities>,

    #[serde(rename = "Materials")]
    pub materials: Vec<TechnologyBrokerMaterials>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBrokerCommodities {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBrokerItemsUnlocked {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBrokerMaterials {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Category")]
    pub category: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Touchdown {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: Option<i64>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "BodyID")]
    pub body_id: Option<i64>,

    #[serde(rename = "OnStation")]
    pub on_station: Option<bool>,

    #[serde(rename = "OnPlanet")]
    pub on_planet: Option<bool>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "NearestDestination")]
    pub nearest_destination: Option<String>,

    #[serde(rename = "NearestDestination_Localised")]
    pub nearest_destination_localised: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct TradeMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Offered")]
    pub offered: Vec<TradeMicroResourcesOffered>,

    #[serde(rename = "TotalCount")]
    pub total_count: i64,

    #[serde(rename = "Received")]
    pub received: String,

    #[serde(rename = "Received_Localised")]
    pub received_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct TradeMicroResourcesOffered {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct TransferMicroResources {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Transfers")]
    pub transfers: Vec<TransferMicroResourcesTransfers>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct TransferMicroResourcesTransfers {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "LockerOldCount")]
    pub locker_old_count: i64,

    #[serde(rename = "LockerNewCount")]
    pub locker_new_count: i64,

    #[serde(rename = "Direction")]
    pub direction: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct UnderAttack {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct Undocked {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "MarketID")]
    pub market_id: i64,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeSuit {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "SuitID")]
    pub suit_id: i64,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Resources")]
    pub resources: Vec<UpgradeSuitResources>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeSuitResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeWeapon {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Class")]
    pub class: i64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: i64,

    #[serde(rename = "Cost")]
    pub cost: i64,

    #[serde(rename = "Resources")]
    pub resources: Vec<UpgradeWeaponResources>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeWeaponResources {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct UseConsumable {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Type")]
    pub r#type: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct USSDrop {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "USSType")]
    pub uss_type: String,

    #[serde(rename = "USSType_Localised")]
    pub uss_type_localised: Option<String>,

    #[serde(rename = "USSThreat")]
    pub uss_threat: i64,

}

#[derive(Clone, Debug, Deserialize)]
pub struct VehicleSwitch {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "To")]
    pub to: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct WingAdd {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct WingInvite {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

}

#[derive(Clone, Debug, Deserialize)]
pub struct WingJoin {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Others")]
    pub others: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
pub struct WingLeave {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}

#[derive(Clone, Debug, Deserialize)]
#[serde(tag = "event")]
pub enum JournalEvent {
    #[serde(rename = "Item")]
    Item(Item),

    #[serde(rename = "Component")]
    Component(Component),

    #[serde(rename = "Consumable")]
    Consumable(Consumable),

    #[serde(rename = "Data")]
    Data(Data),

    #[serde(rename = "AfmuRepairs")]
    AfmuRepairs(AfmuRepairs),

    #[serde(rename = "AppliedToSquadron")]
    AppliedToSquadron(AppliedToSquadron),

    #[serde(rename = "ApproachBody")]
    ApproachBody(ApproachBody),

    #[serde(rename = "ApproachSettlement")]
    ApproachSettlement(ApproachSettlement),

    #[serde(rename = "AsteroidCracked")]
    AsteroidCracked(AsteroidCracked),

    #[serde(rename = "Backpack")]
    Backpack(Backpack),

    #[serde(rename = "BackpackChange")]
    BackpackChange(BackpackChange),

    #[serde(rename = "BookDropship")]
    BookDropship(BookDropship),

    #[serde(rename = "BookTaxi")]
    BookTaxi(BookTaxi),

    #[serde(rename = "Bounty")]
    Bounty(Bounty),

    #[serde(rename = "BuyAmmo")]
    BuyAmmo(BuyAmmo),

    #[serde(rename = "BuyDrones")]
    BuyDrones(BuyDrones),

    #[serde(rename = "BuyExplorationData")]
    BuyExplorationData(BuyExplorationData),

    #[serde(rename = "BuyMicroResources")]
    BuyMicroResources(BuyMicroResources),

    #[serde(rename = "BuySuit")]
    BuySuit(BuySuit),

    #[serde(rename = "BuyTradeData")]
    BuyTradeData(BuyTradeData),

    #[serde(rename = "BuyWeapon")]
    BuyWeapon(BuyWeapon),

    #[serde(rename = "CancelDropship")]
    CancelDropship(CancelDropship),

    #[serde(rename = "CancelTaxi")]
    CancelTaxi(CancelTaxi),

    #[serde(rename = "CapShipBond")]
    CapShipBond(CapShipBond),

    #[serde(rename = "Cargo")]
    Cargo(Cargo),

    #[serde(rename = "CargoDepot")]
    CargoDepot(CargoDepot),

    #[serde(rename = "CargoTransfer")]
    CargoTransfer(CargoTransfer),

    #[serde(rename = "CarrierBankTransfer")]
    CarrierBankTransfer(CarrierBankTransfer),

    #[serde(rename = "CarrierBuy")]
    CarrierBuy(CarrierBuy),

    #[serde(rename = "CarrierCancelDecommission")]
    CarrierCancelDecommission(CarrierCancelDecommission),

    #[serde(rename = "CarrierCrewServices")]
    CarrierCrewServices(CarrierCrewServices),

    #[serde(rename = "CarrierDecommission")]
    CarrierDecommission(CarrierDecommission),

    #[serde(rename = "CarrierDepositFuel")]
    CarrierDepositFuel(CarrierDepositFuel),

    #[serde(rename = "CarrierDockingPermission")]
    CarrierDockingPermission(CarrierDockingPermission),

    #[serde(rename = "CarrierFinance")]
    CarrierFinance(CarrierFinance),

    #[serde(rename = "CarrierJump")]
    CarrierJump(CarrierJump),

    #[serde(rename = "CarrierJumpCancelled")]
    CarrierJumpCancelled(CarrierJumpCancelled),

    #[serde(rename = "CarrierJumpRequest")]
    CarrierJumpRequest(CarrierJumpRequest),

    #[serde(rename = "CarrierLocation")]
    CarrierLocation(CarrierLocation),

    #[serde(rename = "CarrierModulePack")]
    CarrierModulePack(CarrierModulePack),

    #[serde(rename = "CarrierNameChange")]
    CarrierNameChange(CarrierNameChange),

    #[serde(rename = "CarrierShipPack")]
    CarrierShipPack(CarrierShipPack),

    #[serde(rename = "CarrierStats")]
    CarrierStats(CarrierStats),

    #[serde(rename = "CarrierTradeOrder")]
    CarrierTradeOrder(CarrierTradeOrder),

    #[serde(rename = "ChangeCrewRole")]
    ChangeCrewRole(ChangeCrewRole),

    #[serde(rename = "ClearImpound")]
    ClearImpound(ClearImpound),

    #[serde(rename = "ClearSavedGame")]
    ClearSavedGame(ClearSavedGame),

    #[serde(rename = "CockpitBreached")]
    CockpitBreached(CockpitBreached),

    #[serde(rename = "CodexEntry")]
    CodexEntry(CodexEntry),

    #[serde(rename = "CollectCargo")]
    CollectCargo(CollectCargo),

    #[serde(rename = "CollectItems")]
    CollectItems(CollectItems),

    #[serde(rename = "ColonisationBeaconDeployed")]
    ColonisationBeaconDeployed(ColonisationBeaconDeployed),

    #[serde(rename = "ColonisationConstructionDepot")]
    ColonisationConstructionDepot(ColonisationConstructionDepot),

    #[serde(rename = "ColonisationContribution")]
    ColonisationContribution(ColonisationContribution),

    #[serde(rename = "ColonisationSystemClaim")]
    ColonisationSystemClaim(ColonisationSystemClaim),

    #[serde(rename = "ColonisationSystemClaimRelease")]
    ColonisationSystemClaimRelease(ColonisationSystemClaimRelease),

    #[serde(rename = "Commander")]
    Commander(Commander),

    #[serde(rename = "CommitCrime")]
    CommitCrime(CommitCrime),

    #[serde(rename = "CommunityGoal")]
    CommunityGoal(CommunityGoal),

    #[serde(rename = "CommunityGoalDiscard")]
    CommunityGoalDiscard(CommunityGoalDiscard),

    #[serde(rename = "CommunityGoalJoin")]
    CommunityGoalJoin(CommunityGoalJoin),

    #[serde(rename = "CommunityGoalReward")]
    CommunityGoalReward(CommunityGoalReward),

    #[serde(rename = "Continued")]
    Continued(Continued),

    #[serde(rename = "CreateSuitLoadout")]
    CreateSuitLoadout(CreateSuitLoadout),

    #[serde(rename = "CrewAssign")]
    CrewAssign(CrewAssign),

    #[serde(rename = "CrewFire")]
    CrewFire(CrewFire),

    #[serde(rename = "CrewHire")]
    CrewHire(CrewHire),

    #[serde(rename = "CrewLaunchFighter")]
    CrewLaunchFighter(CrewLaunchFighter),

    #[serde(rename = "CrewMemberJoins")]
    CrewMemberJoins(CrewMemberJoins),

    #[serde(rename = "CrewMemberQuits")]
    CrewMemberQuits(CrewMemberQuits),

    #[serde(rename = "CrewMemberRoleChange")]
    CrewMemberRoleChange(CrewMemberRoleChange),

    #[serde(rename = "CrimeVictim")]
    CrimeVictim(CrimeVictim),

    #[serde(rename = "DatalinkScan")]
    DatalinkScan(DatalinkScan),

    #[serde(rename = "DatalinkVoucher")]
    DatalinkVoucher(DatalinkVoucher),

    #[serde(rename = "DataScanned")]
    DataScanned(DataScanned),

    #[serde(rename = "DeleteSuitLoadout")]
    DeleteSuitLoadout(DeleteSuitLoadout),

    #[serde(rename = "DeliverPowerMicroResources")]
    DeliverPowerMicroResources(DeliverPowerMicroResources),

    #[serde(rename = "Died")]
    Died(Died),

    #[serde(rename = "DisbandedSquadron")]
    DisbandedSquadron(DisbandedSquadron),

    #[serde(rename = "DiscoveryScan")]
    DiscoveryScan(DiscoveryScan),

    #[serde(rename = "Disembark")]
    Disembark(Disembark),

    #[serde(rename = "Docked")]
    Docked(Docked),

    #[serde(rename = "DockFighter")]
    DockFighter(DockFighter),

    #[serde(rename = "DockingCancelled")]
    DockingCancelled(DockingCancelled),

    #[serde(rename = "DockingDenied")]
    DockingDenied(DockingDenied),

    #[serde(rename = "DockingGranted")]
    DockingGranted(DockingGranted),

    #[serde(rename = "DockingRequested")]
    DockingRequested(DockingRequested),

    #[serde(rename = "DockingTimeout")]
    DockingTimeout(DockingTimeout),

    #[serde(rename = "DockSRV")]
    DockSRV(DockSRV),

    #[serde(rename = "DropItems")]
    DropItems(DropItems),

    #[serde(rename = "DropshipDeploy")]
    DropshipDeploy(DropshipDeploy),

    #[serde(rename = "EjectCargo")]
    EjectCargo(EjectCargo),

    #[serde(rename = "Embark")]
    Embark(Embark),

    #[serde(rename = "EndCrewSession")]
    EndCrewSession(EndCrewSession),

    #[serde(rename = "EngineerContribution")]
    EngineerContribution(EngineerContribution),

    #[serde(rename = "EngineerCraft")]
    EngineerCraft(EngineerCraft),

    #[serde(rename = "EngineerLegacyConvert")]
    EngineerLegacyConvert(EngineerLegacyConvert),

    #[serde(rename = "EngineerProgress")]
    EngineerProgress(EngineerProgress),

    #[serde(rename = "EscapeInterdiction")]
    EscapeInterdiction(EscapeInterdiction),

    #[serde(rename = "FactionKillBond")]
    FactionKillBond(FactionKillBond),

    #[serde(rename = "FCMaterials")]
    FCMaterials(FCMaterials),

    #[serde(rename = "FetchRemoteModule")]
    FetchRemoteModule(FetchRemoteModule),

    #[serde(rename = "FighterDestroyed")]
    FighterDestroyed(FighterDestroyed),

    #[serde(rename = "FighterRebuilt")]
    FighterRebuilt(FighterRebuilt),

    #[serde(rename = "Fileheader")]
    Fileheader(Fileheader),

    #[serde(rename = "Friends")]
    Friends(Friends),

    #[serde(rename = "FSDJump")]
    FSDJump(FSDJump),

    #[serde(rename = "FSDTarget")]
    FSDTarget(FSDTarget),

    #[serde(rename = "FSSAllBodiesFound")]
    FSSAllBodiesFound(FSSAllBodiesFound),

    #[serde(rename = "FSSBodySignals")]
    FSSBodySignals(FSSBodySignals),

    #[serde(rename = "FSSDiscoveryScan")]
    FSSDiscoveryScan(FSSDiscoveryScan),

    #[serde(rename = "FSSSignalDiscovered")]
    FSSSignalDiscovered(FSSSignalDiscovered),

    #[serde(rename = "FuelScoop")]
    FuelScoop(FuelScoop),

    #[serde(rename = "HeatDamage")]
    HeatDamage(HeatDamage),

    #[serde(rename = "HeatWarning")]
    HeatWarning(HeatWarning),

    #[serde(rename = "HoloscreenHacked")]
    HoloscreenHacked(HoloscreenHacked),

    #[serde(rename = "HullDamage")]
    HullDamage(HullDamage),

    #[serde(rename = "Interdicted")]
    Interdicted(Interdicted),

    #[serde(rename = "Interdiction")]
    Interdiction(Interdiction),

    #[serde(rename = "InvitedToSquadron")]
    InvitedToSquadron(InvitedToSquadron),

    #[serde(rename = "JetConeBoost")]
    JetConeBoost(JetConeBoost),

    #[serde(rename = "JetConeDamage")]
    JetConeDamage(JetConeDamage),

    #[serde(rename = "JoinACrew")]
    JoinACrew(JoinACrew),

    #[serde(rename = "JoinedSquadron")]
    JoinedSquadron(JoinedSquadron),

    #[serde(rename = "KickCrewMember")]
    KickCrewMember(KickCrewMember),

    #[serde(rename = "KickedFromSquadron")]
    KickedFromSquadron(KickedFromSquadron),

    #[serde(rename = "LaunchDrone")]
    LaunchDrone(LaunchDrone),

    #[serde(rename = "LaunchFighter")]
    LaunchFighter(LaunchFighter),

    #[serde(rename = "LaunchSRV")]
    LaunchSRV(LaunchSRV),

    #[serde(rename = "LeaveBody")]
    LeaveBody(LeaveBody),

    #[serde(rename = "LeftSquadron")]
    LeftSquadron(LeftSquadron),

    #[serde(rename = "Liftoff")]
    Liftoff(Liftoff),

    #[serde(rename = "LoadGame")]
    LoadGame(LoadGame),

    #[serde(rename = "Loadout")]
    Loadout(Loadout),

    #[serde(rename = "LoadoutEquipModule")]
    LoadoutEquipModule(LoadoutEquipModule),

    #[serde(rename = "LoadoutRemoveModule")]
    LoadoutRemoveModule(LoadoutRemoveModule),

    #[serde(rename = "Location")]
    Location(Location),

    #[serde(rename = "Market")]
    Market(Market),

    #[serde(rename = "MarketBuy")]
    MarketBuy(MarketBuy),

    #[serde(rename = "MarketSell")]
    MarketSell(MarketSell),

    #[serde(rename = "MassModuleStore")]
    MassModuleStore(MassModuleStore),

    #[serde(rename = "MaterialCollected")]
    MaterialCollected(MaterialCollected),

    #[serde(rename = "MaterialDiscarded")]
    MaterialDiscarded(MaterialDiscarded),

    #[serde(rename = "MaterialDiscovered")]
    MaterialDiscovered(MaterialDiscovered),

    #[serde(rename = "Materials")]
    Materials(Materials),

    #[serde(rename = "MaterialTrade")]
    MaterialTrade(MaterialTrade),

    #[serde(rename = "MiningRefined")]
    MiningRefined(MiningRefined),

    #[serde(rename = "MissionAbandoned")]
    MissionAbandoned(MissionAbandoned),

    #[serde(rename = "MissionAccepted")]
    MissionAccepted(MissionAccepted),

    #[serde(rename = "MissionCompleted")]
    MissionCompleted(MissionCompleted),

    #[serde(rename = "MissionFailed")]
    MissionFailed(MissionFailed),

    #[serde(rename = "MissionRedirected")]
    MissionRedirected(MissionRedirected),

    #[serde(rename = "Missions")]
    Missions(Missions),

    #[serde(rename = "ModuleBuy")]
    ModuleBuy(ModuleBuy),

    #[serde(rename = "ModuleBuyAndStore")]
    ModuleBuyAndStore(ModuleBuyAndStore),

    #[serde(rename = "ModuleInfo")]
    ModuleInfo(ModuleInfo),

    #[serde(rename = "ModuleRetrieve")]
    ModuleRetrieve(ModuleRetrieve),

    #[serde(rename = "ModuleSell")]
    ModuleSell(ModuleSell),

    #[serde(rename = "ModuleSellRemote")]
    ModuleSellRemote(ModuleSellRemote),

    #[serde(rename = "ModuleStore")]
    ModuleStore(ModuleStore),

    #[serde(rename = "ModuleSwap")]
    ModuleSwap(ModuleSwap),

    #[serde(rename = "MultiSellExplorationData")]
    MultiSellExplorationData(MultiSellExplorationData),

    #[serde(rename = "Music")]
    Music(Music),

    #[serde(rename = "NavBeaconScan")]
    NavBeaconScan(NavBeaconScan),

    #[serde(rename = "NavRoute")]
    NavRoute(NavRoute),

    #[serde(rename = "NavRouteClear")]
    NavRouteClear(NavRouteClear),

    #[serde(rename = "NewCommander")]
    NewCommander(NewCommander),

    #[serde(rename = "NpcCrewPaidWage")]
    NpcCrewPaidWage(NpcCrewPaidWage),

    #[serde(rename = "NpcCrewRank")]
    NpcCrewRank(NpcCrewRank),

    #[serde(rename = "Outfitting")]
    Outfitting(Outfitting),

    #[serde(rename = "Passengers")]
    Passengers(Passengers),

    #[serde(rename = "PayBounties")]
    PayBounties(PayBounties),

    #[serde(rename = "PayFines")]
    PayFines(PayFines),

    #[serde(rename = "Powerplay")]
    Powerplay(Powerplay),

    #[serde(rename = "PowerplayCollect")]
    PowerplayCollect(PowerplayCollect),

    #[serde(rename = "PowerplayDefect")]
    PowerplayDefect(PowerplayDefect),

    #[serde(rename = "PowerplayDeliver")]
    PowerplayDeliver(PowerplayDeliver),

    #[serde(rename = "PowerplayFastTrack")]
    PowerplayFastTrack(PowerplayFastTrack),

    #[serde(rename = "PowerplayJoin")]
    PowerplayJoin(PowerplayJoin),

    #[serde(rename = "PowerplayLeave")]
    PowerplayLeave(PowerplayLeave),

    #[serde(rename = "PowerplayMerits")]
    PowerplayMerits(PowerplayMerits),

    #[serde(rename = "PowerplayRank")]
    PowerplayRank(PowerplayRank),

    #[serde(rename = "PowerplaySalary")]
    PowerplaySalary(PowerplaySalary),

    #[serde(rename = "PowerplayVote")]
    PowerplayVote(PowerplayVote),

    #[serde(rename = "PowerplayVoucher")]
    PowerplayVoucher(PowerplayVoucher),

    #[serde(rename = "Progress")]
    Progress(Progress),

    #[serde(rename = "Promotion")]
    Promotion(Promotion),

    #[serde(rename = "ProspectedAsteroid")]
    ProspectedAsteroid(ProspectedAsteroid),

    #[serde(rename = "PVPKill")]
    PVPKill(PVPKill),

    #[serde(rename = "QuitACrew")]
    QuitACrew(QuitACrew),

    #[serde(rename = "Rank")]
    Rank(Rank),

    #[serde(rename = "RebootRepair")]
    RebootRepair(RebootRepair),

    #[serde(rename = "ReceiveText")]
    ReceiveText(ReceiveText),

    #[serde(rename = "RedeemVoucher")]
    RedeemVoucher(RedeemVoucher),

    #[serde(rename = "RefuelAll")]
    RefuelAll(RefuelAll),

    #[serde(rename = "RefuelPartial")]
    RefuelPartial(RefuelPartial),

    #[serde(rename = "RenameSuitLoadout")]
    RenameSuitLoadout(RenameSuitLoadout),

    #[serde(rename = "Repair")]
    Repair(Repair),

    #[serde(rename = "RepairAll")]
    RepairAll(RepairAll),

    #[serde(rename = "RepairDrone")]
    RepairDrone(RepairDrone),

    #[serde(rename = "Reputation")]
    Reputation(Reputation),

    #[serde(rename = "RequestPowerMicroResources")]
    RequestPowerMicroResources(RequestPowerMicroResources),

    #[serde(rename = "ReservoirReplenished")]
    ReservoirReplenished(ReservoirReplenished),

    #[serde(rename = "RestockVehicle")]
    RestockVehicle(RestockVehicle),

    #[serde(rename = "Resupply")]
    Resupply(Resupply),

    #[serde(rename = "Resurrect")]
    Resurrect(Resurrect),

    #[serde(rename = "SAAScanComplete")]
    SAAScanComplete(SAAScanComplete),

    #[serde(rename = "SAASignalsFound")]
    SAASignalsFound(SAASignalsFound),

    #[serde(rename = "Scan")]
    Scan(Scan),

    #[serde(rename = "ScanBaryCentre")]
    ScanBaryCentre(ScanBaryCentre),

    #[serde(rename = "Scanned")]
    Scanned(Scanned),

    #[serde(rename = "ScanOrganic")]
    ScanOrganic(ScanOrganic),

    #[serde(rename = "ScientificResearch")]
    ScientificResearch(ScientificResearch),

    #[serde(rename = "Screenshot")]
    Screenshot(Screenshot),

    #[serde(rename = "SearchAndRescue")]
    SearchAndRescue(SearchAndRescue),

    #[serde(rename = "SelfDestruct")]
    SelfDestruct(SelfDestruct),

    #[serde(rename = "SellDrones")]
    SellDrones(SellDrones),

    #[serde(rename = "SellExplorationData")]
    SellExplorationData(SellExplorationData),

    #[serde(rename = "SellMicroResources")]
    SellMicroResources(SellMicroResources),

    #[serde(rename = "SellOrganicData")]
    SellOrganicData(SellOrganicData),

    #[serde(rename = "SellShipOnRebuy")]
    SellShipOnRebuy(SellShipOnRebuy),

    #[serde(rename = "SellSuit")]
    SellSuit(SellSuit),

    #[serde(rename = "SellWeapon")]
    SellWeapon(SellWeapon),

    #[serde(rename = "SendText")]
    SendText(SendText),

    #[serde(rename = "SetUserShipName")]
    SetUserShipName(SetUserShipName),

    #[serde(rename = "SharedBookmarkToSquadron")]
    SharedBookmarkToSquadron(SharedBookmarkToSquadron),

    #[serde(rename = "ShieldState")]
    ShieldState(ShieldState),

    #[serde(rename = "ShipLocker")]
    ShipLocker(ShipLocker),

    #[serde(rename = "ShipLockerMaterials")]
    ShipLockerMaterials(ShipLockerMaterials),

    #[serde(rename = "ShipRedeemed")]
    ShipRedeemed(ShipRedeemed),

    #[serde(rename = "ShipTargeted")]
    ShipTargeted(ShipTargeted),

    #[serde(rename = "Shipyard")]
    Shipyard(Shipyard),

    #[serde(rename = "ShipyardBuy")]
    ShipyardBuy(ShipyardBuy),

    #[serde(rename = "ShipyardNew")]
    ShipyardNew(ShipyardNew),

    #[serde(rename = "ShipyardRedeem")]
    ShipyardRedeem(ShipyardRedeem),

    #[serde(rename = "ShipyardSell")]
    ShipyardSell(ShipyardSell),

    #[serde(rename = "ShipyardSwap")]
    ShipyardSwap(ShipyardSwap),

    #[serde(rename = "ShipyardTransfer")]
    ShipyardTransfer(ShipyardTransfer),

    #[serde(rename = "Shutdown")]
    Shutdown(Shutdown),

    #[serde(rename = "SquadronCreated")]
    SquadronCreated(SquadronCreated),

    #[serde(rename = "SquadronDemotion")]
    SquadronDemotion(SquadronDemotion),

    #[serde(rename = "SquadronPromotion")]
    SquadronPromotion(SquadronPromotion),

    #[serde(rename = "SquadronStartup")]
    SquadronStartup(SquadronStartup),

    #[serde(rename = "SRVDestroyed")]
    SRVDestroyed(SRVDestroyed),

    #[serde(rename = "StartJump")]
    StartJump(StartJump),

    #[serde(rename = "Statistics")]
    Statistics(Statistics),

    #[serde(rename = "Status")]
    Status(Status),

    #[serde(rename = "StoredModules")]
    StoredModules(StoredModules),

    #[serde(rename = "StoredShips")]
    StoredShips(StoredShips),

    #[serde(rename = "SuitLoadout")]
    SuitLoadout(SuitLoadout),

    #[serde(rename = "SupercruiseDestinationDrop")]
    SupercruiseDestinationDrop(SupercruiseDestinationDrop),

    #[serde(rename = "SupercruiseEntry")]
    SupercruiseEntry(SupercruiseEntry),

    #[serde(rename = "SupercruiseExit")]
    SupercruiseExit(SupercruiseExit),

    #[serde(rename = "SwitchSuitLoadout")]
    SwitchSuitLoadout(SwitchSuitLoadout),

    #[serde(rename = "Synthesis")]
    Synthesis(Synthesis),

    #[serde(rename = "SystemsShutdown")]
    SystemsShutdown(SystemsShutdown),

    #[serde(rename = "TechnologyBroker")]
    TechnologyBroker(TechnologyBroker),

    #[serde(rename = "Touchdown")]
    Touchdown(Touchdown),

    #[serde(rename = "TradeMicroResources")]
    TradeMicroResources(TradeMicroResources),

    #[serde(rename = "TransferMicroResources")]
    TransferMicroResources(TransferMicroResources),

    #[serde(rename = "UnderAttack")]
    UnderAttack(UnderAttack),

    #[serde(rename = "Undocked")]
    Undocked(Undocked),

    #[serde(rename = "UpgradeSuit")]
    UpgradeSuit(UpgradeSuit),

    #[serde(rename = "UpgradeWeapon")]
    UpgradeWeapon(UpgradeWeapon),

    #[serde(rename = "UseConsumable")]
    UseConsumable(UseConsumable),

    #[serde(rename = "USSDrop")]
    USSDrop(USSDrop),

    #[serde(rename = "VehicleSwitch")]
    VehicleSwitch(VehicleSwitch),

    #[serde(rename = "WingAdd")]
    WingAdd(WingAdd),

    #[serde(rename = "WingInvite")]
    WingInvite(WingInvite),

    #[serde(rename = "WingJoin")]
    WingJoin(WingJoin),

    #[serde(rename = "WingLeave")]
    WingLeave(WingLeave),

}

