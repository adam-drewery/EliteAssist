mod economy;
mod inventory;
mod personal;
mod session;
mod vehicle;
mod format;
mod navigation;

use economy::*;
use inventory::*;
use navigation::*;
use personal::*;
use session::*;
use vehicle::*;

use crate::state::ActiveScreen;

use chrono::{DateTime, Utc};
use serde::Deserialize;

// todo: eventually make this non-clonable and have a separate enum for gui events
#[derive(Clone, Debug, Deserialize)]
#[serde(tag = "event")]
pub enum JournalEvent {

    #[serde(rename = "Fileheader")]
    FileHeader(FileHeader),
    Commander(Commander),
    NewCommander(NewCommander),
    Materials(Materials),
    Rank(Rank),
    Progress(Rank),
    Reputation(Reputation),
    EngineerProgress(EngineerProgress),
    SquadronStartup(SquadronStartup),
    LoadGame(LoadGame),
    Statistics(Statistics),
    ReceiveText(ReceiveText),
    Location(Location),
    Powerplay(Powerplay),
    Music(Music),
    SuitLoadout(inventory::SuitLoadout),
    Backpack(Empty),
    ShipLocker(inventory::ShipLocker),
    Missions(Empty),
    Shutdown(Empty),
    Loadout(vehicle::ShipLoadout),
    BuyAmmo(BuyAmmo),
    RestockVehicle(RestockVehicle),
    BuyMicroResources(BuyMicroResources),
    Status(Status),
    Embark(Embark),
    Disembark(Embark),
    NpcCrewPaidWage(NpcCrewPaidWage),
    Cargo(Cargo),
    Market(economy::Market),
    Docked(Docked),
    BookDropship(BookDropship),
    StartJump(StartJump),
    LaunchDrone(LaunchDrone),
    SupercruiseEntry(SupercruiseEntry),
    SupercruiseExit(SupercruiseExit),
    Resurrect(Resurrect),
    FSSSignalDiscovered(FSSSignalDiscovered),
    NavRoute(NavRoute),
    Shipyard(Shipyard),
    ApproachSettlement(ApproachSettlement),
    StoredShips(StoredShips),
    SwitchSuitLoadout(SuitLoadout),
    MissionAccepted(MissionAccepted),
    FSDTarget(FSDTarget),
    ShipyardSwap(ShipyardSwap),
    ShipyardTransfer(ShipyardTransfer),
    RefuelAll(RefuelAll),
    ClearImpound(ClearImpound),
    ModuleInfo(Empty),
    Undocked(Undocked),
    CommitCrime(CommitCrime),
    UnderAttack(UnderAttack),
    CollectItems(CollectItems),
    LeaveBody(Body),
    FSDJump(FSDJump),
    NavRouteClear(Empty),
    Bounty(Bounty),
    ReservoirReplenished(ReservoirReplenished),
    UseConsumable(UseConsumable),
    Outfitting(Shipyard),
    DockingDenied(DockingDenied),
    DockingTimeout(DockingTimeout),
    MissionFailed(Mission),
    SupercruiseDestinationDrop(SupercruiseDestinationDrop),
    MissionAbandoned(Mission),
    EngineerCraft(EngineerCraft),
    DropshipDeploy(DropshipDeploy),
    FuelScoop(FuelScoop),
    ApproachBody(Body),
    Scan(Scan),
    StoredModules(StoredModules),
    SAASignalsFound(SAASignalsFound),
    DockingRequested(DockingRequested),
    DockingGranted(DockingGranted),
    HeatWarning(Empty),
    ShieldState(ShieldState),
    MissionCompleted(MissionCompleted),
    MaterialTrade(MaterialTrade),
    ScientificResearch(ScientificResearch),
    TechnologyBroker(TechnologyBroker),
    FSSAllBodiesFound(FFSSAllBodiesFound),
    FactionKillBond(FactionKillBond),
    RedeemVoucher(RedeemVoucher),
    PayBounties(PayBounties),
    Touchdown(Liftoff),
    ShipyardSell(ShipyardSell),
    SellShipOnRebuy(SellShipOnRebuy),
    ScanOrganic(ScanOrganic),
    RepairAll(RepairAll),
    DatalinkScan(DatalinkScan),
    NavBeaconScan(NavBeaconScan),
    MultiSellExplorationData(MultiSellExplorationData),
    Liftoff(Liftoff),
    EscapeInterdiction(EscapeInterdiction),
    ModuleBuy(ModuleBuy),
    USSDrop(USSDrop),
    ScanBaryCentre(ScanBaryCentre),
    Repair(Repair),
    Passengers(economy::Passengers),
    MissionRedirected(MissionRedirected),
    CargoDepot(CargoDepot),
    UpgradeWeapon(UpgradeWeapon),
    Resupply(Empty),
    Died(Died),
    SrvDestroyed(SrvDestroyed),
    CodexEntry(CodexEntry),
    ModuleSell(ModuleSell),
    ModuleStore(ModuleStore),
    MassModuleStore(MassModuleStore),
    ModuleRetrieve(ModuleRetrieve),
    ShipTargeted(ShipTargeted),
    EjectCargo(EjectCargo),
    HullDamage(HullDamage),
    CrewAssign(CrewAssign),
    CrewFire(CrewFire),
    CrewHire(CrewHire),
    DockFighter(DockFighter),
    CommunityGoal(CommunityGoal),
    LaunchFighter(LaunchFighter),
    Scanned(Scanned),
    Friends(Friends),
    BackpackChange(BackpackChange),
    SetUserShipName(SetUserShipName),
    FSSDiscoveryScan(FSSDiscoveryScan),
    SendText(SendText),
    BuyDrones(BuyDrones),
    SellDrones(SellDrones),
    ShipyardBuy(ShipyardBuy),
    Promotion(Promotion),
    CollectCargo(CollectCargo),
    HeatDamage(Empty),
    SAAScanComplete(SAAScanComplete),
    CreateSuitLoadout(SuitLoadout),
    MaterialCollected(MaterialCollected),
    LaunchSRV(LaunchSRV),
    Synthesis(Synthesis),
    TradeMicroResources(TradeMicroResources),
    CrimeVictim(CrimeVictim),
    JetConeBoost(JetConeBoost),
    DockingCancelled(DockingCancelled),
    FetchRemoteModule(FetchRemoteModule),
    PayFines(PayFines),
    SearchAndRescue(navigation::SearchAndRescue),
    ShipyardNew(ShipyardNew),
    CommunityGoalReward(CommunityGoalReward),
    CrewMemberJoins(CrewMemberJoins),
    Interdicted(Interdicted),
    SellOrganicData(SellOrganicData),
    DockSRV(DockSRV),
    FighterDestroyed(FighterDestroyed),
    ModuleSwap(ModuleSwap),
    MaterialDiscovered(MaterialDiscovered),
    DataScanned(DataScanned),
    VehicleSwitch(VehicleSwitch),
    MarketBuy(MarketBuy),
    ModuleSellRemote(ModuleSellRemote),
    AfmuRepairs(AfmuRepairs),
    CommunityGoalJoin(CommunityGoalJoin),
    NpcCrewRank(NpcCrewRank),
    LoadoutEquipModule(LoadoutEquipModule),
    FighterRebuilt(FighterRebuilt),
    PowerplayJoin(PowerplayJoin),
    PowerplayDefect(PowerplayDefect),
    PowerplayDeliver(PowerplayDeliver),
    PowerplaySalary(PowerplaySalary),
    PowerplayLeave(PowerplayLeave),
    CrewMemberRoleChange(CrewMemberRoleChange),
    SelfDestruct(Empty),
    BookTaxi(BookTaxi),
    MarketSell(MarketSell),
    SellWeapon(SellWeapon),
    SystemsShutdown(Empty),
    ProspectedAsteroid(ProspectedAsteroid),
    SRVDestroyed(SrvDestroyed),
    DiscoveryScan(DiscoveryScan),
    CrewLaunchFighter(CrewLaunchFighter),
    BuyWeapon(BuyWeapon),
    RenameSuitLoadout(SuitLoadout),
    MiningRefined(MiningRefined),
    CancelTaxi(CancelTaxi),
    EngineerContribution(EngineerContribution),
    SellMicroResources(SellMicroResources),
    UpgradeSuit(UpgradeSuit),
    AppliedToSquadron(AppliedToSquadron),
    DisbandedSquadron(DisbandedSquadron),
    InvitedToSquadron(InvitedToSquadron),
    JoinedSquadron(JoinedSquadron),
    KickedFromSquadron(KickedFromSquadron),
    LeftSquadron(LeftSquadron),
    SharedBookmarkToSquadron(SharedBookmarkToSquadron),
    SquadronCreated(SquadronCreated),
    SquadronDemotion(SquadronDemotion),
    SquadronPromotion(SquadronPromotion),
    WonATrophyForSquadron(WonATrophyForSquadron),
    CrewMemberQuits(CrewMemberQuits),
    ChangeCrewRole(ChangeCrewRole),
    AsteroidCracked(AsteroidCracked),
    DatalinkVoucher(DatalinkVoucher),
    DeliverPowerMicroResources(DeliverPowerMicroResources),
    Interdiction(Interdiction),
    EndCrewSession(EndCrewSession),
    BuySuit(Suit),
    SellSuit(Suit),
    DeleteSuitLoadout(SuitLoadout),
    CapShipBond(CapShipBond),
    PVPKill(PVPKill),

    CommunityGoalDiscarded(CommunityGoalDiscarded),
    JetConeDamage(JetConeDamage),
    RefuelPartial(RefuelPartial),

    // Fleet Carrier events
    CarrierJump(CarrierJump),
    CarrierBuy(CarrierBuy),
    CarrierStats(CarrierStats),
    CarrierJumpRequest(CarrierJumpRequest),
    CarrierDecommission(CarrierDecommission),
    CarrierCancelDecommission(CarrierCancelDecommission),
    CarrierBankTransfer(CarrierBankTransfer),
    CarrierDepositFuel(CarrierDepositFuel),
    CarrierCrewServices(CarrierCrewServices),
    CarrierFinance(CarrierFinance),
    CarrierShipPack(CarrierShipPack),
    CarrierModulePack(CarrierModulePack),
    CarrierTradeOrder(CarrierTradeOrder),
    CarrierDockingPermission(CarrierDockingPermission),
    CarrierNameChanged(CarrierNameChanged),
    CarrierJumpCancelled(CarrierJumpCancelled),
    FCMaterials(FCMaterials),
    
    // Additional Odyssey events
    CancelDropship(CancelDropship),
    DropItems(DropItems),

    // Added events
    Screenshot(Screenshot),
    SellExplorationData(SellExplorationData),
    MaterialDiscarded(MaterialDiscarded),
    FSSBodySignals(FSSBodySignals),
    BuyExplorationData(BuyExplorationData),
    ClearSavedGame(ClearSavedGame),
    BuyTradeData(BuyTradeData),
    PowerplayFastTrack(PowerplayFastTrack),
    PowerplayCollect(PowerplayCollect),
    PowerplayVoucher(PowerplayVoucher),
    PowerplayVote(PowerplayVote),
    RepairDrone(RepairDrone),
    QuitACrew(QuitACrew),
    JoinACrew(JoinACrew),
    RebootRepair(RebootRepair),
    KickCrewMember(KickCrewMember),
    CockpitBreached(CockpitBreached),
    Continued(Continued),
    StationTransferRequest(StationTransferRequest),

    NavigateTo(ActiveScreen),
}

#[derive(Clone, Debug, Deserialize)]
pub struct Empty {

    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>
}