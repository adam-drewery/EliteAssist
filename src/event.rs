// This file is auto-generated by generate_events.ps1
// Do not edit manually

pub mod cargo;
pub mod chat;
pub mod crew;
pub mod economy;
pub mod engineering;
pub mod fighter;
pub mod format;
pub mod loadout;
pub mod location;
pub mod mission;
pub mod navigation;
pub mod personal;
pub mod ship;

use chrono::{DateTime, Utc};
use serde::Deserialize;

/// When written: when repairing modules using the Auto Field Maintenance Unit (AFMU)
#[derive(Clone, Debug, Deserialize)]
pub struct AfmuRepairs {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FullyRepaired")]
    pub fully_repaired: bool,

    #[serde(rename = "Health")]
    pub health: f64,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Module_Localised")]
    pub module_localised: Option<String>,

}


/// When written: when approaching a planetary settlement
#[derive(Clone, Debug, Deserialize)]
pub struct ApproachSettlement {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Option<Vec<NameAndProportion>>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationFaction")]
    pub station_faction: Option<SystemFaction>,

    #[serde(rename = "StationGovernment")]
    pub station_government: Option<String>,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When written: when the player has broken up a ‘Motherlode’ asteroid for mining
#[derive(Clone, Debug, Deserialize)]
pub struct AsteroidCracked {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

}


/// This is written when there is any change to the contents of the suit backpack – note this can be written at the same time as other events like UseConsumable
#[derive(Clone, Debug, Deserialize)]
pub struct BackpackChange {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Added")]
    pub added: Option<Vec<BackpackChangeEntry>>,

    #[serde(rename = "Removed")]
    pub removed: Option<Vec<BackpackChangeEntry>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct BackpackChangeEntry {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When written: when flying away from a planet, and distance increases above the 'Orbital Cruise' altitude
/// When written: when in Supercruise, and distance from planet drops to within the 'Orbital Cruise' zone
#[derive(Clone, Debug, Deserialize)]
pub struct Body {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// This event is logged when booking a taxi transport
/// This event is logged when signing up to fight at a recruitment desk
#[derive(Clone, Debug, Deserialize)]
pub struct Booking {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "DestinationLocation")]
    pub destination_location: String,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: String,

    #[serde(rename = "Retreat")]
    pub retreat: Option<bool>,

}


/// When written: player is awarded a bounty for a kill
#[derive(Clone, Debug, Deserialize)]
pub struct Bounty {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    /// Name of the Pilot
    #[serde(rename = "PilotName")]
    pub pilot_name: Option<String>,

    /// Name of the Pilot
    #[serde(rename = "PilotName_Localised")]
    pub pilot_name_localised: Option<String>,

    /// Used instead of Rewards when the bounty is for a skimmer
    #[serde(rename = "Reward")]
    pub reward: Option<u64>,

    /// An array of Faction names and the Reward values, as the target can have multiple bounties payable by different factions. Not used for skimmers.(See Reward)
    #[serde(rename = "Rewards")]
    pub rewards: Option<Vec<BountyReward>>,

    /// if credit for the kill is shared with other players, this has the number of other players involved
    #[serde(rename = "SharedWithOthers")]
    pub shared_with_others: Option<u64>,

    /// type of ship
    #[serde(rename = "Target")]
    pub target: String,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    /// Not used for skimmers.
    #[serde(rename = "TotalReward")]
    pub total_reward: Option<u64>,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

    #[serde(rename = "VictimFaction_Localised")]
    pub victim_faction_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct BountyReward {

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Reward")]
    pub reward: u64,

}


/// When Written: when buying system data via the galaxy map
/// When Written: when buying trade data in the galaxy map
#[derive(Clone, Debug, Deserialize)]
pub struct BuyData {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "System")]
    pub system: String,

}


/// When Written: when purchasing drones
#[derive(Clone, Debug, Deserialize)]
pub struct BuyDrones {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "TotalCost")]
    pub total_cost: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// This event is logged when buying microresources
#[derive(Clone, Debug, Deserialize)]
pub struct BuyMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: Option<String>,

    /// Old format (used for example at supplies vendor)
    #[serde(rename = "Count")]
    pub count: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// New format (eg at Fleet Carrier bartender)
    #[serde(rename = "MicroResources")]
    pub micro_resources: Option<Vec<MicroResources>>,

    /// Old format (used for example at supplies vendor)
    #[serde(rename = "Name")]
    pub name: Option<String>,

    /// Old format (used for example at supplies vendor)
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: u64,

    /// New format (eg at Fleet Carrier bartender)
    #[serde(rename = "TotalCount")]
    pub total_count: Option<u64>,

}


/// This event is logged if the player cancels a booked taxi trip
/// This event is logged if the player cancels their journey to a combat zone
#[derive(Clone, Debug, Deserialize)]
pub struct Cancel {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Refund")]
    pub refund: u64,

}


/// When written: The player has been rewarded for a capital ship combat
#[derive(Clone, Debug, Deserialize)]
pub struct CapShipBond {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AwardingFaction")]
    pub awarding_faction: String,

    #[serde(rename = "Reward")]
    pub reward: u64,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

}


/// When written: at startup, note this is now written slightly later in startup, after we have initialised missions, so we can detect if any cargo came from an abandoned delivery mission. The first Cargo event in the file will contain the full inventory, others just indicate a separate file has been written. The full data is now written to a separate file Cargo.json. A simple event (with no parameters) is written to the main journal file when the cargo file is updated.
#[derive(Clone, Debug, Deserialize)]
pub struct Cargo {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Inventory")]
    pub inventory: Option<Vec<CargoInventory>>,

    #[serde(rename = "Vessel")]
    pub vessel: String,

}


/// When written: when collecting or delivering cargo for a wing mission, or if a wing member updates progress. The CargoType and Count are included when you collect or deliver goods, they are not included for a wing update. The Progress value actually represents pending progress for goods in transit: (ItemsCollected-ItemsDelivered)/TotalItemsToDeliver
#[derive(Clone, Debug, Deserialize)]
pub struct CargoDepot {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Not included for UpdateType of WingUpdate
    #[serde(rename = "CargoType")]
    pub cargo_type: Option<String>,

    #[serde(rename = "CargoType_Localised")]
    pub cargo_type_localised: Option<String>,

    /// Not included for UpdateType of WingUpdate
    #[serde(rename = "Count")]
    pub count: Option<u64>,

    #[serde(rename = "EndMarketID")]
    pub end_market_id: u64,

    #[serde(rename = "ItemsCollected")]
    pub items_collected: u64,

    #[serde(rename = "ItemsDelivered")]
    pub items_delivered: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Progress")]
    pub progress: f64,

    #[serde(rename = "StartMarketID")]
    pub start_market_id: u64,

    #[serde(rename = "TotalItemsToDeliver")]
    pub total_items_to_deliver: u64,

    #[serde(rename = "UpdateType")]
    pub update_type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CargoInventory {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Stolen")]
    pub stolen: u64,

}


/// When transferring cargo between ship and fleet carrier, or between ship and SRV
#[derive(Clone, Debug, Deserialize)]
pub struct CargoTransfer {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Transfers")]
    pub transfers: Vec<CargoTransferTransfer>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CargoTransferTransfer {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Direction")]
    pub direction: String,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// At the time the player cancels decommission
/// This is logged when a jump is cancelled
#[derive(Clone, Debug, Deserialize)]
pub struct Carrier {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

}


/// Player transfers credits to/from carrier
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierBankTransfer {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Carrier balance after transfer
    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: u64,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Deposit")]
    pub deposit: Option<u64>,

    /// Player balance after transfer
    #[serde(rename = "PlayerBalance")]
    pub player_balance: u64,

    #[serde(rename = "Withdraw")]
    pub withdraw: Option<u64>,

}


/// Player has bought a fleet carrier
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierBuy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BoughtAtMarket")]
    pub bought_at_market: u64,

    #[serde(rename = "Callsign")]
    pub callsign: String,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Location")]
    pub location: String,

    #[serde(rename = "Price")]
    pub price: u64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Variant")]
    pub variant: String,

}


/// Changes to crew
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierCrewServices {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "CrewName")]
    pub crew_name: String,

    #[serde(rename = "CrewRole")]
    pub crew_role: String,

    #[serde(rename = "Operation")]
    pub operation: String,

}


/// At the time the player requests decommission
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDecommission {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "ScrapRefund")]
    pub scrap_refund: u64,

    #[serde(rename = "ScrapTime")]
    pub scrap_time: u64,

}


/// Any player giving fuel to the carrier
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDepositFuel {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    /// Total amount of fuel after donation
    #[serde(rename = "Total")]
    pub total: u64,

}


/// The carrier owner has changed the docking permission criteria
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierDockingPermission {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AllowNotorious")]
    pub allow_notorious: bool,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "DockingAccess")]
    pub docking_access: String,

}


/// Change to tax rate or reserve
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierFinance {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AvailableBalance")]
    pub available_balance: u64,

    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: u64,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "ReserveBalance")]
    pub reserve_balance: u64,

    #[serde(rename = "ReservePercent")]
    pub reserve_percent: u64,

    #[serde(rename = "TaxRate")]
    pub tax_rate: Option<u64>,

    #[serde(rename = "TaxRate_outfitting")]
    pub tax_rate_outfitting: Option<u64>,

    #[serde(rename = "TaxRate_pioneersupplies")]
    pub tax_rate_pioneer_supplies: Option<u64>,

    #[serde(rename = "TaxRate_rearm")]
    pub tax_rate_rearm: Option<u64>,

    #[serde(rename = "TaxRate_refuel")]
    pub tax_rate_refuel: Option<u64>,

    #[serde(rename = "TaxRate_repair")]
    pub tax_rate_repair: Option<u64>,

    #[serde(rename = "TaxRate_shipyard")]
    pub tax_rate_shipyard: Option<u64>,

}


/// This is similar to FSDJump and Location, but it is written if the player is online and docked at a fleet carrier when the carrier jumps. Note it does not include the distance jumped, or fuel used.
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJump {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "Conflicts")]
    pub conflicts: Option<Vec<CarrierJumpConflict>>,

    /// Controlling power for the system
    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    #[serde(rename = "Docked")]
    pub docked: bool,

    #[serde(rename = "Factions")]
    pub factions: Option<Vec<CarrierJumpFaction>>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "OnFoot")]
    pub on_foot: Option<bool>,

    #[serde(rename = "Population")]
    pub population: u64,

    /// When the system is unoccupied and 1 or more powers are fighting for control by reaching 120k merits.
    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Option<Vec<ConflictProgress>>,

    /// Powerplay state for the system.
    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    /// The current amount of control within the specific powerplay state
    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    /// Merits gained towards reinforcing the system and increasing the system strength
    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<u64>,

    /// Merits gained towards undermining the system and decreasing the system strength
    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<u64>,

    /// If the player is pledged to a Power in Powerplay, and the star system is involved in powerplay
    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    /// star position, as a Json array [x, y, z], relative to Sol in Ly
    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    /// Name of destination starsystem
    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationEconomies")]
    pub station_economies: Option<Vec<NameAndProportion>>,

    #[serde(rename = "StationEconomy")]
    pub station_economy: String,

    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationFaction")]
    pub station_faction: Option<CarrierJumpStationFaction>,

    #[serde(rename = "StationGovernment")]
    pub station_government: String,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<SystemFaction>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    /// Thargoid war information
    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<ThargoidWar>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpConflict {

    #[serde(rename = "Faction1")]
    pub faction1: ConflictFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: ConflictFaction2,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "WarType")]
    pub war_type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpFaction {

    #[serde(rename = "ActiveStates")]
    pub active_states: Option<Vec<FactionActiveState>>,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    /// If player squadron faction, and this is happiest system
    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "PendingStates")]
    pub pending_states: Option<Vec<FactionRecoveringState>>,

    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Option<Vec<FactionRecoveringState>>,

    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

}


/// At the time the player requests the jump, not the jump itself
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpRequest {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "DepartureTime", with = "crate::event::format::optional_date")]
    pub departure_time: Option<DateTime<Utc>>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierJumpStationFaction {

    #[serde(rename = "Name")]
    pub name: String,

}


/// Carrier Location. Written on startup and after a carrier jump.
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierLocation {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierNameChange {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Callsign")]
    pub callsign: String,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierPack {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Cost")]
    pub cost: Option<u64>,

    #[serde(rename = "Operation")]
    pub operation: String,

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: u64,

    #[serde(rename = "Refund")]
    pub refund: Option<u64>,

}


/// When owner opens carrier management
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStats {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AllowNotorious")]
    pub allow_notorious: bool,

    #[serde(rename = "Callsign")]
    pub callsign: String,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Crew")]
    pub crew: Vec<CarrierStatsCrew>,

    #[serde(rename = "DockingAccess")]
    pub docking_access: String,

    #[serde(rename = "Finance")]
    pub finance: CarrierStatsFinance,

    #[serde(rename = "FuelLevel")]
    pub fuel_level: u64,

    #[serde(rename = "JumpRangeCurr")]
    pub jump_range_curr: f64,

    #[serde(rename = "JumpRangeMax")]
    pub jump_range_max: f64,

    #[serde(rename = "ModulePacks")]
    pub module_packs: Vec<CarrierStatsShipPack>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "PendingDecommission")]
    pub pending_decommission: bool,

    #[serde(rename = "ShipPacks")]
    pub ship_packs: Vec<CarrierStatsShipPack>,

    #[serde(rename = "SpaceUsage")]
    pub space_usage: CarrierStatsSpaceUsage,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsCrew {

    #[serde(rename = "Activated")]
    pub activated: bool,

    #[serde(rename = "CrewName")]
    pub crew_name: Option<String>,

    #[serde(rename = "CrewRole")]
    pub crew_role: String,

    #[serde(rename = "Enabled")]
    pub enabled: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsFinance {

    #[serde(rename = "AvailableBalance")]
    pub available_balance: u64,

    #[serde(rename = "CarrierBalance")]
    pub carrier_balance: u64,

    #[serde(rename = "ReserveBalance")]
    pub reserve_balance: u64,

    #[serde(rename = "ReservePercent")]
    pub reserve_percent: Option<u64>,

    #[serde(rename = "TaxRate")]
    pub tax_rate: Option<u64>,

    #[serde(rename = "TaxRate_outfitting")]
    pub tax_rate_outfitting: Option<u64>,

    #[serde(rename = "TaxRate_pioneersupplies")]
    pub tax_rate_pioneer_supplies: Option<u64>,

    #[serde(rename = "TaxRate_rearm")]
    pub tax_rate_rearm: Option<u64>,

    #[serde(rename = "TaxRate_refuel")]
    pub tax_rate_refuel: Option<u64>,

    #[serde(rename = "TaxRate_repair")]
    pub tax_rate_repair: Option<u64>,

    #[serde(rename = "TaxRate_shipyard")]
    pub tax_rate_shipyard: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsShipPack {

    #[serde(rename = "PackTheme")]
    pub pack_theme: String,

    #[serde(rename = "PackTier")]
    pub pack_tier: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CarrierStatsSpaceUsage {

    #[serde(rename = "Cargo")]
    pub cargo: u64,

    #[serde(rename = "CargoSpaceReserved")]
    pub cargo_space_reserved: u64,

    #[serde(rename = "Crew")]
    pub crew: u64,

    #[serde(rename = "FreeSpace")]
    pub free_space: u64,

    #[serde(rename = "ModulePacks")]
    pub module_packs: u64,

    #[serde(rename = "ShipPacks")]
    pub ship_packs: u64,

    #[serde(rename = "TotalCapacity")]
    pub total_capacity: u64,

}


/// The carrier owner has requested the carrier buys or sells goods (or cancels such an order)
#[derive(Clone, Debug, Deserialize)]
pub struct CarrierTradeOrder {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BlackMarket")]
    pub black_market: bool,

    /// PurchaseOrder or SaleOrder or CancelTrade
    #[serde(rename = "CancelTrade")]
    pub cancel_trade: Option<bool>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: u64,

    #[serde(rename = "Commodity")]
    pub commodity: String,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: Option<u64>,

    /// PurchaseOrder or SaleOrder or CancelTrade
    #[serde(rename = "PurchaseOrder")]
    pub purchase_order: Option<u64>,

    /// PurchaseOrder or SaleOrder or CancelTrade
    #[serde(rename = "SaleOrder")]
    pub sale_order: Option<u64>,

}


/// When written: when in a crew on someone else's ship, player switched crew role
#[derive(Clone, Debug, Deserialize)]
pub struct ChangeCrewRole {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Role")]
    pub role: String,

    /// Only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ClearImpound {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "System")]
    pub system: Option<String>,

}


/// When written: when a new discovery is added to the Codex
#[derive(Clone, Debug, Deserialize)]
pub struct CodexEntry {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: Option<u64>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "EntryID")]
    pub entry_id: u64,

    /// The IsNewEntry field is optional depending on the results of the scan
    #[serde(rename = "IsNewEntry")]
    pub is_new_entry: Option<bool>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    /// The NearestDestination is added if within 50km of a location listed in the navigation panel
    #[serde(rename = "NearestDestination")]
    pub nearest_destination: Option<String>,

    #[serde(rename = "NearestDestination_Localised")]
    pub nearest_destination_localised: Option<String>,

    /// The NewTraitsDiscovered field is optional depending on the results of the scan
    #[serde(rename = "NewTraitsDiscovered")]
    pub new_traits_discovered: Option<bool>,

    #[serde(rename = "Region")]
    pub region: String,

    #[serde(rename = "Region_Localised")]
    pub region_localised: Option<String>,

    #[serde(rename = "SubCategory")]
    pub sub_category: String,

    #[serde(rename = "SubCategory_Localised")]
    pub sub_category_localised: Option<String>,

    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    /// The Traits field is only available for entries that have unlocked traits
    #[serde(rename = "Traits")]
    pub traits: Option<Vec<String>>,

    #[serde(rename = "VoucherAmount")]
    pub voucher_amount: Option<u64>,

}


/// When Written: when scooping cargo from space or planet surface
#[derive(Clone, Debug, Deserialize)]
pub struct CollectCargo {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Stolen")]
    pub stolen: bool,

    #[serde(rename = "Type")]
    pub r#type: String,

    /// The localised value will be omitted if it is exactly the same as Type
    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When picking up items from the ground
#[derive(Clone, Debug, Deserialize)]
pub struct CollectItems {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// The localised value will be omitted if it is exactly the same as Name
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: u64,

    #[serde(rename = "Stolen")]
    pub stolen: bool,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When Written: Every 15 seconds while docked at a construction depot
#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationConstructionDepot {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ConstructionComplete")]
    pub construction_complete: bool,

    #[serde(rename = "ConstructionFailed")]
    pub construction_failed: bool,

    #[serde(rename = "ConstructionProgress")]
    pub construction_progress: f64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "ResourcesRequired")]
    pub resources_required: Vec<ColonisationConstructionDepotResourcesRequired>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationConstructionDepotResourcesRequired {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: String,

    #[serde(rename = "Payment")]
    pub payment: u64,

    #[serde(rename = "ProvidedAmount")]
    pub provided_amount: u64,

    #[serde(rename = "RequiredAmount")]
    pub required_amount: u64,

}


/// When Written: when contributing materials to a colonisation effort
#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationContribution {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Contributions")]
    pub contributions: Vec<ColonisationContributionContribution>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ColonisationContributionContribution {

    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: String,

}


/// When written: at the start of the LoadGame process. This is written before the inventory, loadout, etc
/// When written: If you should ever reset your game
#[derive(Clone, Debug, Deserialize)]
pub struct Commander {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FID")]
    pub fid: String,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: when a crime is recorded against the player
#[derive(Clone, Debug, Deserialize)]
pub struct CommitCrime {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Bounty")]
    pub bounty: Option<u64>,

    #[serde(rename = "CrimeType")]
    pub crime_type: String,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Fine")]
    pub fine: Option<u64>,

    #[serde(rename = "Victim")]
    pub victim: Option<String>,

    #[serde(rename = "Victim_Localised")]
    pub victim_localised: Option<String>,

}


/// When written: when the game retrieves info on community goals from the server, and the data has changed since last time. This event contains the current status of all community goals the player is currently subscribed to.
#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoal {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CurrentGoals")]
    pub current_goals: Vec<CommunityGoalCurrentGoal>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalCurrentGoal {

    /// If the community goal has reached the first success
    #[serde(rename = "Bonus")]
    pub bonus: Option<u64>,

    /// A unique ID number for the CG
    #[serde(rename = "CGID")]
    pub cgid: u64,

    #[serde(rename = "CurrentTotal")]
    pub current_total: u64,

    #[serde(rename = "Expiry", with = "crate::event::format::date")]
    pub expiry: DateTime<Utc>,

    #[serde(rename = "IsComplete")]
    pub is_complete: bool,

    #[serde(rename = "MarketName")]
    pub market_name: String,

    #[serde(rename = "NumContributors")]
    pub num_contributors: u64,

    #[serde(rename = "PlayerContribution")]
    pub player_contribution: u64,

    /// If the community goal is constructed with a fixed-size top rank (ie max reward for top 10 players)
    #[serde(rename = "PlayerInTopRank")]
    pub player_in_top_rank: Option<bool>,

    #[serde(rename = "PlayerPercentileBand")]
    pub player_percentile_band: u64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    /// If the community goal has reached the first success
    #[serde(rename = "TierReached")]
    pub tier_reached: Option<String>,

    /// A description for the CG
    #[serde(rename = "Title")]
    pub title: String,

    /// If the community goal is constructed with a fixed-size top rank (ie max reward for top 10 players)
    #[serde(rename = "TopRankSize")]
    pub top_rank_size: Option<u64>,

    #[serde(rename = "TopTier")]
    pub top_tier: CommunityGoalCurrentGoalTopTier,

}


#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalCurrentGoalTopTier {

    #[serde(rename = "Bonus")]
    pub bonus: String,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When Written: when receiving a reward for a community goal
#[derive(Clone, Debug, Deserialize)]
pub struct CommunityGoalReward {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CGID")]
    pub cgid: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Reward")]
    pub reward: u64,

    #[serde(rename = "System")]
    pub system: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ConflictFaction1 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "Stake_Localised")]
    pub stake_localised: Option<String>,

    #[serde(rename = "WonDays")]
    pub won_days: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ConflictFaction2 {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Stake")]
    pub stake: String,

    #[serde(rename = "WonDays")]
    pub won_days: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ConflictProgress {

    /// Progress towards the control threshold of 120k merits. can exceed 100%(1.0).
    #[serde(rename = "ConflictProgress")]
    pub conflict_progress: f64,

    #[serde(rename = "Power")]
    pub power: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Consumable {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: u64,

}


/// When written: if the journal file grows to 500k lines, we write this event, close the file, and start a new one. The new journalname will increase the partnumber, ex: {datetime}.02.log. The new journal will start with a Fileheader and continue.
#[derive(Clone, Debug, Deserialize)]
pub struct Continued {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Part")]
    pub part: u64,

}


/// This event is logged when the player creates a new suit loadout
#[derive(Clone, Debug, Deserialize)]
pub struct CreateSuitLoadout {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: u64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<SuitLoadoutModule>,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

}


/// W
#[derive(Clone, Debug, Deserialize)]
pub struct Crew {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Captain")]
    pub captain: String,

    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


/// When written: when changing the task assignment of a member of crew
#[derive(Clone, Debug, Deserialize)]
pub struct CrewAssign {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CrewID")]
    pub crew_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Role")]
    pub role: String,

}


/// When written: when dismissing a member of crew
#[derive(Clone, Debug, Deserialize)]
pub struct CrewFire {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CrewID")]
    pub crew_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: when engaging a new member of crew
#[derive(Clone, Debug, Deserialize)]
pub struct CrewHire {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CombatRank")]
    pub combat_rank: u64,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "CrewID")]
    pub crew_id: u64,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: when in multicrew, in Helm player's log, when a crew member launches a fighter
#[derive(Clone, Debug, Deserialize)]
pub struct CrewLaunchFighter {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Name of crew member launching in fighter
    #[serde(rename = "Crew")]
    pub crew: String,

    /// only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: bool,

}


/// When written: When another player joins your ship's crew
/// When written: When another player leaves your ship's crew
#[derive(Clone, Debug, Deserialize)]
pub struct CrewMember {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Player's commander name
    #[serde(rename = "Crew")]
    pub crew: String,

    /// only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


/// When written: in Multicrew, Helm's log, when another crew player changes role
#[derive(Clone, Debug, Deserialize)]
pub struct CrewMemberRoleChange {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Player's commander name
    #[serde(rename = "Crew")]
    pub crew: String,

    #[serde(rename = "Role")]
    pub role: String,

    /// only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


/// When written: when another player commits a crime against the current player
#[derive(Clone, Debug, Deserialize)]
pub struct CrimeVictim {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Fine or Bounty
    #[serde(rename = "Bounty")]
    pub bounty: Option<u64>,

    #[serde(rename = "CrimeType")]
    pub crime_type: String,

    /// Fine or Bounty
    #[serde(rename = "Fine")]
    pub fine: Option<u64>,

    #[serde(rename = "Offender")]
    pub offender: String,

}


/// When written: when a ship-launched fighter is destroyed
/// When written: when taking damage due to overheating
#[derive(Clone, Debug, Deserialize)]
pub struct Damage {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: Option<u64>,

}


/// When written: when scanning a data link
#[derive(Clone, Debug, Deserialize)]
pub struct DatalinkScan {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Message identifier from data link
    #[serde(rename = "Message")]
    pub message: String,

    /// Localized message from data link
    #[serde(rename = "Message_Localised")]
    pub message_localised: Option<String>,

}


/// When written: when scanning a datalink generates a reward
#[derive(Clone, Debug, Deserialize)]
pub struct DatalinkVoucher {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "PayeeFaction")]
    pub payee_faction: String,

    #[serde(rename = "Reward")]
    pub reward: u64,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

}


/// When Written: when delivering power micro-resources.
#[derive(Clone, Debug, Deserialize)]
pub struct DeliverPowerMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// The ID of the market where the delivery took place.
    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// Details of the micro-resources delivered.
    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<MicroResources>,

    /// The total number of micro-resources delivered.
    #[serde(rename = "TotalCount")]
    pub total_count: u64,

}


/// When written: player was killed
#[derive(Clone, Debug, Deserialize)]
pub struct Died {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// When killed by a single entity
    #[serde(rename = "KillerName")]
    pub killer_name: Option<String>,

    /// When killed by a single entity
    #[serde(rename = "KillerName_Localised")]
    pub killer_name_localised: Option<String>,

    /// When killed by a single entity
    #[serde(rename = "KillerRank")]
    pub killer_rank: Option<String>,

    /// When killed by a wing
    #[serde(rename = "Killers")]
    pub killers: Option<Vec<serde_json::Value>>,

    /// When killed by a single entity
    #[serde(rename = "KillerShip")]
    pub killer_ship: Option<String>,

}


/// When written: when using the discovery scanner, and new body discoveries are displayed in the cockpit info window. Note you can get two or three of these in a row, where some bodies are discovered by the automatic passive scan, before the active scan is complete.
#[derive(Clone, Debug, Deserialize)]
pub struct DiscoveryScan {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Number of new bodies discovered
    #[serde(rename = "Bodies")]
    pub bodies: u64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// This event is logged when the player steps out of a ship or SRV
#[derive(Clone, Debug, Deserialize)]
pub struct Disembark {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    /// player’s ship ID (if players own vessel)
    #[serde(rename = "ID")]
    pub id: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    /// true when getting out of another player’s vessel
    #[serde(rename = "Multicrew")]
    pub multicrew: bool,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    /// true if getting out of SRV, false if getting out of a ship
    #[serde(rename = "SRV")]
    pub srv: bool,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    /// If at a station
    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    /// If at a station
    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    /// true when getting out of a taxi transposrt ship
    #[serde(rename = "Taxi")]
    pub taxi: bool,

}


/// When written: when landing at landing pad in a space station, outpost, or surface settlement
#[derive(Clone, Debug, Deserialize)]
pub struct Docked {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Only if any fine is active
    #[serde(rename = "ActiveFine")]
    pub active_fine: Option<bool>,

    /// true (only if landing with breached cockpit)
    #[serde(rename = "CockpitBreach")]
    pub cockpit_breach: Option<bool>,

    #[serde(rename = "DistFromStarLS")]
    pub dist_from_star_ls: f64,

    #[serde(rename = "LandingPads")]
    pub landing_pads: Option<LandingPads>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

    /// Only if station has multiple economies
    #[serde(rename = "StationEconomies")]
    pub station_economies: Option<Vec<NameAndProportion>>,

    /// Only if station has a single economy
    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    /// Only if station has a single economy
    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    #[serde(rename = "StationFaction")]
    pub station_faction: SystemFaction,

    #[serde(rename = "StationGovernment")]
    pub station_government: String,

    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    /// StationServices can include: Dock, Autodock, BlackMarket, Commodities, Contacts, Exploration, Initiatives, Missions, Outfitting, CrewLounge, Rearm, Refuel, Repair, Shipyard, Tuning, Workshop, MissionsGenerated, Facilitator, Research, FlightController, StationOperations, OnDockMission, Powerplay, SearchAndRescue. New in v3.7: shop, carriermanagement, carrierfuel, carriervendor, livery, modulepacks, voucherredemption
    #[serde(rename = "StationServices")]
    pub station_services: Vec<String>,

    #[serde(rename = "StationState")]
    pub station_state: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    /// Only if docking when wanted locally
    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}


/// When written: when docking a fighter back with the mothership
#[derive(Clone, Debug, Deserialize)]
pub struct DockFighter {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: u64,

}


/// When written: when the player cancels a docking request
#[derive(Clone, Debug, Deserialize)]
pub struct DockingCancelled {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}


/// When written: when the station denies a docking request
#[derive(Clone, Debug, Deserialize)]
pub struct DockingDenied {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Reason")]
    pub reason: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}


/// When written: when a docking request is granted
#[derive(Clone, Debug, Deserialize)]
pub struct DockingGranted {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LandingPad")]
    pub landing_pad: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}


/// When written: when the player requests docking at a station
#[derive(Clone, Debug, Deserialize)]
pub struct DockingRequested {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LandingPads")]
    pub landing_pads: Option<LandingPads>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}


/// When written: when a docking request has timed out
#[derive(Clone, Debug, Deserialize)]
pub struct DockingTimeout {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

}


/// When discarding on-foot items from the player's inventory
#[derive(Clone, Debug, Deserialize)]
pub struct DropItems {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When exiting a shuttle dropship at a conflict zone
#[derive(Clone, Debug, Deserialize)]
pub struct DropshipDeploy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When cargo is ejected
#[derive(Clone, Debug, Deserialize)]
pub struct EjectCargo {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Abandoned")]
    pub abandoned: bool,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    /// If the cargo is related to powerplay delivery from outlying systems back to the centre. Starsystem name.
    #[serde(rename = "PowerplayOrigin")]
    pub powerplay_origin: Option<String>,

    #[serde(rename = "Type")]
    pub r#type: String,

    /// The localised value will be omitted if it is exactly the same as Type
    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// This event is logged when a player (on foot) gets into a ship or SRV
#[derive(Clone, Debug, Deserialize)]
pub struct Embark {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "Crew")]
    pub crew: Option<Vec<EmbarkCrew>>,

    /// player’s ship ID (if players own vessel)
    #[serde(rename = "ID")]
    pub id: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    /// true when boarding another player’s vessel
    #[serde(rename = "Multicrew")]
    pub multicrew: bool,

    #[serde(rename = "OnPlanet")]
    pub on_planet: bool,

    #[serde(rename = "OnStation")]
    pub on_station: bool,

    /// true if getting into SRV, false if getting into a ship
    #[serde(rename = "SRV")]
    pub srv: bool,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    /// if at a station
    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    /// if at a station
    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    /// true when boarding a taxi transport ship
    #[serde(rename = "Taxi")]
    pub taxi: bool,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EmbarkCrew {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Role")]
    pub role: String,

}


/// When written: on a clean shutdown of the game
/// When written: this player has left a wing
/// When Written: when a colonisation beacon is deployed
/// When written: when heat exceeds 100%
/// When written: when the player's ship systems shut down (eg in a Thargoid encounter)
/// When written: when the self destruct function is used
#[derive(Clone, Debug, Deserialize)]
pub struct Empty {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

}


/// When written: when the captain in multicrew disbands the crew
#[derive(Clone, Debug, Deserialize)]
pub struct EndCrewSession {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// true if crew disbanded as a result of a crime in a lawful session
    #[serde(rename = "OnCrime")]
    pub on_crime: bool,

    /// only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


/// When written: when offering items cash or bounties to an Engineer to gain access
#[derive(Clone, Debug, Deserialize)]
pub struct EngineerContribution {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: u64,

    #[serde(rename = "Material")]
    pub material: Option<String>,

    #[serde(rename = "Material_Localised")]
    pub material_localised: Option<String>,

    /// Quantity offered this time
    #[serde(rename = "Quantity")]
    pub quantity: u64,

    /// Total amount donated
    #[serde(rename = "TotalQuantity")]
    pub total_quantity: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When Written: when requesting an engineer upgrade
#[derive(Clone, Debug, Deserialize)]
pub struct EngineerCraft {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// when applying a new effect
    #[serde(rename = "ApplyExperimentalEffect")]
    pub apply_experimental_effect: Option<String>,

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: u64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    #[serde(rename = "EngineerID")]
    pub engineer_id: u64,

    #[serde(rename = "ExperimentalEffect")]
    pub experimental_effect: Option<String>,

    #[serde(rename = "ExperimentalEffect_Localised")]
    pub experimental_effect_localised: Option<String>,

    #[serde(rename = "Ingredients")]
    pub ingredients: Vec<Material>,

    #[serde(rename = "Level")]
    pub level: u64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<EngineerCraftModifier>,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Quality")]
    pub quality: f64,

    #[serde(rename = "Slot")]
    pub slot: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerCraftModifier {

    #[serde(rename = "Label")]
    pub label: String,

    /// Either 0 or 1
    #[serde(rename = "LessIsGood")]
    pub less_is_good: u64,

    #[serde(rename = "OriginalValue")]
    pub original_value: Option<f64>,

    /// Either Value or ValueStr is used. These modification types have string values: WeaponMode, DamageType, CabinClass.
    #[serde(rename = "Value")]
    pub value: Option<f64>,

    /// Either Value or ValueStr is used. These modification types have string values: WeaponMode, DamageType, CabinClass.
    #[serde(rename = "ValueStr")]
    pub value_str: Option<String>,

    #[serde(rename = "ValueStr_Localised")]
    pub value_str_localised: Option<String>,

}


/// When written: when converting a pre-2.4 engineered module. This is generated when converting, or previewing a conversion of a legacy module to the new system.
#[derive(Clone, Debug, Deserialize)]
pub struct EngineerLegacyConvert {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: u64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: u64,

    /// To indicate whether this entry has been generated from a conversion, or just a preview.
    #[serde(rename = "IsPreview")]
    pub is_preview: bool,

    #[serde(rename = "Level")]
    pub level: u64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<EngineerLegacyConvertModifier>,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Quality")]
    pub quality: f64,

    #[serde(rename = "Slot")]
    pub slot: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerLegacyConvertModifier {

    #[serde(rename = "Label")]
    pub label: String,

    #[serde(rename = "LessIsGood")]
    pub less_is_good: u64,

    #[serde(rename = "OriginalValue")]
    pub original_value: f64,

    #[serde(rename = "Value")]
    pub value: f64,

}


/// When Written: when a player increases their access to an engineer
#[derive(Clone, Debug, Deserialize)]
pub struct EngineerProgress {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Update for one engineer
    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    /// Update for one engineer
    #[serde(rename = "EngineerID")]
    pub engineer_id: Option<u64>,

    /// Summary at startup
    #[serde(rename = "Engineers")]
    pub engineers: Option<Vec<EngineerProgressEngineer>>,

    /// Update for one engineer
    #[serde(rename = "Progress")]
    pub progress: Option<String>,

    /// Update for one engineer
    #[serde(rename = "Rank")]
    pub rank: Option<u64>,

    /// Uncertain whether this is actually logged
    #[serde(rename = "RankProgress")]
    pub rank_progress: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct EngineerProgressEngineer {

    #[serde(rename = "Engineer")]
    pub engineer: String,

    #[serde(rename = "EngineerID")]
    pub engineer_id: u64,

    #[serde(rename = "Progress")]
    pub progress: String,

    #[serde(rename = "Rank")]
    pub rank: Option<u64>,

    #[serde(rename = "RankProgress")]
    pub rank_progress: Option<u64>,

}


/// When written: Player has escaped interdiction
#[derive(Clone, Debug, Deserialize)]
pub struct EscapeInterdiction {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Interdictor")]
    pub interdictor: String,

    #[serde(rename = "Interdictor_Localised")]
    pub interdictor_localised: Option<String>,

    /// Whether player or npc
    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    /// Whether thargoid
    #[serde(rename = "IsThargoid")]
    pub is_thargoid: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FactionActiveState {

    #[serde(rename = "State")]
    pub state: String,

}


/// When written: Player rewarded for taking part in a combat zone
#[derive(Clone, Debug, Deserialize)]
pub struct FactionKillBond {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AwardingFaction")]
    pub awarding_faction: String,

    #[serde(rename = "AwardingFaction_Localised")]
    pub awarding_faction_localised: Option<String>,

    #[serde(rename = "Reward")]
    pub reward: u64,

    #[serde(rename = "VictimFaction")]
    pub victim_faction: String,

    #[serde(rename = "VictimFaction_Localised")]
    pub victim_faction_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FactionRecoveringState {

    #[serde(rename = "State")]
    pub state: String,

    #[serde(rename = "Trend")]
    pub trend: u64,

}


/// When trading with a Fleet Carrier Bartender for materials, a file is written with the pricelist to FCMaterials.json
#[derive(Clone, Debug, Deserialize)]
pub struct FCMaterials {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierID")]
    pub carrier_id: String,

    #[serde(rename = "CarrierName")]
    pub carrier_name: String,

    /// Only included in FCMaterials.json
    #[serde(rename = "Items")]
    pub items: Option<Vec<FCMaterialsItem>>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FCMaterialsItem {

    #[serde(rename = "Demand")]
    pub demand: u64,

    #[serde(rename = "id")]
    pub id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: u64,

    #[serde(rename = "Stock")]
    pub stock: u64,

}


/// When written: when requesting a module is transferred from storage at another station
#[derive(Clone, Debug, Deserialize)]
pub struct FetchRemoteModule {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ServerId")]
    pub server_id: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: u64,

    #[serde(rename = "StoredItem")]
    pub stored_item: String,

    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

    #[serde(rename = "TransferCost")]
    pub transfer_cost: u64,

    /// In seconds
    #[serde(rename = "TransferTime")]
    pub transfer_time: u64,

}


/// When written: when a ship's fighter is rebuilt in the hangar
#[derive(Clone, Debug, Deserialize)]
pub struct FighterRebuilt {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: u64,

    #[serde(rename = "Loadout")]
    pub loadout: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Fileheader {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Game build number
    #[serde(rename = "build")]
    pub build: String,

    /// Which version of the game produced the log (will indicate if beta)
    #[serde(rename = "gameversion")]
    pub gameversion: String,

    /// The language code
    #[serde(rename = "language")]
    pub language: String,

    /// True for gameversions >= 4.0, both Horizons and Odyssey.
    #[serde(rename = "Odyssey")]
    pub odyssey: bool,

    /// The file part number
    #[serde(rename = "part")]
    pub part: u64,

}


/// When written: when receiving information about a change in a friend's status. Also written at startup for friends who are already online.
#[derive(Clone, Debug, Deserialize)]
pub struct Friends {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// the friend's commander name
    #[serde(rename = "Name")]
    pub name: String,

    /// One of the following: Requested, Declined, Added, Lost, Offline, Online
    #[serde(rename = "Status")]
    pub status: String,

}


/// When written: when jumping from one star system to another
#[derive(Clone, Debug, Deserialize)]
pub struct FSDJump {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    /// Whether FSD boost was used
    #[serde(rename = "BoostUsed")]
    pub boost_used: Option<u64>,

    #[serde(rename = "Conflicts")]
    pub conflicts: Option<Vec<FSDJumpConflict>>,

    /// Controlling power for the system
    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    #[serde(rename = "Factions")]
    pub factions: Option<Vec<FSDJumpFaction>>,

    #[serde(rename = "FuelLevel")]
    pub fuel_level: f64,

    #[serde(rename = "FuelUsed")]
    pub fuel_used: f64,

    /// Distance jumped
    #[serde(rename = "JumpDist")]
    pub jump_dist: f64,

    /// True when inside another player's ship
    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "Population")]
    pub population: u64,

    /// When the system is unoccupied and 1 or more powers are fighting for control by reaching 120k merits.
    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Option<Vec<ConflictProgress>>,

    /// Powerplay state for the system.
    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    /// The current amount of control within the specific powerplay state
    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    /// Merits gained towards reinforcing the system and increasing the system strength
    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<u64>,

    /// Merits gained towards undermining the system and decreasing the system strength
    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<u64>,

    /// If the player is pledged to a Power in Powerplay, and the star system is involved in powerplay
    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    /// star position, as a Json array [x, y, z], relative to Sol in Ly
    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    /// Name of destination starsystem
    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    /// System controlling faction
    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<SystemFaction>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    /// True when inside a taxi transport ship
    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    /// Thargoid war information
    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<ThargoidWar>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpConflict {

    #[serde(rename = "Faction1")]
    pub faction1: ConflictFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: ConflictFaction1,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "WarType")]
    pub war_type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct FSDJumpFaction {

    /// Array with State names (Note active states do not have a Trend value)
    #[serde(rename = "ActiveStates")]
    pub active_states: Option<Vec<FactionActiveState>>,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    /// If player squadron faction, and this is happiest system
    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    /// Happiness values are: Elated, Happy, Discontented, Unhappy, Despondent
    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    /// If player squadron faction, and this is home system
    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "Name")]
    pub name: String,

    /// Array (if any) with State name and Trend value
    #[serde(rename = "PendingStates")]
    pub pending_states: Option<Vec<FactionRecoveringState>>,

    /// Array (if any) with State name and Trend value
    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Option<Vec<FactionRecoveringState>>,

    /// If player is in squadron aligned to this faction
    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

}


/// When written: when selecting a star system to jump to. When following a multi-jump route, this will typically appear for the next star, during a jump, ie after StartJump but before the FSDJump
#[derive(Clone, Debug, Deserialize)]
pub struct FSDTarget {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "RemainingJumpsInRoute")]
    pub remaining_jumps_in_route: Option<u64>,

    #[serde(rename = "StarClass")]
    pub star_class: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When written: after having identified all bodies in the system
#[derive(Clone, Debug, Deserialize)]
pub struct FSSAllBodiesFound {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

}


/// This event is written when completing a Full Spectrum Scan of a starsystem, to list the number of SAA signals found in the system (as shown in-game in the top-right panel)
#[derive(Clone, Debug, Deserialize)]
pub struct FSSBodySignals {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "Signals")]
    pub signals: Vec<SAASignals>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When written: when performing a full system scan (Honk)
#[derive(Clone, Debug, Deserialize)]
pub struct FSSDiscoveryScan {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyCount")]
    pub body_count: u64,

    #[serde(rename = "NonBodyCount")]
    pub non_body_count: u64,

    #[serde(rename = "Progress")]
    pub progress: f64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

}


/// When written: when zooming in on a signal using the FSS scanner
#[derive(Clone, Debug, Deserialize)]
pub struct FSSSignalDiscovered {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// If it is a station
    #[serde(rename = "IsStation")]
    pub is_station: Option<bool>,

    /// the opposing power, if relevant
    #[serde(rename = "OpposingPower")]
    pub opposing_power: Option<String>,

    #[serde(rename = "SignalName")]
    pub signal_name: String,

    #[serde(rename = "SignalName_Localised")]
    pub signal_name_localised: Option<String>,

    #[serde(rename = "SignalType")]
    pub signal_type: Option<String>,

    /// the minor faction, if relevant
    #[serde(rename = "SpawningFaction")]
    pub spawning_faction: Option<String>,

    #[serde(rename = "SpawningFaction_Localised")]
    pub spawning_faction_localised: Option<String>,

    /// the spawning power, if relevant
    #[serde(rename = "SpawningPower")]
    pub spawning_power: Option<String>,

    /// the BGS state that triggered this event, if relevant
    #[serde(rename = "SpawningState")]
    pub spawning_state: Option<String>,

    #[serde(rename = "SpawningState_Localised")]
    pub spawning_state_localised: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    /// If a Unidentified Signal Source(USS) Event
    #[serde(rename = "ThreatLevel")]
    pub threat_level: Option<u64>,

    /// remaining lifetime in seconds, if relevant
    #[serde(rename = "TimeRemaining")]
    pub time_remaining: Option<f64>,

    /// If a Unidentified Signal Source(USS) Event
    #[serde(rename = "USSType")]
    pub uss_type: Option<String>,

    /// If a Unidentified Signal Source(USS) Event
    #[serde(rename = "USSType_Localised")]
    pub uss_type_localised: Option<String>,

}


/// When written: when scooping fuel from a star
#[derive(Clone, Debug, Deserialize)]
pub struct FuelScoop {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Tons fuel scooped
    #[serde(rename = "Scooped")]
    pub scooped: f64,

    /// Total fuel level after scooping
    #[serde(rename = "Total")]
    pub total: f64,

}


/// When a holoscreen is hacked
#[derive(Clone, Debug, Deserialize)]
pub struct HoloscreenHacked {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// The power that now owns the holo screen
    #[serde(rename = "PowerAfter")]
    pub power_after: String,

    /// The power that owned the holo screen
    #[serde(rename = "PowerBefore")]
    pub power_before: String,

}


/// When written: when hull health drops below a threshold (20% steps)
#[derive(Clone, Debug, Deserialize)]
pub struct HullDamage {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// True for ship-launched fighter
    #[serde(rename = "Fighter")]
    pub fighter: Option<bool>,

    #[serde(rename = "Health")]
    pub health: f64,

    /// True if player is piloting the ship/fighter taking damage
    #[serde(rename = "PlayerPilot")]
    pub player_pilot: bool,

}


/// When written: player was interdicted by player or npc
#[derive(Clone, Debug, Deserialize)]
pub struct Interdicted {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// If player
    #[serde(rename = "CombatRank")]
    pub combat_rank: Option<u64>,

    /// If npc
    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    #[serde(rename = "Interdictor")]
    pub interdictor: Option<String>,

    #[serde(rename = "Interdictor_Localised")]
    pub interdictor_localised: Option<String>,

    /// Whether player or npc
    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    /// Whether thargoid
    #[serde(rename = "IsThargoid")]
    pub is_thargoid: Option<bool>,

    /// If npc is working for a power
    #[serde(rename = "Power")]
    pub power: Option<String>,

    #[serde(rename = "Submitted")]
    pub submitted: bool,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Interdiction {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// If a player
    #[serde(rename = "CombatRank")]
    pub combat_rank: Option<u64>,

    /// If npc
    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    /// Victim pilot name
    #[serde(rename = "Interdicted")]
    pub interdicted: String,

    /// Victim pilot name
    #[serde(rename = "Interdicted_Localised")]
    pub interdicted_localised: Option<String>,

    /// Whether player or npc
    #[serde(rename = "IsPlayer")]
    pub is_player: bool,

    /// If npc is working for a power
    #[serde(rename = "Power")]
    pub power: Option<String>,

    #[serde(rename = "Submitted")]
    pub submitted: Option<bool>,

    #[serde(rename = "Success")]
    pub success: bool,

}


/// Lists the contents of the backpack, in a separate backpack.json file
/// Lists the contents of the ship locker, eg at startup. The full contents are written to a separate file, ShipLocker.json. The full list is also written into the journal at startup (if in a ship) and when boarding a ship. The shiplocker.json file is updated when the locker contents are changed.
#[derive(Clone, Debug, Deserialize)]
pub struct Inventory {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Components")]
    pub components: Option<Vec<Item>>,

    #[serde(rename = "Consumables")]
    pub consumables: Option<Vec<Consumable>>,

    #[serde(rename = "Data")]
    pub data: Option<Vec<Item>>,

    #[serde(rename = "Items")]
    pub items: Option<Vec<Item>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Item {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "OwnerID")]
    pub owner_id: u64,

}


/// When written: when enough material has been collected from a solar jet code (at a white dwarf or neutron star) for a jump boost
#[derive(Clone, Debug, Deserialize)]
pub struct JetConeBoost {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BoostValue")]
    pub boost_value: f64,

}


/// When written: when passing through the jet code from a white dwarf or neutron star has caused damage to a ship module
#[derive(Clone, Debug, Deserialize)]
pub struct JetConeDamage {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Module")]
    pub module: String,

    #[serde(rename = "Module_Localised")]
    pub module_localised: Option<String>,

}


/// When written: When you force another player to leave your ship's crew
#[derive(Clone, Debug, Deserialize)]
pub struct KickCrewMember {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Crew")]
    pub crew: String,

    /// True if player is automatically kicked for committing a crime in a lawful session
    #[serde(rename = "OnCrime")]
    pub on_crime: bool,

    /// only from Odyssey build
    #[serde(rename = "Telepresence")]
    pub telepresence: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LandingPads {

    #[serde(rename = "Large")]
    pub large: u64,

    #[serde(rename = "Medium")]
    pub medium: u64,

    #[serde(rename = "Small")]
    pub small: u64,

}


/// When written: when using any type of drone/limpet
#[derive(Clone, Debug, Deserialize)]
pub struct LaunchDrone {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When written: when launching a fighter
#[derive(Clone, Debug, Deserialize)]
pub struct LaunchFighter {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: u64,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    /// Whether player is controlling the fighter from launch
    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

}


/// When written: deploying the SRV from a ship onto planet surface
#[derive(Clone, Debug, Deserialize)]
pub struct LaunchSRV {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: u64,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

    #[serde(rename = "SRVType")]
    pub srv_type: Option<String>,

    #[serde(rename = "SRVType_Localised")]
    pub srv_type_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LoadGame {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "build")]
    pub build: Option<String>,

    #[serde(rename = "Commander")]
    pub commander: String,

    /// Current credit balance
    #[serde(rename = "Credits")]
    pub credits: u64,

    #[serde(rename = "FID")]
    pub fid: String,

    /// Size of main tank
    #[serde(rename = "FuelCapacity")]
    pub fuel_capacity: Option<f64>,

    /// Current fuel level
    #[serde(rename = "FuelLevel")]
    pub fuel_level: Option<f64>,

    /// Open, Solo or Group
    #[serde(rename = "GameMode")]
    pub game_mode: Option<String>,

    #[serde(rename = "gameversion")]
    pub gameversion: Option<String>,

    /// name of group (if in a group session)
    #[serde(rename = "Group")]
    pub group: Option<String>,

    /// Whether Game has Horizons enabled.
    #[serde(rename = "Horizons")]
    pub horizons: bool,

    #[serde(rename = "language")]
    pub language: Option<String>,

    /// Current loan
    #[serde(rename = "Loan")]
    pub loan: u64,

    /// Whether Game has Odyssey enabled. Only present if in Odyssey game mode
    #[serde(rename = "Odyssey")]
    pub odyssey: Option<bool>,

    #[serde(rename = "Ship")]
    pub ship: Option<String>,

    #[serde(rename = "Ship_Localised")]
    pub ship_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: Option<u64>,

    /// User-defined ship ID string
    #[serde(rename = "ShipIdent")]
    pub ship_ident: Option<String>,

    /// User-defined ship name
    #[serde(rename = "ShipName")]
    pub ship_name: Option<String>,

    /// only present if starting dead: see Resurrect
    #[serde(rename = "StartDead")]
    pub start_dead: Option<bool>,

    /// Only present if landed
    #[serde(rename = "StartLanded")]
    pub start_landed: Option<bool>,

}


/// When written: at startup, when loading from main menu, or when switching ships, or after changing the ship in Outfitting, or when docking SRV back in mothership
#[derive(Clone, Debug, Deserialize)]
pub struct Loadout {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CargoCapacity")]
    pub cargo_capacity: u64,

    #[serde(rename = "FuelCapacity")]
    pub fuel_capacity: LoadoutFuelCapacity,

    /// If wanted at startup
    #[serde(rename = "Hot")]
    pub hot: Option<bool>,

    #[serde(rename = "HullHealth")]
    pub hull_health: f64,

    #[serde(rename = "HullValue")]
    pub hull_value: Option<u64>,

    /// based on zero cargo, and just enough fuel for 1 jump
    #[serde(rename = "MaxJumpRange")]
    pub max_jump_range: f64,

    #[serde(rename = "Modules")]
    pub modules: Vec<LoadoutModule>,

    #[serde(rename = "ModulesValue")]
    pub modules_value: Option<u64>,

    #[serde(rename = "Rebuy")]
    pub rebuy: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    /// Ship id number (indicates which of your ships you are in)
    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    /// User-defined ship ID string
    #[serde(rename = "ShipIdent")]
    pub ship_ident: String,

    /// User-defined ship name
    #[serde(rename = "ShipName")]
    pub ship_name: String,

    /// Mass of Hull and Modules, excludes fuel and cargo
    #[serde(rename = "UnladenMass")]
    pub unladen_mass: f64,

}


/// This event is logged when a player adds a weapon to a suit loadout
/// This event is logged when a player removes a weapon from a suit loadout
#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutEquipModule {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Class")]
    pub class: u64,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: u64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    /// New weapon or other item added to loadout
    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: u64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutFuelCapacity {

    #[serde(rename = "Main")]
    pub main: f64,

    #[serde(rename = "Reserve")]
    pub reserve: f64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModule {

    /// If relevant. For a passenger cabin, AmmoInClip holds the number of places in the cabin.
    #[serde(rename = "AmmoInClip")]
    pub ammo_in_clip: Option<u64>,

    /// if relevant
    #[serde(rename = "AmmoInHopper")]
    pub ammo_in_hopper: Option<u64>,

    /// If engineered
    #[serde(rename = "Engineering")]
    pub engineering: Option<LoadoutModuleEngineering>,

    #[serde(rename = "Health")]
    pub health: f64,

    /// Module name - lowercase
    #[serde(rename = "Item")]
    pub item: String,

    #[serde(rename = "On")]
    pub on: bool,

    #[serde(rename = "Priority")]
    pub priority: u64,

    /// Slot name
    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "Value")]
    pub value: Option<u64>,

}


/// If engineered
#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModuleEngineering {

    #[serde(rename = "BlueprintID")]
    pub blueprint_id: u64,

    #[serde(rename = "BlueprintName")]
    pub blueprint_name: String,

    #[serde(rename = "Engineer")]
    pub engineer: Option<String>,

    #[serde(rename = "EngineerID")]
    pub engineer_id: u64,

    #[serde(rename = "ExperimentalEffect")]
    pub experimental_effect: Option<String>,

    #[serde(rename = "ExperimentalEffect_Localised")]
    pub experimental_effect_localised: Option<String>,

    #[serde(rename = "Level")]
    pub level: u64,

    #[serde(rename = "Modifiers")]
    pub modifiers: Vec<LoadoutModuleEngineeringModifier>,

    #[serde(rename = "Quality")]
    pub quality: f64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LoadoutModuleEngineeringModifier {

    #[serde(rename = "Label")]
    pub label: String,

    /// Either 0 or 1
    #[serde(rename = "LessIsGood")]
    pub less_is_good: Option<u64>,

    #[serde(rename = "OriginalValue")]
    pub original_value: Option<f64>,

    /// Either Value or ValueStr is used. These modification types have string values: WeaponMode, DamageType, CabinClass.
    #[serde(rename = "Value")]
    pub value: Option<f64>,

    /// Either Value or ValueStr is used. These modification types have string values: WeaponMode, DamageType, CabinClass.
    #[serde(rename = "ValueStr")]
    pub value_str: Option<String>,

    #[serde(rename = "ValueStr_Localised")]
    pub value_str_localised: Option<String>,

}


/// When written: at startup, or when being resurrected at a station
#[derive(Clone, Debug, Deserialize)]
pub struct Location {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "Conflicts")]
    pub conflicts: Option<Vec<LocationConflict>>,

    /// Controlling power for the system
    #[serde(rename = "ControllingPower")]
    pub controlling_power: Option<String>,

    /// If not close to main star
    #[serde(rename = "DistFromStarLS")]
    pub dist_from_star_ls: Option<f64>,

    /// True if ship is docked
    #[serde(rename = "Docked")]
    pub docked: bool,

    #[serde(rename = "Factions")]
    pub factions: Option<Vec<LocationFaction>>,

    #[serde(rename = "InSRV")]
    pub in_srv: Option<bool>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    /// True when inside another player's ship
    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "OnFoot")]
    pub on_foot: Option<bool>,

    #[serde(rename = "Population")]
    pub population: u64,

    /// When the system is unoccupied and 1 or more powers are fighting for control by reaching 120k merits.
    #[serde(rename = "PowerplayConflictProgress")]
    pub powerplay_conflict_progress: Option<Vec<ConflictProgress>>,

    /// Powerplay state for the system.
    #[serde(rename = "PowerplayState")]
    pub powerplay_state: Option<String>,

    /// The current amount of control within the specific powerplay state
    #[serde(rename = "PowerplayStateControlProgress")]
    pub powerplay_state_control_progress: Option<f64>,

    /// Merits gained towards reinforcing the system and increasing the system strength
    #[serde(rename = "PowerplayStateReinforcement")]
    pub powerplay_state_reinforcement: Option<u64>,

    /// Merits gained towards undermining the system and decreasing the system strength
    #[serde(rename = "PowerplayStateUndermining")]
    pub powerplay_state_undermining: Option<u64>,

    /// If the player is pledged to a Power in Powerplay, and the star system is involved in powerplay
    #[serde(rename = "Powers")]
    pub powers: Option<Vec<String>>,

    /// star position, as a Json array [x, y, z], relative to Sol in Ly
    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    /// Name of starsystem
    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationAllegiance")]
    pub station_allegiance: Option<String>,

    /// If starting docked in a station
    #[serde(rename = "StationEconomies")]
    pub station_economies: Option<Vec<NameAndProportion>>,

    /// If starting docked in a station
    #[serde(rename = "StationEconomy")]
    pub station_economy: Option<String>,

    /// If starting docked in a station
    #[serde(rename = "StationEconomy_Localised")]
    pub station_economy_localised: Option<String>,

    /// If starting docked in a station
    #[serde(rename = "StationFaction")]
    pub station_faction: Option<SystemFaction>,

    /// If starting docked in a station
    #[serde(rename = "StationGovernment")]
    pub station_government: Option<String>,

    /// If starting docked in a station
    #[serde(rename = "StationGovernment_Localised")]
    pub station_government_localised: Option<String>,

    #[serde(rename = "StationName")]
    pub station_name: Option<String>,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    /// If starting docked in a station
    #[serde(rename = "StationServices")]
    pub station_services: Option<Vec<String>>,

    #[serde(rename = "StationType")]
    pub station_type: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "SystemAllegiance")]
    pub system_allegiance: String,

    #[serde(rename = "SystemEconomy")]
    pub system_economy: String,

    #[serde(rename = "SystemEconomy_Localised")]
    pub system_economy_localised: Option<String>,

    /// System controlling faction
    #[serde(rename = "SystemFaction")]
    pub system_faction: Option<SystemFaction>,

    #[serde(rename = "SystemGovernment")]
    pub system_government: String,

    #[serde(rename = "SystemGovernment_Localised")]
    pub system_government_localised: Option<String>,

    #[serde(rename = "SystemSecondEconomy")]
    pub system_second_economy: String,

    #[serde(rename = "SystemSecondEconomy_Localised")]
    pub system_second_economy_localised: Option<String>,

    #[serde(rename = "SystemSecurity")]
    pub system_security: String,

    #[serde(rename = "SystemSecurity_Localised")]
    pub system_security_localised: Option<String>,

    /// True when inside a taxi transport ship
    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    /// Thargoid war information
    #[serde(rename = "ThargoidWar")]
    pub thargoid_war: Option<ThargoidWar>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LocationConflict {

    #[serde(rename = "Faction1")]
    pub faction1: ConflictFaction1,

    #[serde(rename = "Faction2")]
    pub faction2: ConflictFaction2,

    #[serde(rename = "Status")]
    pub status: String,

    #[serde(rename = "WarType")]
    pub war_type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct LocationFaction {

    /// Array with State names (Note active states do not have a Trend value)
    #[serde(rename = "ActiveStates")]
    pub active_states: Option<Vec<FactionActiveState>>,

    #[serde(rename = "Allegiance")]
    pub allegiance: String,

    #[serde(rename = "FactionState")]
    pub faction_state: String,

    #[serde(rename = "Government")]
    pub government: String,

    /// If player squadron faction, and this is happiest system
    #[serde(rename = "HappiestSystem")]
    pub happiest_system: Option<bool>,

    #[serde(rename = "Happiness")]
    pub happiness: String,

    /// Happiness values are: Elated, Happy, Discontented, Unhappy, Despondent
    #[serde(rename = "Happiness_Localised")]
    pub happiness_localised: Option<String>,

    /// If player squadron faction, and this is home system
    #[serde(rename = "HomeSystem")]
    pub home_system: Option<bool>,

    #[serde(rename = "Influence")]
    pub influence: f64,

    #[serde(rename = "MyReputation")]
    pub my_reputation: f64,

    #[serde(rename = "Name")]
    pub name: String,

    /// Array (if any) with State name and Trend value
    #[serde(rename = "PendingStates")]
    pub pending_states: Option<Vec<FactionRecoveringState>>,

    /// Array (if any) with State name and Trend value
    #[serde(rename = "RecoveringStates")]
    pub recovering_states: Option<Vec<FactionRecoveringState>>,

    /// If player is in squadron aligned to this faction
    #[serde(rename = "SquadronFaction")]
    pub squadron_faction: Option<bool>,

}


/// When written: when accessing the commodity market in a station. A separate file Market.json is written to the same folder as the journal, containing full market price info.
#[derive(Clone, Debug, Deserialize)]
pub struct Market {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CarrierDockingAccess")]
    pub carrier_docking_access: Option<String>,

    /// When written to Market.json
    #[serde(rename = "Items")]
    pub items: Option<Vec<MarketItem>>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

}


/// When Written: when purchasing goods in the market
#[derive(Clone, Debug, Deserialize)]
pub struct MarketBuy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "TotalCost")]
    pub total_cost: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

    /// The localised value will be omitted if it is exactly the same as Type
    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MarketItem {

    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "Consumer")]
    pub consumer: bool,

    #[serde(rename = "Demand")]
    pub demand: u64,

    #[serde(rename = "DemandBracket")]
    pub demand_bracket: u64,

    #[serde(rename = "id")]
    pub id: u64,

    #[serde(rename = "MeanPrice")]
    pub mean_price: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Producer")]
    pub producer: bool,

    #[serde(rename = "Rare")]
    pub rare: bool,

    #[serde(rename = "SellPrice")]
    pub sell_price: u64,

    #[serde(rename = "Stock")]
    pub stock: u64,

    #[serde(rename = "StockBracket")]
    pub stock_bracket: u64,

}


/// When Written: when selling goods in the market
#[derive(Clone, Debug, Deserialize)]
pub struct MarketSell {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Average price paid
    #[serde(rename = "AvgPricePaid")]
    pub avg_price_paid: u64,

    /// Whether selling in a black market
    #[serde(rename = "BlackMarket")]
    pub black_market: Option<bool>,

    #[serde(rename = "Count")]
    pub count: u64,

    /// Whether goods are illegal here
    #[serde(rename = "IllegalGoods")]
    pub illegal_goods: Option<bool>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// Price per unit
    #[serde(rename = "SellPrice")]
    pub sell_price: u64,

    /// Whether goods were stolen
    #[serde(rename = "StolenGoods")]
    pub stolen_goods: Option<bool>,

    /// Total sale value
    #[serde(rename = "TotalSale")]
    pub total_sale: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

    /// The localised value will be omitted if it is exactly the same as Type
    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: when putting multiple modules into storage
#[derive(Clone, Debug, Deserialize)]
pub struct MassModuleStore {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Items")]
    pub items: Vec<MassModuleStoreItem>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MassModuleStoreItem {

    /// Only if modifications are present
    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    /// If there is a fine/bounty associated with the module
    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "Level")]
    pub level: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "Slot")]
    pub slot: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Material {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When Written: if materials are discarded
/// When Written: whenever materials are collected
#[derive(Clone, Debug, Deserialize)]
pub struct MaterialCollected {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    /// Number of units collected
    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// The localised value will be omitted if it is exactly the same as Name
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When Written: when a new material is discovered
#[derive(Clone, Debug, Deserialize)]
pub struct MaterialDiscovered {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "DiscoveryNumber")]
    pub discovery_number: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// The localised value will be omitted if it is exactly the same as Name
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When written: at startup, when loading from main menu into game
#[derive(Clone, Debug, Deserialize)]
pub struct Materials {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Encoded")]
    pub encoded: Vec<Material>,

    #[serde(rename = "Manufactured")]
    pub manufactured: Vec<Material>,

    #[serde(rename = "Raw")]
    pub raw: Vec<Material>,

}


/// When written: when exchanging materials at the Material trader contact
#[derive(Clone, Debug, Deserialize)]
pub struct MaterialTrade {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Paid")]
    pub paid: MaterialTraded,

    #[serde(rename = "Received")]
    pub received: MaterialTraded,

    #[serde(rename = "TraderType")]
    pub trader_type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MaterialTraded {

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Material")]
    pub material: String,

    /// The localised value will be omitted if it is exactly the same as Material
    #[serde(rename = "Material_Localised")]
    pub material_localised: Option<String>,

    #[serde(rename = "Quantity")]
    pub quantity: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MicroResources {

    /// The category of the micro-resource.
    #[serde(rename = "Category")]
    pub category: String,

    /// The count of this type of micro-resource.
    #[serde(rename = "Count")]
    pub count: u64,

    /// The internal name of the micro-resource.
    #[serde(rename = "Name")]
    pub name: String,

    /// The localized name of the micro-resource.
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When Written: when a mission has been abandoned
/// When Written: when a mission has failed
#[derive(Clone, Debug, Deserialize)]
pub struct Mission {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Fine")]
    pub fine: Option<u64>,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When Written: when starting a mission
#[derive(Clone, Debug, Deserialize)]
pub struct MissionAccepted {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    /// Number required to deliver
    #[serde(rename = "Count")]
    pub count: Option<u64>,

    #[serde(rename = "DestinationSettlement")]
    pub destination_settlement: Option<String>,

    #[serde(rename = "DestinationStation")]
    pub destination_station: Option<String>,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: Option<String>,

    #[serde(rename = "Donation")]
    pub donation: Option<String>,

    /// Mission expiry time, in ISO 8601
    #[serde(rename = "Expiry", with = "crate::event::format::optional_date")]
    pub expiry: Option<DateTime<Utc>>,

    /// Faction offering mission
    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Influence")]
    pub influence: String,

    /// Number of targets
    #[serde(rename = "KillCount")]
    pub kill_count: Option<u64>,

    #[serde(rename = "LocalisedName")]
    pub localised_name: String,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// If it has been redirected
    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: Option<String>,

    /// If it has been redirected
    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: Option<String>,

    #[serde(rename = "PassengerCount")]
    pub passenger_count: Option<u64>,

    #[serde(rename = "PassengerType")]
    pub passenger_type: Option<String>,

    #[serde(rename = "PassengerVIPs")]
    pub passenger_vi_ps: Option<bool>,

    #[serde(rename = "PassengerWanted")]
    pub passenger_wanted: Option<bool>,

    #[serde(rename = "Reputation")]
    pub reputation: String,

    #[serde(rename = "Reward")]
    pub reward: Option<u64>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    #[serde(rename = "TargetFaction")]
    pub target_faction: Option<String>,

    #[serde(rename = "TargetType")]
    pub target_type: Option<String>,

    #[serde(rename = "TargetType_Localised")]
    pub target_type_localised: Option<String>,

    #[serde(rename = "Wing")]
    pub wing: bool,

}


/// When Written: when a mission is completed
#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompleted {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Commodity")]
    pub commodity: Option<String>,

    #[serde(rename = "Commodity_Localised")]
    pub commodity_localised: Option<String>,

    /// Names and counts of any commodity rewards
    #[serde(rename = "CommodityReward")]
    pub commodity_reward: Option<Vec<Material>>,

    #[serde(rename = "Count")]
    pub count: Option<u64>,

    #[serde(rename = "DestinationSettlement")]
    pub destination_settlement: Option<String>,

    #[serde(rename = "DestinationStation")]
    pub destination_station: Option<String>,

    #[serde(rename = "DestinationSystem")]
    pub destination_system: Option<String>,

    #[serde(rename = "Donated")]
    pub donated: Option<u64>,

    #[serde(rename = "Donation")]
    pub donation: Option<String>,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "FactionEffects")]
    pub faction_effects: Option<Vec<MissionCompletedFactionEffect>>,

    #[serde(rename = "KillCount")]
    pub kill_count: Option<u64>,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    /// Name, category and count of any material rewards
    #[serde(rename = "MaterialsReward")]
    pub materials_reward: Option<Vec<MissionCompletedMaterialsReward>>,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: Option<String>,

    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: Option<String>,

    /// Appears in journal manual, but not in actual events.
    #[serde(rename = "PermitsAwarded")]
    pub permits_awarded: Option<Vec<String>>,

    #[serde(rename = "Reward")]
    pub reward: Option<u64>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

    #[serde(rename = "Target_Localised")]
    pub target_localised: Option<String>,

    #[serde(rename = "TargetFaction")]
    pub target_faction: Option<String>,

    #[serde(rename = "TargetType")]
    pub target_type: Option<String>,

    #[serde(rename = "TargetType_Localised")]
    pub target_type_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffect {

    #[serde(rename = "Effects")]
    pub effects: Vec<MissionCompletedFactionEffectEffect>,

    #[serde(rename = "Faction")]
    pub faction: String,

    #[serde(rename = "Influence")]
    pub influence: Vec<MissionCompletedFactionEffectInfluence>,

    #[serde(rename = "Reputation")]
    pub reputation: String,

    #[serde(rename = "ReputationTrend")]
    pub reputation_trend: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffectEffect {

    #[serde(rename = "Effect")]
    pub effect: String,

    #[serde(rename = "Effect_Localised")]
    pub effect_localised: Option<String>,

    #[serde(rename = "Trend")]
    pub trend: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedFactionEffectInfluence {

    #[serde(rename = "Influence")]
    pub influence: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Trend")]
    pub trend: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionCompletedMaterialsReward {

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Category_Localised")]
    pub category_localised: Option<String>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// The localised value will be omitted if it is exactly the same as Name
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When written: when a mission is updated with a new destination
#[derive(Clone, Debug, Deserialize)]
pub struct MissionRedirected {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LocalisedName")]
    pub localised_name: Option<String>,

    #[serde(rename = "LocalisedName_Localised")]
    pub localised_name_localised: Option<String>,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "NewDestinationStation")]
    pub new_destination_station: String,

    #[serde(rename = "NewDestinationSystem")]
    pub new_destination_system: String,

    #[serde(rename = "OldDestinationStation")]
    pub old_destination_station: String,

    #[serde(rename = "OldDestinationSystem")]
    pub old_destination_system: String,

}


/// When written: at startup
#[derive(Clone, Debug, Deserialize)]
pub struct Missions {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Active")]
    pub active: Vec<MissionsFailed>,

    #[serde(rename = "Complete")]
    pub complete: Vec<MissionsFailed>,

    #[serde(rename = "Failed")]
    pub failed: Vec<MissionsFailed>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MissionsFailed {

    /// Time left in seconds
    #[serde(rename = "Expires")]
    pub expires: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "PassengerMission")]
    pub passenger_mission: bool,

}


/// When Written: when buying a module in outfitting
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleBuy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// The module being purchased
    #[serde(rename = "BuyItem")]
    pub buy_item: String,

    #[serde(rename = "BuyItem_Localised")]
    pub buy_item_localised: Option<String>,

    /// Price paid
    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// If existing module in slot is sold
    #[serde(rename = "SellItem")]
    pub sell_item: Option<String>,

    /// If existing module in slot is sold
    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    /// If existing module in slot is sold
    #[serde(rename = "SellPrice")]
    pub sell_price: Option<u64>,

    /// The player's ship
    #[serde(rename = "Ship")]
    pub ship: String,

    /// The player's ship ID
    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    /// Slot that is outfitted
    #[serde(rename = "Slot")]
    pub slot: String,

    /// If existing module in slot is stored
    #[serde(rename = "StoredItem")]
    pub stored_item: Option<String>,

    /// If existing module in slot is stored
    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

}


/// When Written: when buying a module and directly storing it in outfitting
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleBuyAndStore {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// The module being purchased and stored
    #[serde(rename = "BuyItem")]
    pub buy_item: String,

    #[serde(rename = "BuyItem_Localised")]
    pub buy_item_localised: Option<String>,

    /// Price paid
    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// The player's ship
    #[serde(rename = "Ship")]
    pub ship: String,

    /// The player's ship ID
    #[serde(rename = "ShipID")]
    pub ship_id: u64,

}


/// When written: when looking at the cockpit Right Hand Side modules info panel, if data has changed. This also writes a ModulesInfo.json file alongside the journal, listing the modules in the same order as displayed.
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleInfo {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// When written to ModulesInfo.json
    #[serde(rename = "Modules")]
    pub modules: Option<Vec<ModuleInfoModule>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ModuleInfoModule {

    #[serde(rename = "Item")]
    pub item: String,

    #[serde(rename = "Power")]
    pub power: f64,

    #[serde(rename = "Priority")]
    pub priority: Option<u64>,

    #[serde(rename = "Slot")]
    pub slot: String,

}


/// When written: when fetching a previously stored module
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleRetrieve {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "Level")]
    pub level: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "RetrievedItem")]
    pub retrieved_item: String,

    #[serde(rename = "RetrievedItem_Localised")]
    pub retrieved_item_localised: Option<String>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "Slot")]
    pub slot: String,

    /// If slot was not empty
    #[serde(rename = "SwapOutItem")]
    pub swap_out_item: Option<String>,

    /// If slot was not empty
    #[serde(rename = "SwapOutItem_Localised")]
    pub swap_out_item_localised: Option<String>,

}


/// When Written: when selling a module in outfitting
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSell {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "SellItem")]
    pub sell_item: String,

    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    #[serde(rename = "SellPrice")]
    pub sell_price: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "Slot")]
    pub slot: String,

}


/// When written: when selling a module in storage at another station
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSellRemote {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SellItem")]
    pub sell_item: String,

    #[serde(rename = "SellItem_Localised")]
    pub sell_item_localised: Option<String>,

    #[serde(rename = "SellPrice")]
    pub sell_price: u64,

    #[serde(rename = "ServerId")]
    pub server_id: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: u64,

}


/// When written: when storing a module in Outfitting
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleStore {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: Option<u64>,

    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Hot")]
    pub hot: Option<bool>,

    #[serde(rename = "Level")]
    pub level: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    /// If a core module is stored. Documented, but appears to be unused.
    #[serde(rename = "ReplacementItem")]
    pub replacement_item: Option<String>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "Slot")]
    pub slot: String,

    #[serde(rename = "StoredItem")]
    pub stored_item: String,

    /// If a core module is stored. Documented, but appears to be unused.
    #[serde(rename = "StoredItem_Localised")]
    pub stored_item_localised: Option<String>,

}


/// When Written: when moving a module to a different slot on the ship
#[derive(Clone, Debug, Deserialize)]
pub struct ModuleSwap {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FromItem")]
    pub from_item: String,

    #[serde(rename = "FromItem_Localised")]
    pub from_item_localised: Option<String>,

    #[serde(rename = "FromSlot")]
    pub from_slot: String,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "ToItem")]
    pub to_item: String,

    #[serde(rename = "ToItem_Localised")]
    pub to_item_localised: Option<String>,

    #[serde(rename = "ToSlot")]
    pub to_slot: String,

}


/// When written: when selling exploration data in Cartographics, a page at a time
#[derive(Clone, Debug, Deserialize)]
pub struct MultiSellExplorationData {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BaseValue")]
    pub base_value: u64,

    #[serde(rename = "Bonus")]
    pub bonus: u64,

    #[serde(rename = "Discovered")]
    pub discovered: Vec<MultiSellExplorationDataDiscovered>,

    #[serde(rename = "TotalEarnings")]
    pub total_earnings: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct MultiSellExplorationDataDiscovered {

    #[serde(rename = "NumBodies")]
    pub num_bodies: u64,

    #[serde(rename = "SystemName")]
    pub system_name: String,

    /// This field sometime appears in this event containing random data (bug)
    #[serde(rename = "SystemName_Localised")]
    pub system_name_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Music {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MusicTrack")]
    pub music_track: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct NameAndProportion {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Proportion")]
    pub proportion: f64,

}


/// When written: when scanning a navigation beacon, before the scan data for all the bodies in the system is written into the journal
#[derive(Clone, Debug, Deserialize)]
pub struct NavBeaconScan {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NumBodies")]
    pub num_bodies: u64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When plotting a multi-star route, the file NavRoute.json is written in the same directory as the journal, with a list of stars along that route
#[derive(Clone, Debug, Deserialize)]
pub struct NavRoute {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Route")]
    pub route: Option<Vec<NavRouteRoute>>,

}


/// When written: When the current plotted nav route is cleared. Can be written to NavRoute.json with an empty Route array.
#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteClear {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Route")]
    pub route: Option<Vec<NavRouteClearRoute>>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteClearRoute {

}


#[derive(Clone, Debug, Deserialize)]
pub struct NavRouteRoute {

    #[serde(rename = "StarClass")]
    pub star_class: String,

    /// star position, as a Json array [x, y, z], relative to Sol in Ly
    #[serde(rename = "StarPos")]
    pub star_pos: Vec<f64>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// When written: Creating a new commander
#[derive(Clone, Debug, Deserialize)]
pub struct NewCommander {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FID")]
    pub fid: String,

    #[serde(rename = "Name")]
    pub name: String,

    /// Selected starter package
    #[serde(rename = "Package")]
    pub package: String,

}


/// This is written when crew receive wages
#[derive(Clone, Debug, Deserialize)]
pub struct NpcCrewPaidWage {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "NpcCrewId")]
    pub npc_crew_id: u64,

    #[serde(rename = "NpcCrewName")]
    pub npc_crew_name: String,

}


/// This is written when a crew member's combat rank increases
#[derive(Clone, Debug, Deserialize)]
pub struct NpcCrewRank {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NpcCrewId")]
    pub npc_crew_id: u64,

    #[serde(rename = "NpcCrewName")]
    pub npc_crew_name: String,

    #[serde(rename = "RankCombat")]
    pub rank_combat: u64,

}


/// Written when accessing the outfitting menu. The full parts pricelist is written to a separate file Outfitting.json.
#[derive(Clone, Debug, Deserialize)]
pub struct Outfitting {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Only written in Outfitting.json
    #[serde(rename = "Horizons")]
    pub horizons: Option<bool>,

    /// Only written in Outfitting.json
    #[serde(rename = "Items")]
    pub items: Option<Vec<OutfittingItem>>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct OutfittingItem {

    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    #[serde(rename = "id")]
    pub id: u64,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: at startup, when loading the saved game file
#[derive(Clone, Debug, Deserialize)]
pub struct Passengers {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Array of passenger records
    #[serde(rename = "Manifest")]
    pub manifest: Vec<PassengersManifest>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct PassengersManifest {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MissionID")]
    pub mission_id: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "VIP")]
    pub vip: bool,

    #[serde(rename = "Wanted")]
    pub wanted: bool,

}


/// When written: when paying fines
/// When written: when paying off bounties
#[derive(Clone, Debug, Deserialize)]
pub struct Payment {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AllFines")]
    pub all_fines: Option<bool>,

    /// Total amount paid, including any broker fee
    #[serde(rename = "Amount")]
    pub amount: u64,

    /// Present if paid via a broker
    #[serde(rename = "BrokerPercentage")]
    pub broker_percentage: Option<f64>,

    /// If paying off an individual faction's fines
    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    /// If paying off an individual faction's fines
    #[serde(rename = "Faction_Localised")]
    pub faction_localised: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

}


/// When written: at startup, if player has pledged to a power
#[derive(Clone, Debug, Deserialize)]
pub struct Powerplay {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Merits")]
    pub merits: u64,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Rank")]
    pub rank: u64,

    /// Time pledged in seconds
    #[serde(rename = "TimePledged")]
    pub time_pledged: u64,

    #[serde(rename = "Votes")]
    pub votes: Option<u64>,

}


/// When written: when a player defects from one power to another
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayDefect {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FromPower")]
    pub from_power: String,

    #[serde(rename = "ToPower")]
    pub to_power: String,

}


/// When written: when collecting powerplay commodities for delivery
/// When written: when delivering powerplay commodities
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayDelivery {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: when paying to fast-track allocation of commodities
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayFastTrack {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "Power")]
    pub power: String,

}


/// When written: when joining up with a power
/// When written: when leaving a power
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayJoin {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

}


/// When written: when receiving salary payment from a power
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayMerits {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MeritsGained")]
    pub merits_gained: u64,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "TotalMerits")]
    pub total_merits: u64,

}


/// When written: when receiving salary payment from a power
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayRank {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Rank")]
    pub rank: u64,

}


/// When written: when receiving salary payment from a power
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplaySalary {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "Power")]
    pub power: String,

}


/// When written: when voting for a system expansion
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayVote {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    /// Documented, but appears to be unused.
    #[serde(rename = "System")]
    pub system: Option<String>,

    #[serde(rename = "Votes")]
    pub votes: u64,

    #[serde(rename = "VoteToConsolidate")]
    pub vote_to_consolidate: u64,

}


/// When written: when receiving payment for powerplay combat
#[derive(Clone, Debug, Deserialize)]
pub struct PowerplayVoucher {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Power")]
    pub power: String,

    #[serde(rename = "Systems")]
    pub systems: Vec<String>,

}


/// When written: when the player’s rank increases. Only the relevant ranks are included.
#[derive(Clone, Debug, Deserialize)]
pub struct Promotion {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Combat")]
    pub combat: Option<u64>,

    #[serde(rename = "Empire")]
    pub empire: Option<u64>,

    #[serde(rename = "Exobiologist")]
    pub exobiologist: Option<u64>,

    #[serde(rename = "Explore")]
    pub explore: Option<u64>,

    #[serde(rename = "Federation")]
    pub federation: Option<u64>,

    #[serde(rename = "Soldier")]
    pub soldier: Option<u64>,

    #[serde(rename = "Trade")]
    pub trade: Option<u64>,

}


/// When using a prospecting drone
#[derive(Clone, Debug, Deserialize)]
pub struct ProspectedAsteroid {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Content")]
    pub content: String,

    #[serde(rename = "Content_Localised")]
    pub content_localised: Option<String>,

    #[serde(rename = "Materials")]
    pub materials: Vec<NameAndProportion>,

    /// If it’s a motherlode
    #[serde(rename = "MotherlodeMaterial")]
    pub motherlode_material: Option<String>,

    /// If it’s a motherlode. The localised value will be omitted if it is exactly the same as MotherlodeMaterial
    #[serde(rename = "MotherlodeMaterial_Localised")]
    pub motherlode_material_localised: Option<String>,

    /// Percentage of materials remaining
    #[serde(rename = "Remaining")]
    pub remaining: f64,

}


/// When written: when this player has killed another player
#[derive(Clone, Debug, Deserialize)]
pub struct PVPKill {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Victim’s rank in range 0..8
    #[serde(rename = "CombatRank")]
    pub combat_rank: u64,

    /// Name of the victim
    #[serde(rename = "Victim")]
    pub victim: String,

}


/// When written: at startup
/// When written: at startup
#[derive(Clone, Debug, Deserialize)]
pub struct Rank {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Percentage progress to next rank
    #[serde(rename = "Combat")]
    pub combat: u64,

    /// Percentage progress to next rank
    #[serde(rename = "CQC")]
    pub cqc: u64,

    /// Percentage progress to next rank
    #[serde(rename = "Empire")]
    pub empire: u64,

    /// Percentage progress to next rank
    #[serde(rename = "Exobiologist")]
    pub exobiologist: Option<u64>,

    /// Percentage progress to next rank
    #[serde(rename = "Explore")]
    pub explore: u64,

    /// Percentage progress to next rank
    #[serde(rename = "Federation")]
    pub federation: u64,

    /// Percentage progress to next rank
    #[serde(rename = "Soldier")]
    pub soldier: Option<u64>,

    /// Percentage progress to next rank
    #[serde(rename = "Trade")]
    pub trade: u64,

}


/// When written: when the reboot repair function is used
#[derive(Clone, Debug, Deserialize)]
pub struct RebootRepair {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Array of names of modules repaired
    #[serde(rename = "Modules")]
    pub modules: Vec<String>,

}


/// When written: when a text message is received from another player or npc
#[derive(Clone, Debug, Deserialize)]
pub struct ReceiveText {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Channel")]
    pub channel: String,

    #[serde(rename = "From")]
    pub from: String,

    #[serde(rename = "From_Localised")]
    pub from_localised: Option<String>,

    #[serde(rename = "Message")]
    pub message: String,

    #[serde(rename = "Message_Localised")]
    pub message_localised: Option<String>,

}


/// When Written: when claiming payment for combat bounties and bonds
#[derive(Clone, Debug, Deserialize)]
pub struct RedeemVoucher {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Net amount received, after any broker fee
    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "BrokerPercentage")]
    pub broker_percentage: Option<f64>,

    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    /// For type bounty
    #[serde(rename = "Factions")]
    pub factions: Option<Vec<RedeemVoucherFaction>>,

    #[serde(rename = "Type")]
    pub r#type: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct RedeemVoucherFaction {

    #[serde(rename = "Amount")]
    pub amount: u64,

    #[serde(rename = "Faction")]
    pub faction: String,

}


/// When Written: when refuelling (10%)
/// When Written: when refuelling (full tank)
#[derive(Clone, Debug, Deserialize)]
pub struct Refuel {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Tons of fuel purchased
    #[serde(rename = "Amount")]
    pub amount: f64,

    /// Cost of fuel
    #[serde(rename = "Cost")]
    pub cost: u64,

}


/// When Written: when repairing the ship. When repairing on a FleetCarrier, you can get a list of the modules repaired
#[derive(Clone, Debug, Deserialize)]
pub struct Repair {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

    /// all, wear, hull, paint, or name of module
    #[serde(rename = "Item")]
    pub item: Option<String>,

    /// when repairing on a FleetCarrier
    #[serde(rename = "Items")]
    pub items: Option<Vec<String>>,

}


/// When written: when the player's ship has been repaired by a repair drone. Each of the values indicate the amount of damage that has been repaired
#[derive(Clone, Debug, Deserialize)]
pub struct RepairDrone {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CockpitRepaired")]
    pub cockpit_repaired: Option<f64>,

    #[serde(rename = "CorrosionRepaired")]
    pub corrosion_repaired: Option<f64>,

    #[serde(rename = "HullRepaired")]
    pub hull_repaired: Option<f64>,

}


/// When written: at startup (after Rank and Progress). This gives the player's reputation (on a scale of -100..+100) with the superpowers
#[derive(Clone, Debug, Deserialize)]
pub struct Reputation {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Alliance")]
    pub alliance: Option<f64>,

    #[serde(rename = "Empire")]
    pub empire: Option<f64>,

    #[serde(rename = "Federation")]
    pub federation: Option<f64>,

    #[serde(rename = "Independent")]
    pub independent: Option<f64>,

}


/// When Written: when requesting power micro-resources.
#[derive(Clone, Debug, Deserialize)]
pub struct RequestPowerMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// The ID of the market where the request took place.
    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// Details of the micro-resources requested.
    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<MicroResources>,

    /// The total number of micro-resources requested.
    #[serde(rename = "TotalCount")]
    pub total_count: u64,

}


/// When fuel is moved from one fuel tank to another
#[derive(Clone, Debug, Deserialize)]
pub struct ReservoirReplenished {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "FuelMain")]
    pub fuel_main: f64,

    #[serde(rename = "FuelReservoir")]
    pub fuel_reservoir: f64,

}


/// When Written: when purchasing an SRV or Fighter
#[derive(Clone, Debug, Deserialize)]
pub struct RestockVehicle {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

    /// Number of vehicles purchased
    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "ID")]
    pub id: Option<u64>,

    #[serde(rename = "Loadout")]
    pub loadout: String,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: when the player restarts after death
#[derive(Clone, Debug, Deserialize)]
pub struct Resurrect {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Whether the commander declared bankruptcy
    #[serde(rename = "Bankrupt")]
    pub bankrupt: bool,

    /// The price paid
    #[serde(rename = "Cost")]
    pub cost: u64,

    /// The option selected on the insurance rebuy screen
    #[serde(rename = "Option")]
    pub option: String,

}


/// When written: after using the Surface Area Analysis Scanner
#[derive(Clone, Debug, Deserialize)]
pub struct SAAScanComplete {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "EfficiencyTarget")]
    pub efficiency_target: u64,

    #[serde(rename = "ProbesUsed")]
    pub probes_used: u64,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SAASignals {

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: when using Surface Area Analysis Scanner on a planet or rings
#[derive(Clone, Debug, Deserialize)]
pub struct SAASignalsFound {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyName")]
    pub body_name: String,

    #[serde(rename = "Genuses")]
    pub genuses: Option<Vec<SAASignalsFoundGenus>>,

    #[serde(rename = "Signals")]
    pub signals: Vec<SAASignals>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SAASignalsFoundGenus {

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

}


/// When Written: basic or detailed discovery scan of a star, planet or moon. This is also generated when scanning a navigation beacon in a populated system, to record info about all the bodies in the system.
#[derive(Clone, Debug, Deserialize)]
pub struct Scan {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Written for Star
    #[serde(rename = "AbsoluteMagnitude")]
    pub absolute_magnitude: Option<f64>,

    /// Written for Star
    #[serde(rename = "Age_MY")]
    pub age_my: Option<u64>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "AscendingNode")]
    pub ascending_node: Option<f64>,

    /// Written for Planet/Moon
    #[serde(rename = "Atmosphere")]
    pub atmosphere: Option<String>,

    /// Written for Planet/Moon
    #[serde(rename = "AtmosphereComposition")]
    pub atmosphere_composition: Option<Vec<ScanAtmosphereComposition>>,

    /// Written for Planet/Moon
    #[serde(rename = "AtmosphereType")]
    pub atmosphere_type: Option<String>,

    /// If rotating. Written for Star/Planet/Moon
    #[serde(rename = "AxialTilt")]
    pub axial_tilt: Option<f64>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "BodyID")]
    pub body_id: u64,

    /// Written for Star/Planet/Moon
    #[serde(rename = "BodyName")]
    pub body_name: String,

    /// Written for Planet/Moon
    #[serde(rename = "Composition")]
    pub composition: Option<ScanComposition>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "DistanceFromArrivalLS")]
    pub distance_from_arrival_ls: f64,

    /// Orbital Parameters for any Star/Planet/Moon (except main star of single-star system)
    #[serde(rename = "Eccentricity")]
    pub eccentricity: Option<f64>,

    /// Written for Planet/Moon
    #[serde(rename = "Landable")]
    pub landable: Option<bool>,

    /// Written for Star
    #[serde(rename = "Luminosity")]
    pub luminosity: Option<String>,

    /// Body mass. Written for Planet/Moon
    #[serde(rename = "MassEM")]
    pub mass_em: Option<f64>,

    /// Written for Planet/Moon
    #[serde(rename = "Materials")]
    pub materials: Option<Vec<ScanMaterial>>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "MeanAnomaly")]
    pub mean_anomaly: Option<f64>,

    /// Orbital Parameters for any Star/Planet/Moon (except main star of single-star system)
    #[serde(rename = "OrbitalInclination")]
    pub orbital_inclination: Option<f64>,

    /// Orbital Parameters for any Star/Planet/Moon (except main star of single-star system)
    #[serde(rename = "OrbitalPeriod")]
    pub orbital_period: Option<f64>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "Parents")]
    pub parents: Option<Vec<ScanParent>>,

    /// Orbital Parameters for any Star/Planet/Moon (except main star of single-star system)
    #[serde(rename = "Periapsis")]
    pub periapsis: Option<f64>,

    /// Written for Planet/Moon
    #[serde(rename = "PlanetClass")]
    pub planet_class: Option<String>,

    /// Written for Star
    #[serde(rename = "Radius")]
    pub radius: Option<f64>,

    /// Written for Planet/Moon. If rings present.
    #[serde(rename = "ReserveLevel")]
    pub reserve_level: Option<String>,

    /// Written for Star/Planet/Moon. If rings present.
    #[serde(rename = "Rings")]
    pub rings: Option<Vec<ScanRing>>,

    /// Written for Star/Planet/Moon. If rotating (in seconds)
    #[serde(rename = "RotationPeriod")]
    pub rotation_period: Option<f64>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "ScanType")]
    pub scan_type: String,

    /// Orbital Parameters for any Star/Planet/Moon (except main star of single-star system)
    #[serde(rename = "SemiMajorAxis")]
    pub semi_major_axis: Option<f64>,

    /// Written for Star
    #[serde(rename = "StarSystem")]
    pub star_system: String,

    /// Written for Star
    #[serde(rename = "StarType")]
    pub star_type: Option<String>,

    /// Written for Star
    #[serde(rename = "StellarMass")]
    pub stellar_mass: Option<f64>,

    /// Written for Star
    #[serde(rename = "Subclass")]
    pub subclass: Option<u64>,

    /// Written for Planet/Moon
    #[serde(rename = "SurfaceGravity")]
    pub surface_gravity: Option<f64>,

    /// Written for Planet/Moon
    #[serde(rename = "SurfacePressure")]
    pub surface_pressure: Option<f64>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "SurfaceTemperature")]
    pub surface_temperature: Option<f64>,

    /// Written for Star
    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    /// Written for Planet/Moon
    #[serde(rename = "TerraformState")]
    pub terraform_state: Option<String>,

    /// Written for Planet/Moon
    #[serde(rename = "TidalLock")]
    pub tidal_lock: Option<bool>,

    /// Written for Planet/Moon
    #[serde(rename = "Volcanism")]
    pub volcanism: Option<String>,

    /// Written for Star/Planet/Moon
    #[serde(rename = "WasDiscovered")]
    pub was_discovered: bool,

    /// Written for Star/Planet/Moon
    #[serde(rename = "WasMapped")]
    pub was_mapped: bool,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ScanAtmosphereComposition {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Percent")]
    pub percent: f64,

}


/// When scanning one body of a binary pair, you will get an event detailing the orbital parameters of their BaryCentre
#[derive(Clone, Debug, Deserialize)]
pub struct ScanBaryCentre {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "AscendingNode")]
    pub ascending_node: f64,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "Eccentricity")]
    pub eccentricity: f64,

    #[serde(rename = "MeanAnomaly")]
    pub mean_anomaly: f64,

    #[serde(rename = "OrbitalInclination")]
    pub orbital_inclination: f64,

    #[serde(rename = "OrbitalPeriod")]
    pub orbital_period: f64,

    #[serde(rename = "Periapsis")]
    pub periapsis: f64,

    #[serde(rename = "SemiMajorAxis")]
    pub semi_major_axis: f64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// Written for Planet/Moon
#[derive(Clone, Debug, Deserialize)]
pub struct ScanComposition {

    #[serde(rename = "Ice")]
    pub ice: f64,

    #[serde(rename = "Metal")]
    pub metal: f64,

    #[serde(rename = "Rock")]
    pub rock: f64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ScanMaterial {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Percent")]
    pub percent: f64,

}


/// When written: when the player's ship has been scanned (The Scan Detected indication is at the start of the scan, this is written at the end of a successful scan)
#[derive(Clone, Debug, Deserialize)]
pub struct Scanned {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ScanType")]
    pub scan_type: String,

}


/// This event is logged when the player uses the Organic Sampling Tool to scan, log or analyse organic discoveries. The first scan is Log, subsequent scans are Sample until fully scanned, final scan is Analyse
#[derive(Clone, Debug, Deserialize)]
pub struct ScanOrganic {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: u64,

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

    #[serde(rename = "ScanType")]
    pub scan_type: String,

    #[serde(rename = "Species")]
    pub species: String,

    #[serde(rename = "Species_Localised")]
    pub species_localised: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Variant")]
    pub variant: Option<String>,

    #[serde(rename = "Variant_Localised")]
    pub variant_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ScanParent {

    #[serde(rename = "Null")]
    pub null: Option<u64>,

    #[serde(rename = "Planet")]
    pub planet: Option<u64>,

    #[serde(rename = "Ring")]
    pub ring: Option<u64>,

    #[serde(rename = "Star")]
    pub star: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ScanRing {

    #[serde(rename = "InnerRad")]
    pub inner_rad: f64,

    /// In megatons
    #[serde(rename = "MassMT")]
    pub mass_mt: f64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "OuterRad")]
    pub outer_rad: f64,

    #[serde(rename = "RingClass")]
    pub ring_class: String,

}


/// When written: when contributing materials to a research community goal
#[derive(Clone, Debug, Deserialize)]
pub struct ScientificResearch {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    /// The localised value will be omitted if it is exactly the same as Name
    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When Written: when a screen snapshot is saved. The latitude, longitude, altitude and heading will be included if on a planet or in low-altitude flight.
#[derive(Clone, Debug, Deserialize)]
pub struct Screenshot {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Altitude")]
    pub altitude: Option<f64>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    /// Filename of screenshot
    #[serde(rename = "Filename")]
    pub filename: String,

    #[serde(rename = "Heading")]
    pub heading: Option<u64>,

    #[serde(rename = "Height")]
    pub height: u64,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "System")]
    pub system: Option<String>,

    #[serde(rename = "Width")]
    pub width: u64,

}


/// When written: when delivering items to a Search and Rescue contact
#[derive(Clone, Debug, Deserialize)]
pub struct SearchAndRescue {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Reward")]
    pub reward: u64,

}


/// When Written: when selling unwanted drones back to the market
#[derive(Clone, Debug, Deserialize)]
pub struct SellDrones {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "SellPrice")]
    pub sell_price: u64,

    #[serde(rename = "TotalSale")]
    pub total_sale: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When Written: when selling exploration data in Cartographics
#[derive(Clone, Debug, Deserialize)]
pub struct SellExplorationData {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BaseValue")]
    pub base_value: u64,

    /// Bonus for first discoveries
    #[serde(rename = "Bonus")]
    pub bonus: u64,

    #[serde(rename = "Discovered")]
    pub discovered: Vec<String>,

    #[serde(rename = "Systems")]
    pub systems: Vec<String>,

    /// Total credits received (including for example the 200% bonus if rank 5 with Li Yong Rui)
    #[serde(rename = "TotalEarnings")]
    pub total_earnings: u64,

}


/// This event is logged when a player sells Microresources for cash
#[derive(Clone, Debug, Deserialize)]
pub struct SellMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "MicroResources")]
    pub micro_resources: Vec<MicroResources>,

    #[serde(rename = "Price")]
    pub price: u64,

    #[serde(rename = "TotalCount")]
    pub total_count: u64,

}


/// This event records that a player has sold organic data (see ScanOrganic)
#[derive(Clone, Debug, Deserialize)]
pub struct SellOrganicData {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BioData")]
    pub bio_data: Vec<SellOrganicDataBioData>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SellOrganicDataBioData {

    #[serde(rename = "Bonus")]
    pub bonus: u64,

    #[serde(rename = "Genus")]
    pub genus: String,

    #[serde(rename = "Genus_Localised")]
    pub genus_localised: Option<String>,

    #[serde(rename = "Species")]
    pub species: String,

    #[serde(rename = "Species_Localised")]
    pub species_localised: Option<String>,

    #[serde(rename = "Value")]
    pub value: u64,

    #[serde(rename = "Variant")]
    pub variant: Option<String>,

    #[serde(rename = "Variant_Localised")]
    pub variant_localised: Option<String>,

}


/// When written: When selling a stored ship to raise funds when on insurance/rebuy screen
#[derive(Clone, Debug, Deserialize)]
pub struct SellShipOnRebuy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SellShipId")]
    pub sell_ship_id: u64,

    #[serde(rename = "ShipPrice")]
    pub ship_price: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "System")]
    pub system: String,

}


/// When written: when a text message is sent to another player
#[derive(Clone, Debug, Deserialize)]
pub struct SendText {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Message")]
    pub message: String,

    #[serde(rename = "Sent")]
    pub sent: bool,

    #[serde(rename = "To")]
    pub to: String,

}


/// When written: when assigning a name to the ship in Starport Services
#[derive(Clone, Debug, Deserialize)]
pub struct SetUserShipName {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Ship")]
    pub ship: String,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "UserShipId")]
    pub user_ship_id: String,

    #[serde(rename = "UserShipName")]
    pub user_ship_name: String,

}


/// When written: when shields are disabled in combat, or recharged
#[derive(Clone, Debug, Deserialize)]
pub struct ShieldState {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// false when disabled, true when restored
    #[serde(rename = "ShieldsUp")]
    pub shields_up: bool,

}


/// When written: after a new ship has been purchased
/// When written: after a new ship has been redeemed
#[derive(Clone, Debug, Deserialize)]
pub struct Ship {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NewShipID")]
    pub new_ship_id: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

}


/// When Written: when purchasing ammunition
/// When written: when repairing everything
#[derive(Clone, Debug, Deserialize)]
pub struct ShipEquipmentPurchase {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Cost")]
    pub cost: u64,

}


/// Same as ShipLocker, but discontinued.
#[derive(Clone, Debug, Deserialize)]
pub struct ShipLockerMaterials {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Components")]
    pub components: Vec<Item>,

    #[serde(rename = "Consumables")]
    pub consumables: Vec<Consumable>,

    #[serde(rename = "Data")]
    pub data: Vec<Item>,

    #[serde(rename = "Items")]
    pub items: Vec<Item>,

}


/// When written: when the current player selects a new target
#[derive(Clone, Debug, Deserialize)]
pub struct ShipTargeted {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// If Scan stage >= 3
    #[serde(rename = "Bounty")]
    pub bounty: Option<u64>,

    /// If Scan stage >= 3
    #[serde(rename = "Faction")]
    pub faction: Option<String>,

    /// If Scan stage >= 2
    #[serde(rename = "HullHealth")]
    pub hull_health: Option<f64>,

    /// If Scan stage >= 3
    #[serde(rename = "LegalStatus")]
    pub legal_status: Option<String>,

    /// If Scan stage >= 1
    #[serde(rename = "PilotName")]
    pub pilot_name: Option<String>,

    /// If Scan stage >= 1
    #[serde(rename = "PilotName_Localised")]
    pub pilot_name_localised: Option<String>,

    /// If Scan stage >= 1
    #[serde(rename = "PilotRank")]
    pub pilot_rank: Option<String>,

    /// If the player is aligned in powerplay and the target is also aligned to a power
    #[serde(rename = "Power")]
    pub power: Option<String>,

    #[serde(rename = "ScanStage")]
    pub scan_stage: Option<u64>,

    /// If Scan stage >= 2
    #[serde(rename = "ShieldHealth")]
    pub shield_health: Option<f64>,

    #[serde(rename = "Ship")]
    pub ship: Option<String>,

    /// If target locked
    #[serde(rename = "Ship_Localised")]
    pub ship_localised: Option<String>,

    /// If target in a squadron
    #[serde(rename = "SquadronID")]
    pub squadron_id: Option<String>,

    /// If Scan stage >= 3
    #[serde(rename = "Subsystem")]
    pub subsystem: Option<String>,

    /// If Scan stage >= 3
    #[serde(rename = "Subsystem_Localised")]
    pub subsystem_localised: Option<String>,

    /// If Scan stage >= 3
    #[serde(rename = "SubsystemHealth")]
    pub subsystem_health: Option<f64>,

    #[serde(rename = "TargetLocked")]
    pub target_locked: bool,

}


/// When written: when accessing shipyard in a station. The full price list is written to a separate file, in the same folder as the journal, Shipyard.json
#[derive(Clone, Debug, Deserialize)]
pub struct Shipyard {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Only written in Shipyard.json
    #[serde(rename = "AllowCobraMkIV")]
    pub allow_cobra_mk_iv: Option<bool>,

    /// Only written in Shipyard.json
    #[serde(rename = "Horizons")]
    pub horizons: Option<bool>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// Only written in Shipyard.json
    #[serde(rename = "PriceList")]
    pub price_list: Option<Vec<ShipyardPriceList>>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

}


/// When Written: when buying a new ship in the shipyard
#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardBuy {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    /// If selling current ship
    #[serde(rename = "SellOldShip")]
    pub sell_old_ship: Option<String>,

    /// If selling current ship
    #[serde(rename = "SellPrice")]
    pub sell_price: Option<u64>,

    /// If selling current ship
    #[serde(rename = "SellShipID")]
    pub sell_ship_id: Option<u64>,

    #[serde(rename = "ShipPrice")]
    pub ship_price: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    /// If storing old ship
    #[serde(rename = "StoreOldShip")]
    pub store_old_ship: Option<String>,

    /// If storing old ship
    #[serde(rename = "StoreShipID")]
    pub store_ship_id: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardPriceList {

    #[serde(rename = "id")]
    pub id: u64,

    #[serde(rename = "ShipPrice")]
    pub ship_price: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

}


/// When written: after a new ship has been unlocked in the Shipyard
#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardRedeem {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BundleID")]
    pub bundle_id: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

}


/// When Written: when selling a ship stored in the shipyard
#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardSell {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "SellShipID")]
    pub sell_ship_id: u64,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: Option<u64>,

    #[serde(rename = "ShipPrice")]
    pub ship_price: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    /// If ship is in another system
    #[serde(rename = "System")]
    pub system: Option<String>,

}


/// When Written: when switching to another ship already stored at this station
#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardSwap {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "StoreOldShip")]
    pub store_old_ship: String,

    #[serde(rename = "StoreShipID")]
    pub store_ship_id: u64,

}


/// When Written: when requesting a ship at another station be transported to this station
#[derive(Clone, Debug, Deserialize)]
pub struct ShipyardTransfer {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Distance")]
    pub distance: f64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    /// Location of the ship
    #[serde(rename = "System")]
    pub system: String,

    #[serde(rename = "TransferPrice")]
    pub transfer_price: u64,

    /// Time taken in seconds
    #[serde(rename = "TransferTime")]
    pub transfer_time: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct Squadron {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SquadronPromotion {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "NewRank")]
    pub new_rank: u64,

    #[serde(rename = "OldRank")]
    pub old_rank: u64,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SquadronStartup {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "CurrentRank")]
    pub current_rank: u64,

    #[serde(rename = "SquadronName")]
    pub squadron_name: String,

}


/// When written: when docking an SRV with the ship
/// When written: when the player's SRV is destroyed
#[derive(Clone, Debug, Deserialize)]
pub struct SRV {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "ID")]
    pub id: u64,

    #[serde(rename = "SRVType")]
    pub srv_type: Option<String>,

    #[serde(rename = "SRVType_Localised")]
    pub srv_type_localised: Option<String>,

}


/// When written: at the start of a Hyperspace or Supercruise jump (start of countdown)
#[derive(Clone, Debug, Deserialize)]
pub struct StartJump {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "JumpType")]
    pub jump_type: String,

    /// only for a hyperspace jump
    #[serde(rename = "StarClass")]
    pub star_class: Option<String>,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: Option<u64>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

}


/// When written: at startup. This line contains the information displayed in the statistics panel on the right side of the cockpit
#[derive(Clone, Debug, Deserialize)]
pub struct Statistics {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Bank_Account")]
    pub bank_account: StatisticsBankAccount,

    #[serde(rename = "Combat")]
    pub combat: StatisticsCombat,

    #[serde(rename = "CQC")]
    pub cqc: Option<StatisticsCQC>,

    #[serde(rename = "Crafting")]
    pub crafting: Option<StatisticsCrafting>,

    #[serde(rename = "Crew")]
    pub crew: Option<StatisticsCrew>,

    #[serde(rename = "Crime")]
    pub crime: StatisticsCrime,

    #[serde(rename = "Exobiology")]
    pub exobiology: Option<StatisticsExobiology>,

    #[serde(rename = "Exploration")]
    pub exploration: StatisticsExploration,

    #[serde(rename = "FLEETCARRIER")]
    pub fleet_carrier: Option<StatisticsFLEETCARRIER>,

    #[serde(rename = "Material_Trader_Stats")]
    pub material_trader_stats: Option<StatisticsMaterialTraderStats>,

    #[serde(rename = "Mining")]
    pub mining: StatisticsMining,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<StatisticsMulticrew>,

    #[serde(rename = "Passengers")]
    pub passengers: StatisticsPassengers,

    #[serde(rename = "Search_And_Rescue")]
    pub search_and_rescue: StatisticsSearchAndRescue,

    #[serde(rename = "Smuggling")]
    pub smuggling: StatisticsSmuggling,

    #[serde(rename = "TG_ENCOUNTERS")]
    pub tg_encounters: Option<StatisticsTgEncounters>,

    #[serde(rename = "Trading")]
    pub trading: StatisticsTrading,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsBankAccount {

    #[serde(rename = "Current_Wealth")]
    pub current_wealth: u64,

    #[serde(rename = "Insurance_Claims")]
    pub insurance_claims: u64,

    #[serde(rename = "Owned_Ship_Count")]
    pub owned_ship_count: Option<u64>,

    #[serde(rename = "Premium_Stock_Bought")]
    pub premium_stock_bought: Option<u64>,

    #[serde(rename = "Spent_On_Ammo_Consumables")]
    pub spent_on_ammo_consumables: u64,

    #[serde(rename = "Spent_On_Fuel")]
    pub spent_on_fuel: u64,

    #[serde(rename = "Spent_On_Insurance")]
    pub spent_on_insurance: u64,

    #[serde(rename = "Spent_On_Outfitting")]
    pub spent_on_outfitting: u64,

    #[serde(rename = "Spent_On_Premium_Stock")]
    pub spent_on_premium_stock: Option<u64>,

    #[serde(rename = "Spent_On_Repairs")]
    pub spent_on_repairs: u64,

    #[serde(rename = "Spent_On_Ships")]
    pub spent_on_ships: u64,

    #[serde(rename = "Spent_On_Suit_Consumables")]
    pub spent_on_suit_consumables: Option<u64>,

    #[serde(rename = "Spent_On_Suits")]
    pub spent_on_suits: Option<u64>,

    #[serde(rename = "Spent_On_Weapons")]
    pub spent_on_weapons: Option<u64>,

    #[serde(rename = "Suits_Owned")]
    pub suits_owned: Option<u64>,

    #[serde(rename = "Weapons_Owned")]
    pub weapons_owned: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCombat {

    #[serde(rename = "Assassination_Profits")]
    pub assassination_profits: u64,

    #[serde(rename = "Assassinations")]
    pub assassinations: u64,

    #[serde(rename = "Bounties_Claimed")]
    pub bounties_claimed: u64,

    #[serde(rename = "Bounty_Hunting_Profit")]
    pub bounty_hunting_profit: f64,

    #[serde(rename = "Combat_Bond_Profits")]
    pub combat_bond_profits: u64,

    #[serde(rename = "Combat_Bonds")]
    pub combat_bonds: u64,

    #[serde(rename = "ConflictZone_High")]
    pub conflict_zone_high: Option<u64>,

    #[serde(rename = "ConflictZone_High_Wins")]
    pub conflict_zone_high_wins: Option<u64>,

    #[serde(rename = "ConflictZone_Low")]
    pub conflict_zone_low: Option<u64>,

    #[serde(rename = "ConflictZone_Low_Wins")]
    pub conflict_zone_low_wins: Option<u64>,

    #[serde(rename = "ConflictZone_Medium")]
    pub conflict_zone_medium: Option<u64>,

    #[serde(rename = "ConflictZone_Medium_Wins")]
    pub conflict_zone_medium_wins: Option<u64>,

    #[serde(rename = "ConflictZone_Total")]
    pub conflict_zone_total: Option<u64>,

    #[serde(rename = "ConflictZone_Total_Wins")]
    pub conflict_zone_total_wins: Option<u64>,

    #[serde(rename = "Dropships_Booked")]
    pub dropships_booked: Option<u64>,

    #[serde(rename = "Dropships_Cancelled")]
    pub dropships_cancelled: Option<u64>,

    #[serde(rename = "Dropships_Taken")]
    pub dropships_taken: Option<u64>,

    #[serde(rename = "Highest_Single_Reward")]
    pub highest_single_reward: u64,

    #[serde(rename = "OnFoot_Combat_Bonds")]
    pub on_foot_combat_bonds: Option<u64>,

    #[serde(rename = "OnFoot_Combat_Bonds_Profits")]
    pub on_foot_combat_bonds_profits: Option<u64>,

    #[serde(rename = "OnFoot_Scavs_Killed")]
    pub on_foot_scavs_killed: Option<u64>,

    #[serde(rename = "OnFoot_Ships_Destroyed")]
    pub on_foot_ships_destroyed: Option<u64>,

    #[serde(rename = "OnFoot_Skimmers_Killed")]
    pub on_foot_skimmers_killed: Option<u64>,

    #[serde(rename = "OnFoot_Vehicles_Destroyed")]
    pub on_foot_vehicles_destroyed: Option<u64>,

    #[serde(rename = "Settlement_Conquered")]
    pub settlement_conquered: Option<u64>,

    #[serde(rename = "Settlement_Defended")]
    pub settlement_defended: Option<u64>,

    #[serde(rename = "Skimmers_Killed")]
    pub skimmers_killed: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCQC {

    #[serde(rename = "CQC_Credits_Earned")]
    pub cqc_credits_earned: Option<u64>,

    #[serde(rename = "CQC_KD")]
    pub cqc_kd: f64,

    #[serde(rename = "CQC_Kills")]
    pub cqc_kills: u64,

    #[serde(rename = "CQC_Time_Played")]
    pub cqc_time_played: u64,

    #[serde(rename = "CQC_WL")]
    pub cqc_wl: f64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrafting {

    #[serde(rename = "Count_Of_Used_Engineers")]
    pub count_of_used_engineers: u64,

    #[serde(rename = "Recipes_Applied")]
    pub recipes_applied: Option<u64>,

    #[serde(rename = "Recipes_Applied_On_Previously_Modified_Modules")]
    pub recipes_applied_on_previously_modified_modules: Option<u64>,

    #[serde(rename = "Recipes_Applied_Rank_1")]
    pub recipes_applied_rank_1: Option<u64>,

    #[serde(rename = "Recipes_Applied_Rank_2")]
    pub recipes_applied_rank_2: Option<u64>,

    #[serde(rename = "Recipes_Applied_Rank_3")]
    pub recipes_applied_rank_3: Option<u64>,

    #[serde(rename = "Recipes_Applied_Rank_4")]
    pub recipes_applied_rank_4: Option<u64>,

    #[serde(rename = "Recipes_Applied_Rank_5")]
    pub recipes_applied_rank_5: Option<u64>,

    #[serde(rename = "Recipes_Generated")]
    pub recipes_generated: u64,

    #[serde(rename = "Recipes_Generated_Rank_1")]
    pub recipes_generated_rank_1: u64,

    #[serde(rename = "Recipes_Generated_Rank_2")]
    pub recipes_generated_rank_2: u64,

    #[serde(rename = "Recipes_Generated_Rank_3")]
    pub recipes_generated_rank_3: u64,

    #[serde(rename = "Recipes_Generated_Rank_4")]
    pub recipes_generated_rank_4: u64,

    #[serde(rename = "Recipes_Generated_Rank_5")]
    pub recipes_generated_rank_5: u64,

    #[serde(rename = "Spent_On_Crafting")]
    pub spent_on_crafting: Option<u64>,

    #[serde(rename = "Suit_Mods_Applied")]
    pub suit_mods_applied: Option<u64>,

    #[serde(rename = "Suit_Mods_Applied_Full")]
    pub suit_mods_applied_full: Option<u64>,

    #[serde(rename = "Suits_Upgraded")]
    pub suits_upgraded: Option<u64>,

    #[serde(rename = "Suits_Upgraded_Full")]
    pub suits_upgraded_full: Option<u64>,

    #[serde(rename = "Weapon_Mods_Applied")]
    pub weapon_mods_applied: Option<u64>,

    #[serde(rename = "Weapon_Mods_Applied_Full")]
    pub weapon_mods_applied_full: Option<u64>,

    #[serde(rename = "Weapons_Upgraded")]
    pub weapons_upgraded: Option<u64>,

    #[serde(rename = "Weapons_Upgraded_Full")]
    pub weapons_upgraded_full: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrew {

    #[serde(rename = "NpcCrew_Died")]
    pub npc_crew_died: Option<u64>,

    #[serde(rename = "NpcCrew_Fired")]
    pub npc_crew_fired: Option<u64>,

    #[serde(rename = "NpcCrew_Hired")]
    pub npc_crew_hired: Option<u64>,

    #[serde(rename = "NpcCrew_TotalWages")]
    pub npc_crew_total_wages: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsCrime {

    #[serde(rename = "Bounties_Received")]
    pub bounties_received: u64,

    #[serde(rename = "Citizens_Murdered")]
    pub citizens_murdered: Option<u64>,

    #[serde(rename = "Data_Stolen")]
    pub data_stolen: Option<u64>,

    #[serde(rename = "Fines")]
    pub fines: u64,

    #[serde(rename = "Goods_Stolen")]
    pub goods_stolen: Option<u64>,

    #[serde(rename = "Guards_Murdered")]
    pub guards_murdered: Option<u64>,

    #[serde(rename = "Highest_Bounty")]
    pub highest_bounty: u64,

    #[serde(rename = "Malware_Uploaded")]
    pub malware_uploaded: Option<u64>,

    #[serde(rename = "Notoriety")]
    pub notoriety: Option<u64>,

    #[serde(rename = "Omnipol_Murdered")]
    pub omnipol_murdered: Option<u64>,

    #[serde(rename = "Production_Sabotage")]
    pub production_sabotage: Option<u64>,

    #[serde(rename = "Production_Theft")]
    pub production_theft: Option<u64>,

    #[serde(rename = "Profiles_Cloned")]
    pub profiles_cloned: Option<u64>,

    #[serde(rename = "Sample_Stolen")]
    pub sample_stolen: Option<u64>,

    #[serde(rename = "Settlements_State_Shutdown")]
    pub settlements_state_shutdown: Option<u64>,

    #[serde(rename = "Total_Bounties")]
    pub total_bounties: u64,

    #[serde(rename = "Total_Fines")]
    pub total_fines: u64,

    #[serde(rename = "Total_Murders")]
    pub total_murders: Option<u64>,

    #[serde(rename = "Total_Stolen")]
    pub total_stolen: Option<u64>,

    #[serde(rename = "Turrets_Destroyed")]
    pub turrets_destroyed: Option<u64>,

    #[serde(rename = "Turrets_Overloaded")]
    pub turrets_overloaded: Option<u64>,

    #[serde(rename = "Turrets_Total")]
    pub turrets_total: Option<u64>,

    #[serde(rename = "Value_Stolen_StateChange")]
    pub value_stolen_state_change: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsExobiology {

    #[serde(rename = "First_Logged")]
    pub first_logged: u64,

    #[serde(rename = "First_Logged_Profits")]
    pub first_logged_profits: u64,

    #[serde(rename = "Organic_Data")]
    pub organic_data: u64,

    #[serde(rename = "Organic_Data_Profits")]
    pub organic_data_profits: u64,

    #[serde(rename = "Organic_Genus")]
    pub organic_genus: u64,

    #[serde(rename = "Organic_Genus_Encountered")]
    pub organic_genus_encountered: u64,

    #[serde(rename = "Organic_Planets")]
    pub organic_planets: u64,

    #[serde(rename = "Organic_Species")]
    pub organic_species: u64,

    #[serde(rename = "Organic_Species_Encountered")]
    pub organic_species_encountered: u64,

    #[serde(rename = "Organic_Systems")]
    pub organic_systems: u64,

    #[serde(rename = "Organic_Variant_Encountered")]
    pub organic_variant_encountered: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsExploration {

    #[serde(rename = "Efficient_Scans")]
    pub efficient_scans: Option<u64>,

    #[serde(rename = "Exploration_Profits")]
    pub exploration_profits: u64,

    #[serde(rename = "First_Footfalls")]
    pub first_footfalls: Option<u64>,

    #[serde(rename = "Fuel_Purchased")]
    pub fuel_purchased: Option<u64>,

    #[serde(rename = "Fuel_Scooped")]
    pub fuel_scooped: Option<u64>,

    #[serde(rename = "Greatest_Distance_From_Start")]
    pub greatest_distance_from_start: f64,

    #[serde(rename = "Highest_Payout")]
    pub highest_payout: u64,

    #[serde(rename = "OnFoot_Distance_Travelled")]
    pub on_foot_distance_travelled: Option<u64>,

    #[serde(rename = "Planet_Footfalls")]
    pub planet_footfalls: Option<u64>,

    #[serde(rename = "Planets_Scanned_To_Level_2")]
    pub planets_scanned_to_level_2: u64,

    #[serde(rename = "Planets_Scanned_To_Level_3")]
    pub planets_scanned_to_level_3: u64,

    #[serde(rename = "Settlements_Visited")]
    pub settlements_visited: Option<u64>,

    #[serde(rename = "Shuttle_Distance_Travelled")]
    pub shuttle_distance_travelled: Option<f64>,

    #[serde(rename = "Shuttle_Journeys")]
    pub shuttle_journeys: Option<u64>,

    #[serde(rename = "Spent_On_Shuttles")]
    pub spent_on_shuttles: Option<u64>,

    #[serde(rename = "Systems_Visited")]
    pub systems_visited: u64,

    #[serde(rename = "Time_Played")]
    pub time_played: u64,

    #[serde(rename = "Total_Hyperspace_Distance")]
    pub total_hyperspace_distance: u64,

    #[serde(rename = "Total_Hyperspace_Jumps")]
    pub total_hyperspace_jumps: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsFLEETCARRIER {

    #[serde(rename = "FLEETCARRIER_DISTANCE_TRAVELLED")]
    pub fleet_carrier_distance_travelled: serde_json::Value,

    #[serde(rename = "FLEETCARRIER_EXPORT_TOTAL")]
    pub fleet_carrier_export_total: u64,

    #[serde(rename = "FLEETCARRIER_IMPORT_TOTAL")]
    pub fleet_carrier_import_total: u64,

    #[serde(rename = "FLEETCARRIER_OUTFITTING_PROFIT")]
    pub fleet_carrier_outfitting_profit: u64,

    #[serde(rename = "FLEETCARRIER_OUTFITTING_SOLD")]
    pub fleet_carrier_outfitting_sold: u64,

    #[serde(rename = "FLEETCARRIER_REARM_TOTAL")]
    pub fleet_carrier_rearm_total: u64,

    #[serde(rename = "FLEETCARRIER_REFUEL_PROFIT")]
    pub fleet_carrier_refuel_profit: u64,

    #[serde(rename = "FLEETCARRIER_REFUEL_TOTAL")]
    pub fleet_carrier_refuel_total: u64,

    #[serde(rename = "FLEETCARRIER_REPAIRS_TOTAL")]
    pub fleet_carrier_repairs_total: u64,

    #[serde(rename = "FLEETCARRIER_SHIPYARD_PROFIT")]
    pub fleet_carrier_shipyard_profit: u64,

    #[serde(rename = "FLEETCARRIER_SHIPYARD_SOLD")]
    pub fleet_carrier_shipyard_sold: u64,

    #[serde(rename = "FLEETCARRIER_STOLENPROFIT_TOTAL")]
    pub fleet_carrier_stolen_profit_total: u64,

    #[serde(rename = "FLEETCARRIER_STOLENSPEND_TOTAL")]
    pub fleet_carrier_stolen_spend_total: u64,

    #[serde(rename = "FLEETCARRIER_TOTAL_JUMPS")]
    pub fleet_carrier_total_jumps: u64,

    #[serde(rename = "FLEETCARRIER_TRADEPROFIT_TOTAL")]
    pub fleet_carrier_trade_profit_total: u64,

    #[serde(rename = "FLEETCARRIER_TRADESPEND_TOTAL")]
    pub fleet_carrier_trade_spend_total: u64,

    #[serde(rename = "FLEETCARRIER_VOUCHERS_PROFIT")]
    pub fleet_carrier_vouchers_profit: u64,

    #[serde(rename = "FLEETCARRIER_VOUCHERS_REDEEMED")]
    pub fleet_carrier_vouchers_redeemed: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMaterialTraderStats {

    #[serde(rename = "Assets_Traded_In")]
    pub assets_traded_in: Option<u64>,

    #[serde(rename = "Assets_Traded_Out")]
    pub assets_traded_out: Option<u64>,

    #[serde(rename = "Encoded_Materials_Traded")]
    pub encoded_materials_traded: Option<u64>,

    #[serde(rename = "Grade_1_Materials_Traded")]
    pub grade_1_materials_traded: Option<u64>,

    #[serde(rename = "Grade_2_Materials_Traded")]
    pub grade_2_materials_traded: Option<u64>,

    #[serde(rename = "Grade_3_Materials_Traded")]
    pub grade_3_materials_traded: Option<u64>,

    #[serde(rename = "Grade_4_Materials_Traded")]
    pub grade_4_materials_traded: Option<u64>,

    #[serde(rename = "Grade_5_Materials_Traded")]
    pub grade_5_materials_traded: Option<u64>,

    #[serde(rename = "Materials_Traded")]
    pub materials_traded: u64,

    #[serde(rename = "Raw_Materials_Traded")]
    pub raw_materials_traded: Option<u64>,

    #[serde(rename = "Trades_Completed")]
    pub trades_completed: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMining {

    #[serde(rename = "Materials_Collected")]
    pub materials_collected: Option<u64>,

    #[serde(rename = "Mining_Profits")]
    pub mining_profits: u64,

    #[serde(rename = "Quantity_Mined")]
    pub quantity_mined: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsMulticrew {

    #[serde(rename = "Multicrew_Credits_Total")]
    pub multicrew_credits_total: u64,

    #[serde(rename = "Multicrew_Fighter_Time_Total")]
    pub multicrew_fighter_time_total: u64,

    #[serde(rename = "Multicrew_Fines_Total")]
    pub multicrew_fines_total: u64,

    #[serde(rename = "Multicrew_Gunner_Time_Total")]
    pub multicrew_gunner_time_total: u64,

    #[serde(rename = "Multicrew_Time_Total")]
    pub multicrew_time_total: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsPassengers {

    #[serde(rename = "Passengers_Missions_Accepted")]
    pub passengers_missions_accepted: Option<u64>,

    #[serde(rename = "Passengers_Missions_Bulk")]
    pub passengers_missions_bulk: u64,

    #[serde(rename = "Passengers_Missions_Delivered")]
    pub passengers_missions_delivered: u64,

    #[serde(rename = "Passengers_Missions_Disgruntled")]
    pub passengers_missions_disgruntled: Option<u64>,

    #[serde(rename = "Passengers_Missions_Ejected")]
    pub passengers_missions_ejected: u64,

    #[serde(rename = "Passengers_Missions_VIP")]
    pub passengers_missions_vip: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsSearchAndRescue {

    #[serde(rename = "Maglocks_Opened")]
    pub maglocks_opened: Option<u64>,

    #[serde(rename = "Panels_Opened")]
    pub panels_opened: Option<u64>,

    #[serde(rename = "Salvage_Illegal_POI")]
    pub salvage_illegal_poi: Option<u64>,

    #[serde(rename = "Salvage_Illegal_Settlements")]
    pub salvage_illegal_settlements: Option<u64>,

    #[serde(rename = "Salvage_Legal_POI")]
    pub salvage_legal_poi: Option<u64>,

    #[serde(rename = "Salvage_Legal_Settlements")]
    pub salvage_legal_settlements: Option<u64>,

    #[serde(rename = "SearchRescue_Count")]
    pub search_rescue_count: u64,

    #[serde(rename = "SearchRescue_Profit")]
    pub search_rescue_profit: u64,

    #[serde(rename = "SearchRescue_Traded")]
    pub search_rescue_traded: u64,

    #[serde(rename = "Settlements_State_FireOut")]
    pub settlements_state_fire_out: Option<u64>,

    #[serde(rename = "Settlements_State_Reboot")]
    pub settlements_state_reboot: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsSmuggling {

    #[serde(rename = "Average_Profit")]
    pub average_profit: f64,

    #[serde(rename = "Black_Markets_Profits")]
    pub black_markets_profits: u64,

    #[serde(rename = "Black_Markets_Traded_With")]
    pub black_markets_traded_with: u64,

    #[serde(rename = "Highest_Single_Transaction")]
    pub highest_single_transaction: u64,

    #[serde(rename = "Resources_Smuggled")]
    pub resources_smuggled: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsTgEncounters {

    #[serde(rename = "TG_ENCOUNTER_IMPRINT")]
    pub tg_encounter_imprint: Option<u64>,

    #[serde(rename = "TG_ENCOUNTER_KILLED")]
    pub tg_encounter_killed: Option<u64>,

    #[serde(rename = "TG_ENCOUNTER_TOTAL")]
    pub tg_encounter_total: u64,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_SHIP")]
    pub tg_encounter_total_last_ship: String,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_SYSTEM")]
    pub tg_encounter_total_last_system: String,

    #[serde(rename = "TG_ENCOUNTER_TOTAL_LAST_TIMESTAMP")]
    pub tg_encounter_total_last_timestamp: String,

    #[serde(rename = "TG_ENCOUNTER_WAKES")]
    pub tg_encounter_wakes: Option<u64>,

    #[serde(rename = "TG_SCOUT_COUNT")]
    pub tg_scout_count: Option<u64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatisticsTrading {

    #[serde(rename = "Assets_Sold")]
    pub assets_sold: Option<u64>,

    #[serde(rename = "Average_Profit")]
    pub average_profit: f64,

    #[serde(rename = "Data_Sold")]
    pub data_sold: Option<u64>,

    #[serde(rename = "Goods_Sold")]
    pub goods_sold: Option<u64>,

    #[serde(rename = "Highest_Single_Transaction")]
    pub highest_single_transaction: u64,

    #[serde(rename = "Market_Profits")]
    pub market_profits: u64,

    #[serde(rename = "Markets_Traded_With")]
    pub markets_traded_with: u64,

    #[serde(rename = "Resources_Traded")]
    pub resources_traded: u64,

}


/// This event is written to Status.json which is updated every few seconds
#[derive(Clone, Debug, Deserialize)]
pub struct Status {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Altitude")]
    pub altitude: Option<u64>,

    #[serde(rename = "Balance")]
    pub balance: Option<u64>,

    #[serde(rename = "BodyName")]
    pub body_name: Option<String>,

    #[serde(rename = "Cargo")]
    pub cargo: Option<f64>,

    #[serde(rename = "Destination")]
    pub destination: Option<StatusDestination>,

    #[serde(rename = "FireGroup")]
    pub fire_group: Option<u64>,

    #[serde(rename = "Flags")]
    pub flags: u64,

    #[serde(rename = "Flags2")]
    pub flags2: Option<u64>,

    #[serde(rename = "Fuel")]
    pub fuel: Option<StatusFuel>,

    #[serde(rename = "Gravity")]
    pub gravity: Option<f64>,

    #[serde(rename = "GuiFocus")]
    pub gui_focus: Option<u64>,

    #[serde(rename = "Heading")]
    pub heading: Option<u64>,

    #[serde(rename = "Health")]
    pub health: Option<f64>,

    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    #[serde(rename = "LegalState")]
    pub legal_state: Option<String>,

    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Oxygen")]
    pub oxygen: Option<f64>,

    #[serde(rename = "Pips")]
    pub pips: Option<Vec<u64>>,

    #[serde(rename = "PlanetRadius")]
    pub planet_radius: Option<f64>,

    #[serde(rename = "SelectedWeapon")]
    pub selected_weapon: Option<String>,

    #[serde(rename = "SelectedWeapon_Localised")]
    pub selected_weapon_localised: Option<String>,

    #[serde(rename = "Temperature")]
    pub temperature: Option<f64>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatusDestination {

    #[serde(rename = "Body")]
    pub body: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "System")]
    pub system: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StatusFuel {

    #[serde(rename = "FuelMain")]
    pub fuel_main: f64,

    #[serde(rename = "FuelReservoir")]
    pub fuel_reservoir: f64,

}


/// When written: when first visiting Outfitting, and when the set of stored modules has changed
#[derive(Clone, Debug, Deserialize)]
pub struct StoredModules {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Items")]
    pub items: Vec<StoredModulesItem>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StoredModulesItem {

    #[serde(rename = "BuyPrice")]
    pub buy_price: u64,

    /// If engineered module
    #[serde(rename = "EngineerModifications")]
    pub engineer_modifications: Option<String>,

    #[serde(rename = "Hot")]
    pub hot: bool,

    /// If the module is being transferred
    #[serde(rename = "InTransit")]
    pub in_transit: Option<bool>,

    /// If engineered module
    #[serde(rename = "Level")]
    pub level: Option<u64>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    /// If engineered module
    #[serde(rename = "Quality")]
    pub quality: Option<f64>,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "StorageSlot")]
    pub storage_slot: u64,

    #[serde(rename = "TransferCost")]
    pub transfer_cost: Option<u64>,

    #[serde(rename = "TransferTime")]
    pub transfer_time: Option<u64>,

}


/// When written: when visiting shipyard
#[derive(Clone, Debug, Deserialize)]
pub struct StoredShips {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "ShipsHere")]
    pub ships_here: Vec<StoredShipsShipsHere>,

    #[serde(rename = "ShipsRemote")]
    pub ships_remote: Vec<StoredShipsShipsRemote>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "StationName")]
    pub station_name: String,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StoredShipsShipsHere {

    #[serde(rename = "Hot")]
    pub hot: bool,

    #[serde(rename = "Name")]
    pub name: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    #[serde(rename = "Value")]
    pub value: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct StoredShipsShipsRemote {

    #[serde(rename = "Hot")]
    pub hot: bool,

    /// If the ship is in transit
    #[serde(rename = "InTransit")]
    pub in_transit: Option<bool>,

    #[serde(rename = "Name")]
    pub name: Option<String>,

    #[serde(rename = "ShipID")]
    pub ship_id: u64,

    /// If the ship is not in transit
    #[serde(rename = "ShipMarketID")]
    pub ship_market_id: Option<u64>,

    #[serde(rename = "ShipType")]
    pub ship_type: String,

    #[serde(rename = "ShipType_Localised")]
    pub ship_type_localised: Option<String>,

    /// If the ship is not in transit
    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    /// If the ship is not in transit
    #[serde(rename = "TransferPrice")]
    pub transfer_price: Option<u64>,

    /// If the ship is not in transit
    #[serde(rename = "TransferTime")]
    pub transfer_time: Option<u64>,

    #[serde(rename = "Value")]
    pub value: u64,

}


/// This event is logged when a player sells a flight suit
/// This event is logged when buying a new suit
#[derive(Clone, Debug, Deserialize)]
pub struct Suit {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: u64,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

}


/// This event is logged when starting on-foot or when disembarking
#[derive(Clone, Debug, Deserialize)]
pub struct SuitLoadout {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: u64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<SuitLoadoutModule>,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

}


/// T
#[derive(Clone, Debug, Deserialize)]
pub struct SuitLoadoutLite {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: u64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct SuitLoadoutModule {

    #[serde(rename = "Class")]
    pub class: u64,

    #[serde(rename = "ModuleName")]
    pub module_name: String,

    #[serde(rename = "ModuleName_Localised")]
    pub module_name_localised: Option<String>,

    #[serde(rename = "SlotName")]
    pub slot_name: String,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: u64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}


/// When dropping out of supercruise at a targeted destination
#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseDestinationDrop {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: Option<u64>,

    #[serde(rename = "Threat")]
    pub threat: u64,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: entering supercruise from normal space
#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseEntry {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

    #[serde(rename = "Wanted")]
    pub wanted: Option<bool>,

}


/// When written: leaving supercruise for normal space
#[derive(Clone, Debug, Deserialize)]
pub struct SupercruiseExit {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: String,

    #[serde(rename = "BodyID")]
    pub body_id: u64,

    #[serde(rename = "BodyType")]
    pub body_type: String,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

}


/// This event is logged when a player selects a different flight suit from the ship’s locker
#[derive(Clone, Debug, Deserialize)]
pub struct SwitchSuitLoadout {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "LoadoutID")]
    pub loadout_id: u64,

    #[serde(rename = "LoadoutName")]
    pub loadout_name: String,

    #[serde(rename = "Modules")]
    pub modules: Vec<SuitLoadoutModule>,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

    #[serde(rename = "SuitMods")]
    pub suit_mods: Vec<String>,

    #[serde(rename = "SuitName")]
    pub suit_name: String,

    #[serde(rename = "SuitName_Localised")]
    pub suit_name_localised: Option<String>,

}


/// When written: when synthesis is used to repair or rearm
#[derive(Clone, Debug, Deserialize)]
pub struct Synthesis {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Materials used with quantities
    #[serde(rename = "Materials")]
    pub materials: Vec<Material>,

    /// Synthesis blueprint
    #[serde(rename = "Name")]
    pub name: String,

}


/// When Written: when a colonisation claim is released
/// When Written: When a system is claimed for colonisation by paying for the claim.
#[derive(Clone, Debug, Deserialize)]
pub struct SystemClaim {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "StarSystem")]
    pub star_system: String,

    #[serde(rename = "SystemAddress")]
    pub system_address: u64,

}


/// If starting docked in a station
/// System controlling faction
/// System controlling faction
#[derive(Clone, Debug, Deserialize)]
pub struct SystemFaction {

    #[serde(rename = "FactionState")]
    pub faction_state: Option<String>,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: when using the Technology Broker to unlock new purchasable technology
#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBroker {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "BrokerType")]
    pub broker_type: String,

    #[serde(rename = "Commodities")]
    pub commodities: Vec<Material>,

    #[serde(rename = "ItemsUnlocked")]
    pub items_unlocked: Vec<TechnologyBrokerItemsUnlocked>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Materials")]
    pub materials: Vec<MicroResources>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct TechnologyBrokerItemsUnlocked {

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// Thargoid war information
/// Thargoid war information
/// Thargoid war information
#[derive(Clone, Debug, Deserialize)]
pub struct ThargoidWar {

    #[serde(rename = "CurrentState")]
    pub current_state: String,

    #[serde(rename = "EstimatedRemainingTime")]
    pub estimated_remaining_time: Option<String>,

    #[serde(rename = "NextStateFailure")]
    pub next_state_failure: Option<String>,

    #[serde(rename = "NextStateSuccess")]
    pub next_state_success: Option<String>,

    #[serde(rename = "RemainingPorts")]
    pub remaining_ports: Option<u64>,

    #[serde(rename = "SuccessStateReached")]
    pub success_state_reached: bool,

    #[serde(rename = "WarProgress")]
    pub war_progress: Option<f64>,

}


/// When written: landing on a planet surface
/// When written: when taking off from planet surface
#[derive(Clone, Debug, Deserialize)]
pub struct Touchdown {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Body")]
    pub body: Option<String>,

    #[serde(rename = "BodyID")]
    pub body_id: Option<u64>,

    /// only if player is landing
    #[serde(rename = "Latitude")]
    pub latitude: Option<f64>,

    /// only if player is landing
    #[serde(rename = "Longitude")]
    pub longitude: Option<f64>,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "NearestDestination")]
    pub nearest_destination: Option<String>,

    #[serde(rename = "NearestDestination_Localised")]
    pub nearest_destination_localised: Option<String>,

    #[serde(rename = "OnPlanet")]
    pub on_planet: Option<bool>,

    #[serde(rename = "OnStation")]
    pub on_station: Option<bool>,

    /// false if ship was recalled from SRV, true if player is landing
    #[serde(rename = "PlayerControlled")]
    pub player_controlled: bool,

    #[serde(rename = "StarSystem")]
    pub star_system: Option<String>,

    #[serde(rename = "SystemAddress")]
    pub system_address: Option<u64>,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

}


/// This event is logged when the player exchanges owned microresources to receive some other type of microresource
#[derive(Clone, Debug, Deserialize)]
pub struct TradeMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Count")]
    pub count: u64,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Offered")]
    pub offered: Vec<MicroResources>,

    #[serde(rename = "Received")]
    pub received: String,

    #[serde(rename = "Received_Localised")]
    pub received_localised: Option<String>,

    #[serde(rename = "TotalCount")]
    pub total_count: u64,

}


/// Written when transferring items between backpack and ship locker
#[derive(Clone, Debug, Deserialize)]
pub struct TransferMicroResources {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Transfers")]
    pub transfers: Vec<TransferMicroResourcesTransfer>,

}


#[derive(Clone, Debug, Deserialize)]
pub struct TransferMicroResourcesTransfer {

    #[serde(rename = "Category")]
    pub category: String,

    #[serde(rename = "Direction")]
    pub direction: String,

    #[serde(rename = "LockerNewCount")]
    pub locker_new_count: u64,

    #[serde(rename = "LockerOldCount")]
    pub locker_old_count: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

}


/// When Written: when mining fragments are converted unto a unit of cargo by refinery
/// When written: when scanning some types of data links
#[derive(Clone, Debug, Deserialize)]
pub struct TypeDetails {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Type")]
    pub r#type: String,

    #[serde(rename = "Type_Localised")]
    pub type_localised: Option<String>,

}


/// When written: when under fire (same time as the Under Attack voice message)
#[derive(Clone, Debug, Deserialize)]
pub struct UnderAttack {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Target")]
    pub target: Option<String>,

}


/// When written: liftoff from a landing pad in a station, outpost or settlement
#[derive(Clone, Debug, Deserialize)]
pub struct Undocked {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "MarketID")]
    pub market_id: u64,

    #[serde(rename = "Multicrew")]
    pub multicrew: Option<bool>,

    #[serde(rename = "StationName")]
    pub station_name: String,

    #[serde(rename = "StationName_Localised")]
    pub station_name_localised: Option<String>,

    #[serde(rename = "StationType")]
    pub station_type: String,

    #[serde(rename = "Taxi")]
    pub taxi: Option<bool>,

}


/// This event is logged when the player upgrades their flight suit
#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeSuit {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Class")]
    pub class: u64,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Resources")]
    pub resources: Option<Vec<Material>>,

    #[serde(rename = "SuitID")]
    pub suit_id: u64,

}


#[derive(Clone, Debug, Deserialize)]
pub struct UpgradeWeapon {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Class")]
    pub class: u64,

    #[serde(rename = "Cost")]
    pub cost: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Resources")]
    pub resources: Option<Vec<Material>>,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: u64,

}


/// When using an item from the player’s inventory (backpack)
#[derive(Clone, Debug, Deserialize)]
pub struct UseConsumable {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Type")]
    pub r#type: String,

}


/// When written: when dropping from Supercruise at a Unidentified Signal Source
#[derive(Clone, Debug, Deserialize)]
pub struct USSDrop {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "USSThreat")]
    pub uss_threat: u64,

    #[serde(rename = "USSType")]
    pub uss_type: String,

    #[serde(rename = "USSType_Localised")]
    pub uss_type_localised: Option<String>,

}


/// When written: when switching control between the main ship and a fighter
#[derive(Clone, Debug, Deserialize)]
pub struct VehicleSwitch {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "To")]
    pub to: String,

}


/// This event is logged when a player sells a hand weapon
/// This event is logged when purchasing a new hand weapon
#[derive(Clone, Debug, Deserialize)]
pub struct Weapon {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Class")]
    pub class: u64,

    #[serde(rename = "Name")]
    pub name: String,

    #[serde(rename = "Name_Localised")]
    pub name_localised: Option<String>,

    #[serde(rename = "Price")]
    pub price: u64,

    #[serde(rename = "SuitModuleID")]
    pub suit_module_id: u64,

    #[serde(rename = "WeaponMods")]
    pub weapon_mods: Vec<String>,

}


/// When written: another player has joined the wing
/// When written: when the player is invited to a wing
#[derive(Clone, Debug, Deserialize)]
pub struct WingInvite {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    #[serde(rename = "Name")]
    pub name: String,

}


/// When written: this player has joined a wing
#[derive(Clone, Debug, Deserialize)]
pub struct WingJoin {

    /// Event timestamp
    #[serde(with = "crate::event::format::date")]
    pub timestamp: DateTime<Utc>,

    /// Other player names already in wing
    #[serde(rename = "Others")]
    pub others: Vec<String>,

}

#[derive(Clone, Debug, Deserialize)]
#[serde(tag = "event")]
pub enum JournalEvent {
    /// When written: when repairing modules using the Auto Field Maintenance Unit (AFMU)
    #[serde(rename = "AfmuRepairs")]
    AfmuRepairs(AfmuRepairs),

    #[serde(rename = "AppliedToSquadron")]
    AppliedToSquadron(Squadron),

    /// When written: when in Supercruise, and distance from planet drops to within the 'Orbital Cruise' zone
    #[serde(rename = "ApproachBody")]
    ApproachBody(Body),

    /// When written: when approaching a planetary settlement
    #[serde(rename = "ApproachSettlement")]
    ApproachSettlement(ApproachSettlement),

    /// When written: when the player has broken up a ‘Motherlode’ asteroid for mining
    #[serde(rename = "AsteroidCracked")]
    AsteroidCracked(AsteroidCracked),

    /// Lists the contents of the backpack, in a separate backpack.json file
    #[serde(rename = "Backpack")]
    Backpack(Inventory),

    /// This is written when there is any change to the contents of the suit backpack – note this can be written at the same time as other events like UseConsumable
    #[serde(rename = "BackpackChange")]
    BackpackChange(BackpackChange),

    /// This event is logged when signing up to fight at a recruitment desk
    #[serde(rename = "BookDropship")]
    BookDropship(Booking),

    /// This event is logged when booking a taxi transport
    #[serde(rename = "BookTaxi")]
    BookTaxi(Booking),

    /// When written: player is awarded a bounty for a kill
    #[serde(rename = "Bounty")]
    Bounty(Bounty),

    /// When Written: when purchasing ammunition
    #[serde(rename = "BuyAmmo")]
    BuyAmmo(ShipEquipmentPurchase),

    /// When Written: when purchasing drones
    #[serde(rename = "BuyDrones")]
    BuyDrones(BuyDrones),

    /// When Written: when buying system data via the galaxy map
    #[serde(rename = "BuyExplorationData")]
    BuyExplorationData(BuyData),

    /// This event is logged when buying microresources
    #[serde(rename = "BuyMicroResources")]
    BuyMicroResources(BuyMicroResources),

    /// This event is logged when buying a new suit
    #[serde(rename = "BuySuit")]
    BuySuit(Suit),

    /// When Written: when buying trade data in the galaxy map
    #[serde(rename = "BuyTradeData")]
    BuyTradeData(BuyData),

    /// This event is logged when purchasing a new hand weapon
    #[serde(rename = "BuyWeapon")]
    BuyWeapon(Weapon),

    /// This event is logged if the player cancels their journey to a combat zone
    #[serde(rename = "CancelDropship")]
    CancelDropship(Cancel),

    /// This event is logged if the player cancels a booked taxi trip
    #[serde(rename = "CancelTaxi")]
    CancelTaxi(Cancel),

    /// When written: The player has been rewarded for a capital ship combat
    #[serde(rename = "CapShipBond")]
    CapShipBond(CapShipBond),

    /// When written: at startup, note this is now written slightly later in startup, after we have initialised missions, so we can detect if any cargo came from an abandoned delivery mission. The first Cargo event in the file will contain the full inventory, others just indicate a separate file has been written. The full data is now written to a separate file Cargo.json. A simple event (with no parameters) is written to the main journal file when the cargo file is updated.
    #[serde(rename = "Cargo")]
    Cargo(Cargo),

    /// When written: when collecting or delivering cargo for a wing mission, or if a wing member updates progress. The CargoType and Count are included when you collect or deliver goods, they are not included for a wing update. The Progress value actually represents pending progress for goods in transit: (ItemsCollected-ItemsDelivered)/TotalItemsToDeliver
    #[serde(rename = "CargoDepot")]
    CargoDepot(CargoDepot),

    /// When transferring cargo between ship and fleet carrier, or between ship and SRV
    #[serde(rename = "CargoTransfer")]
    CargoTransfer(CargoTransfer),

    /// Player transfers credits to/from carrier
    #[serde(rename = "CarrierBankTransfer")]
    CarrierBankTransfer(CarrierBankTransfer),

    /// Player has bought a fleet carrier
    #[serde(rename = "CarrierBuy")]
    CarrierBuy(CarrierBuy),

    /// At the time the player cancels decommission
    #[serde(rename = "CarrierCancelDecommission")]
    CarrierCancelDecommission(Carrier),

    /// Changes to crew
    #[serde(rename = "CarrierCrewServices")]
    CarrierCrewServices(CarrierCrewServices),

    /// At the time the player requests decommission
    #[serde(rename = "CarrierDecommission")]
    CarrierDecommission(CarrierDecommission),

    /// Any player giving fuel to the carrier
    #[serde(rename = "CarrierDepositFuel")]
    CarrierDepositFuel(CarrierDepositFuel),

    /// The carrier owner has changed the docking permission criteria
    #[serde(rename = "CarrierDockingPermission")]
    CarrierDockingPermission(CarrierDockingPermission),

    /// Change to tax rate or reserve
    #[serde(rename = "CarrierFinance")]
    CarrierFinance(CarrierFinance),

    /// This is similar to FSDJump and Location, but it is written if the player is online and docked at a fleet carrier when the carrier jumps. Note it does not include the distance jumped, or fuel used.
    #[serde(rename = "CarrierJump")]
    CarrierJump(CarrierJump),

    /// This is logged when a jump is cancelled
    #[serde(rename = "CarrierJumpCancelled")]
    CarrierJumpCancelled(Carrier),

    /// At the time the player requests the jump, not the jump itself
    #[serde(rename = "CarrierJumpRequest")]
    CarrierJumpRequest(CarrierJumpRequest),

    /// Carrier Location. Written on startup and after a carrier jump.
    #[serde(rename = "CarrierLocation")]
    CarrierLocation(CarrierLocation),

    #[serde(rename = "CarrierModulePack")]
    CarrierModulePack(CarrierPack),

    #[serde(rename = "CarrierNameChange")]
    CarrierNameChange(CarrierNameChange),

    #[serde(rename = "CarrierShipPack")]
    CarrierShipPack(CarrierPack),

    /// When owner opens carrier management
    #[serde(rename = "CarrierStats")]
    CarrierStats(CarrierStats),

    /// The carrier owner has requested the carrier buys or sells goods (or cancels such an order)
    #[serde(rename = "CarrierTradeOrder")]
    CarrierTradeOrder(CarrierTradeOrder),

    /// When written: when in a crew on someone else's ship, player switched crew role
    #[serde(rename = "ChangeCrewRole")]
    ChangeCrewRole(ChangeCrewRole),

    #[serde(rename = "ClearImpound")]
    ClearImpound(ClearImpound),

    /// When written: If you should ever reset your game
    #[serde(rename = "ClearSavedGame")]
    ClearSavedGame(Commander),

    #[serde(rename = "CockpitBreached")]
    CockpitBreached(Empty),

    /// When written: when a new discovery is added to the Codex
    #[serde(rename = "CodexEntry")]
    CodexEntry(CodexEntry),

    /// When Written: when scooping cargo from space or planet surface
    #[serde(rename = "CollectCargo")]
    CollectCargo(CollectCargo),

    /// When picking up items from the ground
    #[serde(rename = "CollectItems")]
    CollectItems(CollectItems),

    /// When Written: when a colonisation beacon is deployed
    #[serde(rename = "ColonisationBeaconDeployed")]
    ColonisationBeaconDeployed(Empty),

    /// When Written: Every 15 seconds while docked at a construction depot
    #[serde(rename = "ColonisationConstructionDepot")]
    ColonisationConstructionDepot(ColonisationConstructionDepot),

    /// When Written: when contributing materials to a colonisation effort
    #[serde(rename = "ColonisationContribution")]
    ColonisationContribution(ColonisationContribution),

    /// When Written: When a system is claimed for colonisation by paying for the claim.
    #[serde(rename = "ColonisationSystemClaim")]
    ColonisationSystemClaim(SystemClaim),

    /// When Written: when a colonisation claim is released
    #[serde(rename = "ColonisationSystemClaimRelease")]
    ColonisationSystemClaimRelease(SystemClaim),

    /// When written: at the start of the LoadGame process. This is written before the inventory, loadout, etc
    #[serde(rename = "Commander")]
    Commander(Commander),

    /// When written: when a crime is recorded against the player
    #[serde(rename = "CommitCrime")]
    CommitCrime(CommitCrime),

    /// When written: when the game retrieves info on community goals from the server, and the data has changed since last time. This event contains the current status of all community goals the player is currently subscribed to.
    #[serde(rename = "CommunityGoal")]
    CommunityGoal(CommunityGoal),

    /// When written: when opting out of a community goal
    #[serde(rename = "CommunityGoalDiscard")]
    CommunityGoalDiscard(CommunityGoal),

    /// When Written: when signing up to a community goal
    #[serde(rename = "CommunityGoalJoin")]
    CommunityGoalJoin(CommunityGoal),

    /// When Written: when receiving a reward for a community goal
    #[serde(rename = "CommunityGoalReward")]
    CommunityGoalReward(CommunityGoalReward),

    /// When written: if the journal file grows to 500k lines, we write this event, close the file, and start a new one. The new journalname will increase the partnumber, ex: {datetime}.02.log. The new journal will start with a Fileheader and continue.
    #[serde(rename = "Continued")]
    Continued(Continued),

    /// This event is logged when the player creates a new suit loadout
    #[serde(rename = "CreateSuitLoadout")]
    CreateSuitLoadout(CreateSuitLoadout),

    /// When written: when changing the task assignment of a member of crew
    #[serde(rename = "CrewAssign")]
    CrewAssign(CrewAssign),

    /// When written: when dismissing a member of crew
    #[serde(rename = "CrewFire")]
    CrewFire(CrewFire),

    /// When written: when engaging a new member of crew
    #[serde(rename = "CrewHire")]
    CrewHire(CrewHire),

    /// When written: when in multicrew, in Helm player's log, when a crew member launches a fighter
    #[serde(rename = "CrewLaunchFighter")]
    CrewLaunchFighter(CrewLaunchFighter),

    /// When written: When another player joins your ship's crew
    #[serde(rename = "CrewMemberJoins")]
    CrewMemberJoins(CrewMember),

    /// When written: When another player leaves your ship's crew
    #[serde(rename = "CrewMemberQuits")]
    CrewMemberQuits(CrewMember),

    /// When written: in Multicrew, Helm's log, when another crew player changes role
    #[serde(rename = "CrewMemberRoleChange")]
    CrewMemberRoleChange(CrewMemberRoleChange),

    /// When written: when another player commits a crime against the current player
    #[serde(rename = "CrimeVictim")]
    CrimeVictim(CrimeVictim),

    /// When written: when scanning a data link
    #[serde(rename = "DatalinkScan")]
    DatalinkScan(DatalinkScan),

    /// When written: when scanning a datalink generates a reward
    #[serde(rename = "DatalinkVoucher")]
    DatalinkVoucher(DatalinkVoucher),

    /// When written: when scanning some types of data links
    #[serde(rename = "DataScanned")]
    DataScanned(TypeDetails),

    /// This event is logged when the player deletes a suit loadout
    #[serde(rename = "DeleteSuitLoadout")]
    DeleteSuitLoadout(SuitLoadoutLite),

    /// When Written: when delivering power micro-resources.
    #[serde(rename = "DeliverPowerMicroResources")]
    DeliverPowerMicroResources(DeliverPowerMicroResources),

    /// When written: player was killed
    #[serde(rename = "Died")]
    Died(Died),

    #[serde(rename = "DisbandedSquadron")]
    DisbandedSquadron(Squadron),

    /// When written: when using the discovery scanner, and new body discoveries are displayed in the cockpit info window. Note you can get two or three of these in a row, where some bodies are discovered by the automatic passive scan, before the active scan is complete.
    #[serde(rename = "DiscoveryScan")]
    DiscoveryScan(DiscoveryScan),

    /// This event is logged when the player steps out of a ship or SRV
    #[serde(rename = "Disembark")]
    Disembark(Disembark),

    /// When written: when landing at landing pad in a space station, outpost, or surface settlement
    #[serde(rename = "Docked")]
    Docked(Docked),

    /// When written: when docking a fighter back with the mothership
    #[serde(rename = "DockFighter")]
    DockFighter(DockFighter),

    /// When written: when the player cancels a docking request
    #[serde(rename = "DockingCancelled")]
    DockingCancelled(DockingCancelled),

    /// When written: when the station denies a docking request
    #[serde(rename = "DockingDenied")]
    DockingDenied(DockingDenied),

    /// When written: when a docking request is granted
    #[serde(rename = "DockingGranted")]
    DockingGranted(DockingGranted),

    /// When written: when the player requests docking at a station
    #[serde(rename = "DockingRequested")]
    DockingRequested(DockingRequested),

    /// When written: when a docking request has timed out
    #[serde(rename = "DockingTimeout")]
    DockingTimeout(DockingTimeout),

    /// When written: when docking an SRV with the ship
    #[serde(rename = "DockSRV")]
    DockSRV(SRV),

    /// When discarding on-foot items from the player's inventory
    #[serde(rename = "DropItems")]
    DropItems(DropItems),

    /// When exiting a shuttle dropship at a conflict zone
    #[serde(rename = "DropshipDeploy")]
    DropshipDeploy(DropshipDeploy),

    /// When cargo is ejected
    #[serde(rename = "EjectCargo")]
    EjectCargo(EjectCargo),

    /// This event is logged when a player (on foot) gets into a ship or SRV
    #[serde(rename = "Embark")]
    Embark(Embark),

    /// When written: when the captain in multicrew disbands the crew
    #[serde(rename = "EndCrewSession")]
    EndCrewSession(EndCrewSession),

    /// When written: when offering items cash or bounties to an Engineer to gain access
    #[serde(rename = "EngineerContribution")]
    EngineerContribution(EngineerContribution),

    /// When Written: when requesting an engineer upgrade
    #[serde(rename = "EngineerCraft")]
    EngineerCraft(EngineerCraft),

    /// When written: when converting a pre-2.4 engineered module. This is generated when converting, or previewing a conversion of a legacy module to the new system.
    #[serde(rename = "EngineerLegacyConvert")]
    EngineerLegacyConvert(EngineerLegacyConvert),

    /// When Written: when a player increases their access to an engineer
    #[serde(rename = "EngineerProgress")]
    EngineerProgress(EngineerProgress),

    /// When written: Player has escaped interdiction
    #[serde(rename = "EscapeInterdiction")]
    EscapeInterdiction(EscapeInterdiction),

    /// When written: Player rewarded for taking part in a combat zone
    #[serde(rename = "FactionKillBond")]
    FactionKillBond(FactionKillBond),

    /// When trading with a Fleet Carrier Bartender for materials, a file is written with the pricelist to FCMaterials.json
    #[serde(rename = "FCMaterials")]
    FCMaterials(FCMaterials),

    /// When written: when requesting a module is transferred from storage at another station
    #[serde(rename = "FetchRemoteModule")]
    FetchRemoteModule(FetchRemoteModule),

    /// When written: when a ship-launched fighter is destroyed
    #[serde(rename = "FighterDestroyed")]
    FighterDestroyed(Damage),

    /// When written: when a ship's fighter is rebuilt in the hangar
    #[serde(rename = "FighterRebuilt")]
    FighterRebuilt(FighterRebuilt),

    #[serde(rename = "Fileheader")]
    Fileheader(Fileheader),

    /// When written: when receiving information about a change in a friend's status. Also written at startup for friends who are already online.
    #[serde(rename = "Friends")]
    Friends(Friends),

    /// When written: when jumping from one star system to another
    #[serde(rename = "FSDJump")]
    FSDJump(FSDJump),

    /// When written: when selecting a star system to jump to. When following a multi-jump route, this will typically appear for the next star, during a jump, ie after StartJump but before the FSDJump
    #[serde(rename = "FSDTarget")]
    FSDTarget(FSDTarget),

    /// When written: after having identified all bodies in the system
    #[serde(rename = "FSSAllBodiesFound")]
    FSSAllBodiesFound(FSSAllBodiesFound),

    /// This event is written when completing a Full Spectrum Scan of a starsystem, to list the number of SAA signals found in the system (as shown in-game in the top-right panel)
    #[serde(rename = "FSSBodySignals")]
    FSSBodySignals(FSSBodySignals),

    /// When written: when performing a full system scan (Honk)
    #[serde(rename = "FSSDiscoveryScan")]
    FSSDiscoveryScan(FSSDiscoveryScan),

    /// When written: when zooming in on a signal using the FSS scanner
    #[serde(rename = "FSSSignalDiscovered")]
    FSSSignalDiscovered(FSSSignalDiscovered),

    /// When written: when scooping fuel from a star
    #[serde(rename = "FuelScoop")]
    FuelScoop(FuelScoop),

    /// When written: when taking damage due to overheating
    #[serde(rename = "HeatDamage")]
    HeatDamage(Damage),

    /// When written: when heat exceeds 100%
    #[serde(rename = "HeatWarning")]
    HeatWarning(Empty),

    /// When a holoscreen is hacked
    #[serde(rename = "HoloscreenHacked")]
    HoloscreenHacked(HoloscreenHacked),

    /// When written: when hull health drops below a threshold (20% steps)
    #[serde(rename = "HullDamage")]
    HullDamage(HullDamage),

    /// When written: player was interdicted by player or npc
    #[serde(rename = "Interdicted")]
    Interdicted(Interdicted),

    #[serde(rename = "Interdiction")]
    Interdiction(Interdiction),

    #[serde(rename = "InvitedToSquadron")]
    InvitedToSquadron(Squadron),

    /// When written: when enough material has been collected from a solar jet code (at a white dwarf or neutron star) for a jump boost
    #[serde(rename = "JetConeBoost")]
    JetConeBoost(JetConeBoost),

    /// When written: when passing through the jet code from a white dwarf or neutron star has caused damage to a ship module
    #[serde(rename = "JetConeDamage")]
    JetConeDamage(JetConeDamage),

    /// When written: When you join another player ship's crew
    #[serde(rename = "JoinACrew")]
    JoinACrew(Crew),

    #[serde(rename = "JoinedSquadron")]
    JoinedSquadron(Squadron),

    /// When written: When you force another player to leave your ship's crew
    #[serde(rename = "KickCrewMember")]
    KickCrewMember(KickCrewMember),

    #[serde(rename = "KickedFromSquadron")]
    KickedFromSquadron(Squadron),

    /// When written: when using any type of drone/limpet
    #[serde(rename = "LaunchDrone")]
    LaunchDrone(LaunchDrone),

    /// When written: when launching a fighter
    #[serde(rename = "LaunchFighter")]
    LaunchFighter(LaunchFighter),

    /// When written: deploying the SRV from a ship onto planet surface
    #[serde(rename = "LaunchSRV")]
    LaunchSRV(LaunchSRV),

    /// When written: when flying away from a planet, and distance increases above the 'Orbital Cruise' altitude
    #[serde(rename = "LeaveBody")]
    LeaveBody(Body),

    #[serde(rename = "LeftSquadron")]
    LeftSquadron(Squadron),

    /// When written: when taking off from planet surface
    #[serde(rename = "Liftoff")]
    Liftoff(Touchdown),

    #[serde(rename = "LoadGame")]
    LoadGame(LoadGame),

    /// When written: at startup, when loading from main menu, or when switching ships, or after changing the ship in Outfitting, or when docking SRV back in mothership
    #[serde(rename = "Loadout")]
    Loadout(Loadout),

    /// This event is logged when a player adds a weapon to a suit loadout
    #[serde(rename = "LoadoutEquipModule")]
    LoadoutEquipModule(LoadoutEquipModule),

    /// This event is logged when a player removes a weapon from a suit loadout
    #[serde(rename = "LoadoutRemoveModule")]
    LoadoutRemoveModule(LoadoutEquipModule),

    /// When written: at startup, or when being resurrected at a station
    #[serde(rename = "Location")]
    Location(Location),

    /// When written: when accessing the commodity market in a station. A separate file Market.json is written to the same folder as the journal, containing full market price info.
    #[serde(rename = "Market")]
    Market(Market),

    /// When Written: when purchasing goods in the market
    #[serde(rename = "MarketBuy")]
    MarketBuy(MarketBuy),

    /// When Written: when selling goods in the market
    #[serde(rename = "MarketSell")]
    MarketSell(MarketSell),

    /// When written: when putting multiple modules into storage
    #[serde(rename = "MassModuleStore")]
    MassModuleStore(MassModuleStore),

    /// When Written: whenever materials are collected
    #[serde(rename = "MaterialCollected")]
    MaterialCollected(MaterialCollected),

    /// When Written: if materials are discarded
    #[serde(rename = "MaterialDiscarded")]
    MaterialDiscarded(MaterialCollected),

    /// When Written: when a new material is discovered
    #[serde(rename = "MaterialDiscovered")]
    MaterialDiscovered(MaterialDiscovered),

    /// When written: at startup, when loading from main menu into game
    #[serde(rename = "Materials")]
    Materials(Materials),

    /// When written: when exchanging materials at the Material trader contact
    #[serde(rename = "MaterialTrade")]
    MaterialTrade(MaterialTrade),

    /// When Written: when mining fragments are converted unto a unit of cargo by refinery
    #[serde(rename = "MiningRefined")]
    MiningRefined(TypeDetails),

    /// When Written: when a mission has been abandoned
    #[serde(rename = "MissionAbandoned")]
    MissionAbandoned(Mission),

    /// When Written: when starting a mission
    #[serde(rename = "MissionAccepted")]
    MissionAccepted(MissionAccepted),

    /// When Written: when a mission is completed
    #[serde(rename = "MissionCompleted")]
    MissionCompleted(MissionCompleted),

    /// When Written: when a mission has failed
    #[serde(rename = "MissionFailed")]
    MissionFailed(Mission),

    /// When written: when a mission is updated with a new destination
    #[serde(rename = "MissionRedirected")]
    MissionRedirected(MissionRedirected),

    /// When written: at startup
    #[serde(rename = "Missions")]
    Missions(Missions),

    /// When Written: when buying a module in outfitting
    #[serde(rename = "ModuleBuy")]
    ModuleBuy(ModuleBuy),

    /// When Written: when buying a module and directly storing it in outfitting
    #[serde(rename = "ModuleBuyAndStore")]
    ModuleBuyAndStore(ModuleBuyAndStore),

    /// When written: when looking at the cockpit Right Hand Side modules info panel, if data has changed. This also writes a ModulesInfo.json file alongside the journal, listing the modules in the same order as displayed.
    #[serde(rename = "ModuleInfo")]
    ModuleInfo(ModuleInfo),

    /// When written: when fetching a previously stored module
    #[serde(rename = "ModuleRetrieve")]
    ModuleRetrieve(ModuleRetrieve),

    /// When Written: when selling a module in outfitting
    #[serde(rename = "ModuleSell")]
    ModuleSell(ModuleSell),

    /// When written: when selling a module in storage at another station
    #[serde(rename = "ModuleSellRemote")]
    ModuleSellRemote(ModuleSellRemote),

    /// When written: when storing a module in Outfitting
    #[serde(rename = "ModuleStore")]
    ModuleStore(ModuleStore),

    /// When Written: when moving a module to a different slot on the ship
    #[serde(rename = "ModuleSwap")]
    ModuleSwap(ModuleSwap),

    /// When written: when selling exploration data in Cartographics, a page at a time
    #[serde(rename = "MultiSellExplorationData")]
    MultiSellExplorationData(MultiSellExplorationData),

    #[serde(rename = "Music")]
    Music(Music),

    /// When written: when scanning a navigation beacon, before the scan data for all the bodies in the system is written into the journal
    #[serde(rename = "NavBeaconScan")]
    NavBeaconScan(NavBeaconScan),

    /// When plotting a multi-star route, the file NavRoute.json is written in the same directory as the journal, with a list of stars along that route
    #[serde(rename = "NavRoute")]
    NavRoute(NavRoute),

    /// When written: When the current plotted nav route is cleared. Can be written to NavRoute.json with an empty Route array.
    #[serde(rename = "NavRouteClear")]
    NavRouteClear(NavRouteClear),

    /// When written: Creating a new commander
    #[serde(rename = "NewCommander")]
    NewCommander(NewCommander),

    /// This is written when crew receive wages
    #[serde(rename = "NpcCrewPaidWage")]
    NpcCrewPaidWage(NpcCrewPaidWage),

    /// This is written when a crew member's combat rank increases
    #[serde(rename = "NpcCrewRank")]
    NpcCrewRank(NpcCrewRank),

    /// Written when accessing the outfitting menu. The full parts pricelist is written to a separate file Outfitting.json.
    #[serde(rename = "Outfitting")]
    Outfitting(Outfitting),

    /// When written: at startup, when loading the saved game file
    #[serde(rename = "Passengers")]
    Passengers(Passengers),

    /// When written: when paying off bounties
    #[serde(rename = "PayBounties")]
    PayBounties(Payment),

    /// When written: when paying fines
    #[serde(rename = "PayFines")]
    PayFines(Payment),

    /// When written: at startup, if player has pledged to a power
    #[serde(rename = "Powerplay")]
    Powerplay(Powerplay),

    /// When written: when collecting powerplay commodities for delivery
    #[serde(rename = "PowerplayCollect")]
    PowerplayCollect(PowerplayDelivery),

    /// When written: when a player defects from one power to another
    #[serde(rename = "PowerplayDefect")]
    PowerplayDefect(PowerplayDefect),

    /// When written: when delivering powerplay commodities
    #[serde(rename = "PowerplayDeliver")]
    PowerplayDeliver(PowerplayDelivery),

    /// When written: when paying to fast-track allocation of commodities
    #[serde(rename = "PowerplayFastTrack")]
    PowerplayFastTrack(PowerplayFastTrack),

    /// When written: when joining up with a power
    #[serde(rename = "PowerplayJoin")]
    PowerplayJoin(PowerplayJoin),

    /// When written: when leaving a power
    #[serde(rename = "PowerplayLeave")]
    PowerplayLeave(PowerplayJoin),

    /// When written: when receiving salary payment from a power
    #[serde(rename = "PowerplayMerits")]
    PowerplayMerits(PowerplayMerits),

    /// When written: when receiving salary payment from a power
    #[serde(rename = "PowerplayRank")]
    PowerplayRank(PowerplayRank),

    /// When written: when receiving salary payment from a power
    #[serde(rename = "PowerplaySalary")]
    PowerplaySalary(PowerplaySalary),

    /// When written: when voting for a system expansion
    #[serde(rename = "PowerplayVote")]
    PowerplayVote(PowerplayVote),

    /// When written: when receiving payment for powerplay combat
    #[serde(rename = "PowerplayVoucher")]
    PowerplayVoucher(PowerplayVoucher),

    /// When written: at startup
    #[serde(rename = "Progress")]
    Progress(Rank),

    /// When written: when the player’s rank increases. Only the relevant ranks are included.
    #[serde(rename = "Promotion")]
    Promotion(Promotion),

    /// When using a prospecting drone
    #[serde(rename = "ProspectedAsteroid")]
    ProspectedAsteroid(ProspectedAsteroid),

    /// When written: when this player has killed another player
    #[serde(rename = "PVPKill")]
    PVPKill(PVPKill),

    #[serde(rename = "QuitACrew")]
    QuitACrew(Crew),

    /// When written: at startup
    #[serde(rename = "Rank")]
    Rank(Rank),

    /// When written: when the reboot repair function is used
    #[serde(rename = "RebootRepair")]
    RebootRepair(RebootRepair),

    /// When written: when a text message is received from another player or npc
    #[serde(rename = "ReceiveText")]
    ReceiveText(ReceiveText),

    /// When Written: when claiming payment for combat bounties and bonds
    #[serde(rename = "RedeemVoucher")]
    RedeemVoucher(RedeemVoucher),

    /// When Written: when refuelling (full tank)
    #[serde(rename = "RefuelAll")]
    RefuelAll(Refuel),

    /// When Written: when refuelling (10%)
    #[serde(rename = "RefuelPartial")]
    RefuelPartial(Refuel),

    #[serde(rename = "RenameSuitLoadout")]
    RenameSuitLoadout(SuitLoadoutLite),

    /// When Written: when repairing the ship. When repairing on a FleetCarrier, you can get a list of the modules repaired
    #[serde(rename = "Repair")]
    Repair(Repair),

    /// When written: when repairing everything
    #[serde(rename = "RepairAll")]
    RepairAll(ShipEquipmentPurchase),

    /// When written: when the player's ship has been repaired by a repair drone. Each of the values indicate the amount of damage that has been repaired
    #[serde(rename = "RepairDrone")]
    RepairDrone(RepairDrone),

    /// When written: at startup (after Rank and Progress). This gives the player's reputation (on a scale of -100..+100) with the superpowers
    #[serde(rename = "Reputation")]
    Reputation(Reputation),

    /// When Written: when requesting power micro-resources.
    #[serde(rename = "RequestPowerMicroResources")]
    RequestPowerMicroResources(RequestPowerMicroResources),

    /// When fuel is moved from one fuel tank to another
    #[serde(rename = "ReservoirReplenished")]
    ReservoirReplenished(ReservoirReplenished),

    /// When Written: when purchasing an SRV or Fighter
    #[serde(rename = "RestockVehicle")]
    RestockVehicle(RestockVehicle),

    #[serde(rename = "Resupply")]
    Resupply(Empty),

    /// When written: when the player restarts after death
    #[serde(rename = "Resurrect")]
    Resurrect(Resurrect),

    /// When written: after using the Surface Area Analysis Scanner
    #[serde(rename = "SAAScanComplete")]
    SAAScanComplete(SAAScanComplete),

    /// When written: when using Surface Area Analysis Scanner on a planet or rings
    #[serde(rename = "SAASignalsFound")]
    SAASignalsFound(SAASignalsFound),

    /// When Written: basic or detailed discovery scan of a star, planet or moon. This is also generated when scanning a navigation beacon in a populated system, to record info about all the bodies in the system.
    #[serde(rename = "Scan")]
    Scan(Scan),

    /// When scanning one body of a binary pair, you will get an event detailing the orbital parameters of their BaryCentre
    #[serde(rename = "ScanBaryCentre")]
    ScanBaryCentre(ScanBaryCentre),

    /// When written: when the player's ship has been scanned (The Scan Detected indication is at the start of the scan, this is written at the end of a successful scan)
    #[serde(rename = "Scanned")]
    Scanned(Scanned),

    /// This event is logged when the player uses the Organic Sampling Tool to scan, log or analyse organic discoveries. The first scan is Log, subsequent scans are Sample until fully scanned, final scan is Analyse
    #[serde(rename = "ScanOrganic")]
    ScanOrganic(ScanOrganic),

    /// When written: when contributing materials to a research community goal
    #[serde(rename = "ScientificResearch")]
    ScientificResearch(ScientificResearch),

    /// When Written: when a screen snapshot is saved. The latitude, longitude, altitude and heading will be included if on a planet or in low-altitude flight.
    #[serde(rename = "Screenshot")]
    Screenshot(Screenshot),

    /// When written: when delivering items to a Search and Rescue contact
    #[serde(rename = "SearchAndRescue")]
    SearchAndRescue(SearchAndRescue),

    /// When written: when the self destruct function is used
    #[serde(rename = "SelfDestruct")]
    SelfDestruct(Empty),

    /// When Written: when selling unwanted drones back to the market
    #[serde(rename = "SellDrones")]
    SellDrones(SellDrones),

    /// When Written: when selling exploration data in Cartographics
    #[serde(rename = "SellExplorationData")]
    SellExplorationData(SellExplorationData),

    /// This event is logged when a player sells Microresources for cash
    #[serde(rename = "SellMicroResources")]
    SellMicroResources(SellMicroResources),

    /// This event records that a player has sold organic data (see ScanOrganic)
    #[serde(rename = "SellOrganicData")]
    SellOrganicData(SellOrganicData),

    /// When written: When selling a stored ship to raise funds when on insurance/rebuy screen
    #[serde(rename = "SellShipOnRebuy")]
    SellShipOnRebuy(SellShipOnRebuy),

    /// This event is logged when a player sells a flight suit
    #[serde(rename = "SellSuit")]
    SellSuit(Suit),

    /// This event is logged when a player sells a hand weapon
    #[serde(rename = "SellWeapon")]
    SellWeapon(Weapon),

    /// When written: when a text message is sent to another player
    #[serde(rename = "SendText")]
    SendText(SendText),

    /// When written: when assigning a name to the ship in Starport Services
    #[serde(rename = "SetUserShipName")]
    SetUserShipName(SetUserShipName),

    #[serde(rename = "SharedBookmarkToSquadron")]
    SharedBookmarkToSquadron(Squadron),

    /// When written: when shields are disabled in combat, or recharged
    #[serde(rename = "ShieldState")]
    ShieldState(ShieldState),

    /// Lists the contents of the ship locker, eg at startup. The full contents are written to a separate file, ShipLocker.json. The full list is also written into the journal at startup (if in a ship) and when boarding a ship. The shiplocker.json file is updated when the locker contents are changed.
    #[serde(rename = "ShipLocker")]
    ShipLocker(Inventory),

    /// Same as ShipLocker, but discontinued.
    #[serde(rename = "ShipLockerMaterials")]
    ShipLockerMaterials(ShipLockerMaterials),

    /// When written: after a new ship has been redeemed
    #[serde(rename = "ShipRedeemed")]
    ShipRedeemed(Ship),

    /// When written: when the current player selects a new target
    #[serde(rename = "ShipTargeted")]
    ShipTargeted(ShipTargeted),

    /// When written: when accessing shipyard in a station. The full price list is written to a separate file, in the same folder as the journal, Shipyard.json
    #[serde(rename = "Shipyard")]
    Shipyard(Shipyard),

    /// When Written: when buying a new ship in the shipyard
    #[serde(rename = "ShipyardBuy")]
    ShipyardBuy(ShipyardBuy),

    /// When written: after a new ship has been purchased
    #[serde(rename = "ShipyardNew")]
    ShipyardNew(Ship),

    /// When written: after a new ship has been unlocked in the Shipyard
    #[serde(rename = "ShipyardRedeem")]
    ShipyardRedeem(ShipyardRedeem),

    /// When Written: when selling a ship stored in the shipyard
    #[serde(rename = "ShipyardSell")]
    ShipyardSell(ShipyardSell),

    /// When Written: when switching to another ship already stored at this station
    #[serde(rename = "ShipyardSwap")]
    ShipyardSwap(ShipyardSwap),

    /// When Written: when requesting a ship at another station be transported to this station
    #[serde(rename = "ShipyardTransfer")]
    ShipyardTransfer(ShipyardTransfer),

    /// When written: on a clean shutdown of the game
    #[serde(rename = "Shutdown")]
    Shutdown(Empty),

    #[serde(rename = "SquadronCreated")]
    SquadronCreated(Squadron),

    #[serde(rename = "SquadronDemotion")]
    SquadronDemotion(SquadronPromotion),

    #[serde(rename = "SquadronPromotion")]
    SquadronPromotion(SquadronPromotion),

    #[serde(rename = "SquadronStartup")]
    SquadronStartup(SquadronStartup),

    /// When written: when the player's SRV is destroyed
    #[serde(rename = "SRVDestroyed")]
    SRVDestroyed(SRV),

    /// When written: at the start of a Hyperspace or Supercruise jump (start of countdown)
    #[serde(rename = "StartJump")]
    StartJump(StartJump),

    /// When written: at startup. This line contains the information displayed in the statistics panel on the right side of the cockpit
    #[serde(rename = "Statistics")]
    Statistics(Statistics),

    /// This event is written to Status.json which is updated every few seconds
    #[serde(rename = "Status")]
    Status(Status),

    /// When written: when first visiting Outfitting, and when the set of stored modules has changed
    #[serde(rename = "StoredModules")]
    StoredModules(StoredModules),

    /// When written: when visiting shipyard
    #[serde(rename = "StoredShips")]
    StoredShips(StoredShips),

    /// This event is logged when starting on-foot or when disembarking
    #[serde(rename = "SuitLoadout")]
    SuitLoadout(SuitLoadout),

    /// When dropping out of supercruise at a targeted destination
    #[serde(rename = "SupercruiseDestinationDrop")]
    SupercruiseDestinationDrop(SupercruiseDestinationDrop),

    /// When written: entering supercruise from normal space
    #[serde(rename = "SupercruiseEntry")]
    SupercruiseEntry(SupercruiseEntry),

    /// When written: leaving supercruise for normal space
    #[serde(rename = "SupercruiseExit")]
    SupercruiseExit(SupercruiseExit),

    /// This event is logged when a player selects a different flight suit from the ship’s locker
    #[serde(rename = "SwitchSuitLoadout")]
    SwitchSuitLoadout(SwitchSuitLoadout),

    /// When written: when synthesis is used to repair or rearm
    #[serde(rename = "Synthesis")]
    Synthesis(Synthesis),

    /// When written: when the player's ship systems shut down (eg in a Thargoid encounter)
    #[serde(rename = "SystemsShutdown")]
    SystemsShutdown(Empty),

    /// When written: when using the Technology Broker to unlock new purchasable technology
    #[serde(rename = "TechnologyBroker")]
    TechnologyBroker(TechnologyBroker),

    /// When written: landing on a planet surface
    #[serde(rename = "Touchdown")]
    Touchdown(Touchdown),

    /// This event is logged when the player exchanges owned microresources to receive some other type of microresource
    #[serde(rename = "TradeMicroResources")]
    TradeMicroResources(TradeMicroResources),

    /// Written when transferring items between backpack and ship locker
    #[serde(rename = "TransferMicroResources")]
    TransferMicroResources(TransferMicroResources),

    /// When written: when under fire (same time as the Under Attack voice message)
    #[serde(rename = "UnderAttack")]
    UnderAttack(UnderAttack),

    /// When written: liftoff from a landing pad in a station, outpost or settlement
    #[serde(rename = "Undocked")]
    Undocked(Undocked),

    /// This event is logged when the player upgrades their flight suit
    #[serde(rename = "UpgradeSuit")]
    UpgradeSuit(UpgradeSuit),

    #[serde(rename = "UpgradeWeapon")]
    UpgradeWeapon(UpgradeWeapon),

    /// When using an item from the player’s inventory (backpack)
    #[serde(rename = "UseConsumable")]
    UseConsumable(UseConsumable),

    /// When written: when dropping from Supercruise at a Unidentified Signal Source
    #[serde(rename = "USSDrop")]
    USSDrop(USSDrop),

    /// When written: when switching control between the main ship and a fighter
    #[serde(rename = "VehicleSwitch")]
    VehicleSwitch(VehicleSwitch),

    /// When written: another player has joined the wing
    #[serde(rename = "WingAdd")]
    WingAdd(WingInvite),

    /// When written: when the player is invited to a wing
    #[serde(rename = "WingInvite")]
    WingInvite(WingInvite),

    /// When written: this player has joined a wing
    #[serde(rename = "WingJoin")]
    WingJoin(WingJoin),

    /// When written: this player has left a wing
    #[serde(rename = "WingLeave")]
    WingLeave(Empty),

}

